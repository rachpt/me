<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[solve-composting-broken]]></title>
    <url>%2F2019%2F11%2F09%2Fsolve-composting-broken%2F</url>
    <content type="text"><![CDATA[某次重启manjaro KDE后桌面透明效果丢失(无法透明)，刚开始以为是显卡驱动问题，最后发现是 混成器(composting)的问题。 问题表现以前正常的透明特效丢失，设置里面的 显示与监控 混成器 无法打开。 尝试更新显卡驱动无法解决该问题。 解决问题必须要英语搜索啊。使用关键词 KDE composting not work 就找到解决办法。 解决办法1234# 修改 ~/.config/kwinrc 的 OpenGLIsUnsafe 值为 falsegrep "OpenGLIsUnsafe" ~/.config/kwinrcsed -i '/OpenGLIsUnsafe/&#123;s/true/false/&#125;' ~/.config/kwinrc 参考 文档一，文档二 。 其他XRender 透明开关快捷键 Alt+Shift+F12. 更新：某次几百兆的系统更新后，设置中的混成器已经不闪退了，等待也是修复bug的一种方式。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kde</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-notes]]></title>
    <url>%2F2019%2F11%2F04%2Fgit-notes%2F</url>
    <content type="text"><![CDATA[一些不是很常用的 git 使用操作笔记。 删除 github 上的一个分支本地新建一个文件，初始化一个 git 空间，push 这个空目录至远程仓库的对应分支，就可以删掉该分支。 1234567mkdir new_foldercd new_foldergit initgit remote add origin git@github.com:USER/reop.gitgit push -u origin the_branch_to_deletecd ..rm -r new_folder]]></content>
  </entry>
  <entry>
    <title><![CDATA[eclipse-notes]]></title>
    <url>%2F2019%2F10%2F05%2Feclipse-notes%2F</url>
    <content type="text"><![CDATA[eclipse 使用笔记。 安装配置参考教学视频1。 模块安装 CDT 以支持 C/C++： Help --&gt; Eclipse Marketplace，搜索 CDT，Eclipse C/C++ IDE CDT x.x(xxxx-xx) Install 即可。 卸载模块 普通可以在 marketplace 里面的 Installed 里面卸载。 中文语言包卸载方法：Help --&gt; About Eclipse IDE --&gt; Installation Details，选中相关的插件 Uninstall 即可。 快捷键 Alt + / 智能补全， Ctrl + / 行 注释与取消注释， Ctrl + Shift + / 块注释选中内容， Ctrl + Shift + \ 取消块注释选中内容， Ctrl + Shift + F 自动整理代码， Ctrl + Shift + O 自动导入包， Alt + 上 当前行上移， Alt + 下 当前行下移， Ctrl + Alt + 上 当前行向上复制一行， Ctrl + Alt + 下 当前行向下复制一行， Ctrl + D 删除当前行， Shift + Enter 光标行下面新建一行，并将光标移到那一行， Ctrl + M 编辑区最大化显示， Ctrl + Shift + L 显示快捷键列表。 参考教学视频2。 缩放编辑区字体： Ctrl + 鼠标滚轮无效，使用通用的 Ctrl + - 缩小，Ctrl + +(shift + =) 放大。 Go 语言配置环境打开 preference --&gt; Go，配合 whereis go 填写对应路径即可。 包括 Go installation Directory，以及 Tools。参考文档1。 其中 gocode、godef、guru 是一些自动工具，比如自动不全、拼写检查等。安装需要使用 go 自行编译。其中需要注意 golang.org 为 google 的网站，需要使用 github 找到相应进行 repo 编译安装，网上有较多教程，折腾几下就可以编译成功。archlinux 系可以使用 AUR 安装 yay -S gocode-git，旧版本会有不兼容现象。 编译 godef、guru12345678910111213141516171819202122232425262728# 编译godef，以普通用户在家目录运行go get -u -v github.com/rogpeppe/godef# 等待完成后，二进制文件构建在 ~/go/bin/godef# 编译 guru 比较麻烦，因为 golang.org 被墙，需要自己造特殊文件夹mkdir -p ~/go/src/golang.org/x/cd ~/go/src/golang.org/x/git clone https://github.com/golang/tools.git &amp;git clone https://github.com/golang/net.git &amp;git clone https://github.com/golang/sync.git &amp;git clone https://github.com/golang/xerrors.git &amp;# 设置 GOPATHexport GOPATH='~/go'# 等待所有下载完成后，使用按包编译命令cd ~/go/src # 该条貌似不必要# 包名是相对 GOPATH 的 src 目录的go build golang.org/x/tools/cmd/guru/# 二进制文件 就在当前目录下。# 移动到系统目录# 使用 sudo cp 可以自动修改相应属性sudo cp guru ../bin/godef /usr/bin/# 最后可以清理不需要的 源代码文件 上面的方法好像比较傻，更简洁的做法是配置 GOPROXY，然后使用 go get 命令安装。 可以使用 go env GOROOT 获得 go 的安装路径。 1234567891011# 设置 GO 环境变量vim ~/.bashrc# GO Settingsexport GOROOT=/usr/lib/goexport GOPATH="$HOME/go"export PATH=$PATH:$GOPATH/binexport GO111MODULE=on#export GOPROXY=https://goproxy.ioexport GOPROXY=https://goproxy.cn#export GOPROXY=https://mirrors.aliyun.com/goproxy/ 配置好后 source 一下 .bashrc 以生效。 123go get -u -v github.com/nsf/gocodego get -u -v github.com/rogpeppe/godefgo get -u -v golang.org/x/tools/cmd/guru # 不能用阿里云代理 以后直接使用上面三条命令就能升级 gocode godef guru。 安装 Goclipse 插件支持 go 语言，可能会因为 运行 eclipse 的 JVM 不是版本8而报错：&quot;could not start goclipse because java version is 0，requare java 8&quot;。解决办法：12345678910111213whereis eclipse # 找到安装路径(使用直接解压版请忽略)# /usr/lib/eclipse# 应该有文件 /usr/lib/eclipse/eclipse.inisudo vim /usr/lib/eclipse/eclipse.ini# 在 -vmargs 上面一行修改 或者添加如下两行-vm/usr/lib/jvm/java-8-openjdk/bin/# 需要自行验证 java8 路径，也可能是 java-8-jdk。 每次更新升级 eclipse 后都需要改一下(除非只安装了jdk8)，参考文档2。 构建第一次运行、以及切换项目、源文件时都需要设置 Run configurations。 后面只需单击工具栏 绿圈箭头 即可重新构建并运行，或则使用快捷键 Ctrl + F11。]]></content>
      <tags>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Interview-notes]]></title>
    <url>%2F2019%2F09%2F18%2FInterview-notes%2F</url>
    <content type="text"><![CDATA[面试笔记 cache buffer 区别cache 高速缓存区，提高度取命中率，速度较快，一般为RAM静态区域，buffer 缓冲区，将文件一次写入磁盘，减少写文件I/O压力。 du 与 ls 查看文件大小区别du 为 disk usage，显示的是文件占用磁盘的大小，而 ls -l 显示的是文件的实际大小，占用大小大于等于文件大小。 因为文件系统使用 块 block 作为最小单元管理磁盘，一般为 4K 一个block，所以 1K 大小的文件使用 du 查看占用一个 block，4K。 load 大小load 与系统 CPU 核数有关，单核 CPU load 为 1 就表示满负载，对于多核，load 满负载时为 核心数。 三个值为 1、5、15分钟内平均负载。 查看 CPU 核心数grep &#39;model name&#39; /proc/cpuinfo | wc -l 301 与 302 跳转区别301 为永久性的跳转，对搜索引擎友好，302 为暂时性的跳转。 find1234# -exec 末尾 + 或者 \;# + 后面可以使用 管道find ../Public/ -type f -exec du -Sh &#123;&#125; +find ../Public/ -type f -exec du -Sh &#123;&#125; \; 列出最大的前10个文件1find / -type f -exec du -Sh &#123;&#125; + | sort -rh | head -n 10 参考文档。 -mtime +2 大于2天，-mmin -2 两分钟之内，-size -10M 大小。 HTTP 版本区别HTTP/2采用二进制格式而非文本格式HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行使用报头压缩，HTTP/2降低了开销HTTP/2让服务器可以将响应主动“推送”到客户端缓存中 参考文档。]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[proxy-to-subpath-with-nginx]]></title>
    <url>%2F2019%2F08%2F09%2Fproxy-to-subpath-with-nginx%2F</url>
    <content type="text"><![CDATA[使用nginx将网站反代值二级目录。 问题描述现有一个不能增加二级域名的的网站，希望使用该域名完整代理其他一个网站到一个二级路径，同时保证现有的服务仍然可用。 同时还有一个问题，需要将 https 的内容反代到 http，(登录 cookie有secure flag)。 1234567891011121314151617181920212223242526272829303132333435363738394041unsecure_cookie *; # 这个需要自己编译附加模块location ^~ /hudbt &#123; proxy_pass https://hudbt.hust.edu.cn/; unsecure_cookie *; proxy_cookie_path / /hudbt; proxy_cookie_domain hudbt.hust.edu.cn $host; sub_filter &quot;hudbt.hust.edu.cn&quot; $host; proxy_redirect https://$host/index.php http://$host/hudbt/index.php; proxy_redirect https://$host/login.php http://$host/hudbt/login.php; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 允许客户端请求的最大单文件字节数 client_max_body_size 10m; # 缓冲区代理缓冲用户端请求的最大字节数 client_body_buffer_size 128k; # nginx跟后端服务器连接超时时间(代理连接超时) proxy_connect_timeout 300; # 后端服务器数据回传时间(代理发送超时) proxy_send_timeout 300; # 连接成功后，后端服务器响应时间(代理接收 超时) proxy_read_timeout 300; # 设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffer_size 4k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 proxy_buffers 4 32k; #高负荷下缓冲大小（proxy_buffers*2） proxy_busy_buffers_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 proxy_temp_file_write_size 64k; # https to http if ($scheme = https) &#123; rewrite ^(.*)? http://$http_host$1 permanent; &#125;&#125;if ( $request_uri ~* ^/(cache|attachments|pic|styles)/ ) &#123; rewrite ^/(cache|attachments|pic|styles)/(.*)$ /hudbt/$1/$2 permanent;&#125;if ( $request_uri ~* ^/([a-z0-9]+\.php[a-z0-9&amp;+?-_%@#=\.]*)$ )&#123; rewrite ^/(.*)$ /hudbt/$1 permanent;&#125; unsecure_cookie *; 为编译附加其他模块引入，后面会提到。 location 用来将所有以hudbt开头的请求定向到反代域名https://hudbt.hust.edu.cn/ proxy_cookie_path 指定cookie有效链接范围，两个proxy_redirect用于修改登录后 301 跳转链接中的https，以及重定向至反代路径。 后面的 http to http 使用rewrite重定向至http链接，permanentflag表示地址栏也改成重定向后的链接。 后面两个 if 语句用于改写反代网站url至二级路径链接。第一个处理反代网站文件夹链接，第二个处理反代网站的所有php文件(包括含有参数的请求)，这就要求原本网站不能有直接裸露在更目录的php文件。只需使用其他二级路径放原本裸露的php就能避免和反代冲突。 Secure Flag如果Cookie中有此flag，则表示这个cookie只有用在https请求中，如果改成http，那么cookie就会丢失。还在有人提供了这个模块，nginx_unsecure_cookie_module，自己编译nginx，得到这个可以去掉 proxy cookie中secure的feature。 编译需要把必要的需求模块参数都加上，否则可能会提示很多功能不能用。 这里我直接查看 arch 源里面nginx的编译参数，加上上面模块即可，编译完成后 直接 替换nginx二进制可执行文件。123456789101112131415161718192021222324252627282930313233343536373839404142434445./config --prefix=/etc/nginx \ --conf-path=/etc/nginx/nginx.conf \ --sbin-path=/usr/bin/nginx \ --pid-path=/run/nginx.pid \ --lock-path=/run/lock/nginx.lock \ --user=http \ --group=http \ --http-log-path=/var/log/nginx/access.log \ --error-log-path=stderr \ --http-client-body-temp-path=/var/lib/nginx/client-body \ --http-proxy-temp-path=/var/lib/nginx/proxy \ --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \ --http-scgi-temp-path=/var/lib/nginx/scgi \ --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \ --with-cc-opt=&apos;-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -D_FORTIFY_SOURCE=2&apos; \ --with-ld-opt=-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now \ --with-compat \ --with-debug \ --with-file-aio \ --with-http_addition_module \ --with-http_auth_request_module \ --with-http_dav_module \ --with-http_degradation_module \ --with-http_flv_module \ --with-http_geoip_module \ --with-http_gunzip_module \ --with-http_gzip_static_module \ --with-http_mp4_module \ --with-http_realip_module \ --with-http_secure_link_module \ --with-http_slice_module \ --with-http_ssl_module \ --with-http_stub_status_module \ --with-http_sub_module \ --with-http_v2_module \ --with-mail \ --with-mail_ssl_module \ --with-pcre-jit \ --with-stream \ --with-stream_geoip_module \ --with-stream_realip_module \ --with-stream_ssl_module \ --with-stream_ssl_preread_module \ --with-threads \ --add-module=nginx_unsecure_cookie_module 后面的 --add-module即是额外的去除secure的模块。 如第二部分配置第一行所示，就可去除所有cookie中的额外 flag。 至此，使用http二级路径反代https网站成功。 参考文档。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-pit]]></title>
    <url>%2F2019%2F07%2F21%2Fhexo-pit%2F</url>
    <content type="text"><![CDATA[hexo 中遇到的坑 123&#123;&#123;&#125;&#125;&#123;##&#125;&#123;%%&#125; 这些东西如果出现在博文中需要放到代码里面，特别是对于不全的形式，需要使用代码块，行内形式都不行。 比如1$&#123;#abv&#125; 如果直接使用 ` 包裹就会遇到12345FATAL Something&apos;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path)Error: expected end of comment, got end of fileat Object._prettifyError (/home/rachpt/blog-old/node_modules/nunjucks/src/lib.js:36:11)...... 扩展阅读。 相对链接1&#123;% post_link markdown-learning-by-maxiang 点击这里查看这篇文章 %&#125; 参考文档。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[digital-image-processing-notes]]></title>
    <url>%2F2019%2F07%2F14%2Fdigital-image-processing-notes%2F</url>
    <content type="text"><![CDATA[数字图像处理笔记。 基础彩色转化成灰度图公式： gray = 0.2989 * R + 0.5870 * G + 0.1140 * B灰度内插 最近邻内插法，简单，但是失真较严重，不常用。 双线性内插法： 使用四个近邻估计给定位置的灰度，比较常用。公式 $v(x, y) = ax + by + cxy + d$，四个系数刚好使用四个近邻点给出。本质是非线性变换。 双三次内插：使用16个近邻点确定给定位置的灰度。公式： 计算量较大，效果更好。 v(x, y) = \sum_{i=0}^3 \sum_{j=0}^3 a_{ij} x^i y^j 图像几何空间变换由两个基本操作组成： 1) 坐标空间变化；2) 灰度内插。 常用的空间变换——仿射变换如下： [x,y,1]=[v,w,1]T=[v,w,1]\begin{bmatrix} t_{11} & t_{12} & 0 \\ t_{21} & t_{22} & 0 \\ t_{31} & t_{32} & 1 \end{bmatrix} \label{gtrans}不同的矩阵元T得到不同的效果，旋转、平移、偏移。 仿射变换 变换 仿射矩阵 坐标公式 恒等变换 $\begin{bmatrix} 1 &amp; 0 &amp; 0 \ 0 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 1 \end{bmatrix}$ $x=v \ y=w$ 缩放 $\begin{bmatrix} c_x &amp; 0 &amp; 0 \ 0 &amp; c_y &amp; 0 \ 0 &amp; 0 &amp; 1 \end{bmatrix}$ $x=c_xv \ y=c_yw$ 旋转 $\begin{bmatrix} \cos\theta &amp; \sin\theta &amp; 0 \ -\sin\theta &amp; \cos\theta &amp; 0 \ 0 &amp; 0 &amp; 1 \end{bmatrix}$ $x=v\cos\theta - w\sin\theta \ y=v\sin\theta+w\cos\theta$ 平移 $\begin{bmatrix} 1 &amp; 0 &amp; 0 \ 0 &amp; 1 &amp; 0 \ t_x &amp; t_y &amp; 1 \end{bmatrix}$ $x=v+t_x \ y=w+t_y$ 偏移(垂直) $\begin{bmatrix} 1 &amp; 0 &amp; 0 \ s_v &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 1 \end{bmatrix}$ $x=v+s_vw \ y=w$ 偏移(水平) $\begin{bmatrix} 1 &amp; s_v &amp; 0 \ 0 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 1 \end{bmatrix}$ $x=v \ y=w+s_vv$ 对应如上图。 有两种方法使用上 $\ref{gtrans}$ 式：前向映射；反向映射。前者可能出现多对一的情况，或者没有对应情况。后一种更高效。具体如下： 使用 $(v, w) = T^{-1}(x, y)$ 扫描输出像素位置，得到输入图像对应位置，然后在输入图像中使用插值得到需要的点的像素值。 图像变换向量范数。 线性变换域一般方法： $f(x,y)$ ——&gt; 变换 —$T(u,v)$—&gt; 运算 —$R[T(u,v)]$—&gt; 反变换 ——&gt; $g(x,y)$ 除了傅里叶变换以为，还有：沃尔什变换、哈达玛变换、离散余弦变换、哈尔变换、斜变换。( Walsh, Hadamard, discrete cosine, Haar, and slant transforms)]]></content>
  </entry>
  <entry>
    <title><![CDATA[notes-for-ffmpeg]]></title>
    <url>%2F2019%2F06%2F02%2Fnotes-for-ffmpeg%2F</url>
    <content type="text"><![CDATA[一些ffmpeg处理视频笔记。 裁剪黑边主要使用 ffmpeg 的 crop 以及 cropdetect 参数。 视频左上角为坐标(0,0)，单位为像素。 123456789101112ffmpeg -i input.mp4 -vf "cropdetect=24:16:0" dummy.mp4# 可以得到如下所示信息# [Parsed_cropdetect_0 @ 0x7fab586781c0] x1:36 x2:1883 y1:0 y2:1079 w:1840 h:1072 x:40 y:4 pts:3584 t:0.233333 crop=1840:1072:40:4# Ctrl + C 停止，复制 crop=1840:1072:40:4 用于后面步骤# 注意视频黑边 是否会变化，否则需取舍使用哪些参数。# 也可以使用 ffplay 预览，不用'压制'即可得到 crop 信息。ffplay input.mp4 -vf cropdetect=24:16:0# 后面的参数 24 16 0 为默认值，更多请移步 [官方文档](https://www.ffmpeg.org/ffmpeg-filters.html#cropdetect) 关于 crop，第一个 1840 表示裁剪出来的矩形长1840像素，宽1072像素，从(40,0)坐标处开始裁剪。crop官方文档。 除了使用 ffmpeg 的 cropdetect 参数外，可以截取一张视频图片，使用 GIMP 等图像工具，手动测量得到需要的参数。以 GIMP 为例： 1. 拉出参考线，Ctrl+鼠标滚轮放大，M 移动工具； 2. Shift + M 换到测量工具，Ctrl 拉出水平垂直测量线。 去水印和裁剪黑边类似，使用 delogo 命令，官方文档。 同样需要定位位置，使用上面提到的 GIMP 测量坐标。delogo=x=1742:y=992:w=132:h=40，如其意，x y坐标起点(左上角0、0)，w h宽和高。一次可以定义多个去水印位置，使用 , 分隔，放置在滤镜参数里面。例子如下：123ffmpeg -y -i in.mp4 -vf "delogo=x=1472:y=35:w=408:h=42,delogo=x=1742:y=992:w=132:h=40,crop=1840:1040:40:0" \-metadata comment='made by rachpt' -max_muxing_queue_size 1024 out.mp4 两个水印，加上裁剪黑边。 效果对比如下： 倍速详见：https://github.com/rachpt/shell-scripts/blob/master/speed_up_video.sh 视频1.7 倍速：123ffmpeg -i "$i" -r 30 -c:v libx264 -preset fast \-filter_complex "[0:v]setpts=10/17 *PTS[v];[0:a]atempo=1.7[a]" \-map "[v]" -map "[a]" "../encode/$i" -y 音频如上，[0:a]atempo=1.7[a]。 字幕使用shell来完成，1234567891011121314151617for i in `grep -Eo '([0-9]&#123;2&#125;:)&#123;2&#125;[0-9]&#123;2&#125;,[0-9]&#123;3&#125;' "$file"` ;do a=$&#123;i:0:2&#125;; b=$&#123;i:3:2&#125;; c=$&#123;i:6:2&#125;; d=$&#123;i:9:3&#125;; # 匹配视频 1.7 倍速 total=`echo "scale=0;((($a*60+$b)*60+$c)*1000+$d)/1.7"|bc`; e=$((total % 1000));f=$((total / 1000)); g=$((f % 60)); h=$((f / 60));x=$((h % 60)); y=$((h / 60)) ; j=`printf "%02d:%02d:%02d,%03d\n" $y $x $g $e`; sed -i "s/$i/$j/" "$file";done # 最后封装在一起参数ffmpeg -i in.mp4 -i sub.srt -c:s mov_text -c:v copy -c:a copy out.mp4 音视频提取与合并提取1234# 提取视频ffmpeg -i input.mp4 -c:v copy -an video.mp4# 提取音频ffmpeg -i input.mp4 -c:a copy -vn audio.m4a 其中 v 视频，a 音频。 合并123456789# 视频 音频 (字幕)分别单文件ffmpeg -i input.mp4 -i audio.m4a -i sub.srt -c:v copy -c:a copy -c:s mov_text output.mp4# 视频里面有音轨，需要替换音轨ffmpeg -i input.mp4 -i audio.m4a -c:v copy -c:a copy -map 0:v:0 -map 1:a:0 output.mp4# 追加音轨，再加一个 -map 0:a:0# 封装多字幕ffmpeg -i input.mp4 -i chs.srt -i eng.srt -c copy -map 0:0 -map 0:1 -map 1:0 -map 2:0 \-c:s mov_text -c:s mov_text output.mp4 map 参数第一个表示 输出文件，0 第一个，1 第二个，v/a 和上面提到的一样，表示视频 / 音频，最后面的数字表示输入文件里面的第几个视频 / 音频 轨道。通常一个视频 一个视频轨道一个音频轨道，这个需要自己看 mediainfo。 删除压制信息删除视频文件 mediainfo 里面的 Writing library 和 Encoding settings，添加如下参数12345678# x265-x265-params no-info=1# x264 (ffmpeg 4.0+)-bsf:v 'filter_units=remove_types=6'# 删除 General 里面的附加信息-map_metadata -1 参考文档一，文档二。 停止播放ffplay 使用 -t 时间 可以只播放一小段，但是并不会到时间后退出播放，而是会处于等待状态。添加 -autoexit 参数即可解决该问题。 其他 使用 -ss 0:0:0 -t 1:0:0 后可能会遇到下面的报错， 1Too many packets buffered for output stream 0:1. 只需要多加一个 -max_muxing_queue_size 1024 参数在其中即可解决，详见这里。 隐藏 版本信息编译参数 添加参数 -hide_banner 即可。 libx265 2pass 遇到如下错误，卡住不动123cur_dts is invalid (this is harmless if it occurs once at the start per stream)在不同机器上，不同版本 ffmpeg 使用相同的压制命令却不会遇到这个问题。另外，换用 libx264 不会遇到此问题。 多番查证，可能是原视频某些信息不全所致。最终发现是 使用的 缩放 (-s 1280x720 或者 滤镜 - vf scale=-2:720) 参数导致的，去掉缩放，2pass 不会遇到此问题。 最后曲线救国，先将原文件使用 ffmpeg -c copy 相同容器复制一份，使用新生成的文件成功缩放压制。 缩放警告 1[swscaler @ 0x558c475f32c0] Warning: data is not aligned! This can lead to a speed loss 修改 宽度 为 16 的倍数。参考文档。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh-tunnel]]></title>
    <url>%2F2019%2F05%2F29%2Fssh-tunnel%2F</url>
    <content type="text"><![CDATA[使用 ssh 隧道使用外网访问 NAT 内网服务。 情景描述一台电脑能够 使用 ssh 连接到外部电脑，比如地址是 115.115.115.1，但是反过来不行，因为这台电脑得到的地址是 10 开头的 NAT 内网地址。 现在希望 外面的 115 地址的机器可以 ssh 到这台 10 地址的机器上，并且访问该机器上面的 web 服务(比如qbittorrent的webui)。 单独使用 ssh 方向透穿不稳定，因为 ssh 不活动一段时间过后这条连接就会被中断，然后你在外面的 115 那里是死活也每办法让 10 那里再重新 ssh到 115这里的啦。 于是 autossh 就被用来干这样一件事情，维持一条持续的 ssh 通道。 反向穿透 ssh1autossh -M 5678 -CNR 2333:localhost:22 rachpt@115.115.115.1 -p 22 5678 是autossh的监听端口，2333 就是在外部 115 机器上访问 10 机器的端口号，第一个 22 表示 10 机器的 ssh 在22端口(默认值)，后面的表示 115 机器ssh端口在默认的22。 这样做有个问题，就是需要输入 115 机器的ssh密码，我们可以使用 ssh 的 pub key避免输入密码，就像我们使用github那样。 123456789101112131415#------------------# 在 10 机器上ssh-keygen -t rsa# 生成公钥，自己记得给个名字cat ~/.ssh/你命的名.pub#------------------# 复制到 115 的机器上面# 比如放到 ~/.ssh/authorized_keys 里面# 编辑 /etc/ssh/sshd_config 文件# 添加或则修改AuthorizedKeysFile .ssh/authorized_keys 这样就能实现 10 机器免密码 ssh 到 115 机器。 为了实现开机自动使用 autossh 反向透穿，使用 systemd， 12345678910vim /etc/systemd/system/autossh.service[Unit]Description=auto SSHAfter=network.target[Service]User=rachptExecStart=/usr/bin/autossh -M 5678 -CNR 2333:localhost:22 rachpt@115.156.156.1[Install]WantedBy=multi-user.target 一通 daemon-reload enable start就可以了。 记得kill掉占用端口的进程，不然gg… 反向穿透 web 服务这里以 qbittorrent-nox webui 为例。 1autossh -M 5001 -CNR 10010:localhost:10010 rachpt@115.156.115.1 重要提示：远程端口和服务端口必须一致，我用的10010端口，否则401连不上。 当然 qbittorrent-nox 需要在 10010端口运行 webui(具体请使用 help)。 最后123sudo lsof -t -i:10010# 查看占用端口 10010 的进程]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[substitute-sinaimg-with-githubimg-url]]></title>
    <url>%2F2019%2F04%2F29%2Fsubstitute-sinaimg-with-githubimg-url%2F</url>
    <content type="text"><![CDATA[最好的图床 新浪 已经禁止外链，图片迁移至 github。 前些天，得知 新浪 图片禁止外链，就在想怎么解决图片问题，直接放在 github pages 里面又要改动很多。 恰好最近在使用 vs-code，试了一下 picgo 插件，感觉很棒，smsm图床我是不敢用，404了去找谁。 于是在github建一个 repo 专门存放图片，还能备份到坚果云一份。替换新浪图片链接为 github 链接。 先是在 vs-code 里面手动替换了几个，工作量太大，于是写了个bash脚本完成这件事。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!/bin/bash# Author: rachpt@126.com# Date: 2019-04-29# 批量下载 md 文件中的 新浪图片，重命名为 `文件名-数字` 格式# 替换md文件中的 新浪图片地址# 批量下载图片download_pic() &#123;for i in `ls -1 *.md`; dolists="$(grep -Eio 'https?://ws..sinaimg.[-0-9a-z/]+.jpg' "$i")"if [[ $lists ]]; then total=`echo "$lists"|wc -l`; j=1while [[ $j -le $total ]]; do echo $&#123;i%.md&#125;-$jpicurl=`echo "$lists"|sed -n "$j p"`echo $picurl# 此处使用了 httpie，当然可以使用 crul wget 等工具http -d "$picurl" -o "../pic/$&#123;i%.md&#125;-$j.jpg"((j++))donefidone&#125;# 替换 url 地址。两条完全可以合在一起，为了减少意外错误，这里分开substitute_url() &#123;for i in `ls -1 *.md`; dolists="$(grep -Eio 'https?://ws..sinaimg.[-0-9a-z/]+.jpg' "$i")"if [[ $lists ]]; then total=`echo "$lists"|wc -l`; j=1while [[ $j -le $total ]]; do echo $&#123;i%.md&#125;-$jpicurl=`echo "$lists"|sed -n "$j p"`echo $picurl# 说明：picurl 中包含'/'，因此使用\% 作为自定义正则标识符# s 命令匹配部分 ![] 都需要转义，替换的不用，后一个 s 使用%分割而不是/# 使用 &#123;&#125; 限定替换范围sed -Ei "\%$picurl% &#123; s/\!\[.*\]/![$&#123;i%.md&#125;-$j.jpg]/; s%$picurl%https://raw.githubusercontent.com/rachpt/imgs/master/$&#123;i%.md&#125;-$j.jpg%; &#125;" "$i"((j++))donefidone&#125;# 调用download_picecho '若无问题 30 秒后开始替换'echo 'Ctrl + C 强制取消替换'sleep 30substitute_urlecho 'Done!' 脚本在 https://github.com/rachpt/shell-scripts/blob/master/change-url.sh 。 这里记录一下。]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>sinaimg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notes-for-gnuplot]]></title>
    <url>%2F2019%2F04%2F19%2Fnotes-for-gnuplot%2F</url>
    <content type="text"><![CDATA[gnuplot 画图笔记。 使用希腊字母这个叫 Enhanced 文本模式，首先需要设置terminal enhanced。1set term qt enhanced term 是 terminal 的简写形式，我使用的 qt 模式。比如我想将图例，也就是 key 中插入希腊字母，1plot &apos;real-prop-vecpot.dat&apos; u (-$3):($2) w lp lw 2 title &apos;E(t)/&#123;/Symbol= \145&#125;&apos; 这里指定了 线的title，{/Symbol= \145}，145是8进制数 表示 16进制 65。gnuplot 的 Symbol 表中 65 表示 omega。(图片版权：我) 设置字体大小通常情况gnuplot 字体小的看不见。 123456789# 设置 图例字体大小20set key font &apos;,20&apos;# 可以指定字体set key font &apos;字体名,20&apos;# 详情 help set key# 其他 xlabel xtics tics 一样set tics font &apos;,15&apos; 设置 x(y) 轴间距1234set xtics 0,2,20# x轴 0开始至20，间距2# 要指定显示形式，则需要使用 像列表一样的东西。 图片大小 圆形，也就是 x=y 1set size square 其他… 设置plotplot 加上 with (简写 w) 有 linepoints(简写 lp)，linewidth(lw)，linecolor(lc)，pointtype(pt)，pointsize(ps) 等参数，后面紧跟数子值即可，可是使用 test 查看各种样式对应值。 对数据列操作使用 plot &#39;路径&#39; using 1:2 ... 可以将路径里面 第一列作为 x 第二列作为 y 画图，using简写 u，使用($列号)对列操作，比如这样 u ($1 /2):($2 ** 2)。** 表示 次方。 设置 xy 轴范围如下所示。12set xrange[0:20]set yrange[0:10] GUI 的一些快捷键按住 ctrl 鼠标滚轮， 可以缩放。 r 键，显示鼠标处 十字。xy 值可以在左下角显示。 其他以后写，现在忘记了… 参考文档。 在 gnuplot 中调用 shell 命令使用 system 函数。 123456789# 打印当前路径system(&quot;pwd&quot;)path = system(&quot;pwd&quot;)print path# 当前文件夹名foldername=system(&quot;basename `pwd`&quot;) 参考文档。]]></content>
      <tags>
        <tag>gnuplot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notes-for-flexget]]></title>
    <url>%2F2019%2F04%2F15%2Fnotes-for-flexget%2F</url>
    <content type="text"><![CDATA[之前一直使用最简单的if模块满足不了要求，探索使用新的模块。 if与regexp这两个都可以用来进行简单的逻辑过滤。主要用在title字段，应用在其他字段也是可以的。 12345678910111213if: - &quot;&apos;Complete&apos; in title&quot;: reject - &quot;&apos;NYHD&apos; in title&quot;: reject - &quot;&apos;-RS&apos; in title&quot;: reject - &quot;&apos;Cinderella.Chef&apos; in title&quot;: accept - &quot;&apos;Douro.Mainland&apos; in title&quot;: acceptregexp: accept: - game.*of.*Thrones.*s08e.*-GoT reject: - .*-MT$ - .*-HDC$ - .*-MT$ 例子如上，if 区分大小写，而regexp不区分大小写，使用正则表达式(注意写全.*)。写完记得 flexget daemon reload-config 才会生效，我是用的 daemon 模式运行的。virtualenv 使用/home/rachpt/.flexget/bin/python /home/rachpt/.flexget/bin/flexget daemon reload-config，前面是virtualenv 中的python路径，这个可以用在 systemd 中实现开机自动启动。使用 /home/rachpt/.flexget/bin/python /home/rachpt/.flexget/bin/flexget execute --try-regexp --tasks my_test_task 检测 my_test_task 的regexp 运行匹配情况(记得每次修改config.yml后reload-config)。 daemon官方文档很全，大部分都有讲。 123456789schedules: - tasks: [&apos;hdchina&apos;, &apos;wiki&apos;, &apos;hdsky&apos;, &apos;byr_an&apos;, &apos;ipt_movies&apos;] interval: minutes: 3 - tasks: &apos;ipt_tvs&apos; schedule: day_of_week: mon hour: 8-10 minute: &quot;*/1&quot; schedules是一个Top-Level Keys，有两种定时模式，interval 就是等时间间隔运行，以前的文档中有提到使用 seconds，现在好像不行了，也就是说，最小更新频率 1分钟一次(可能说的不对，使用 seconds，check不过)。tasks作用任务字典(一个就使用字符串，记得引号)。 另一种是和 cron 类似的模式，上面的例子，每周一 8-10点每 1分钟运行一次 task ipt-tvs。同样最小单位分钟。 systemd 设置。123456789101112131415cat /etc/systemd/system/flexget.service# 或则写到 /usr/lib/systemd/system/flexget.service[Unit]Description=Flexget DaemonAfter=network.target[Service]User=rachpt # 此处我没有使用 root 运行Type=simpleWorkingDirectory=/home/rachpt/.flexgetExecStart=/home/rachpt/.flexget/bin/python /home/rachpt/.flexget/bin/flexget daemon startExecStop=/home/rachpt/.flexget/bin/python /home/rachpt/.flexget/bin/flexget daemon stopExecReload=/home/rachpt/.flexget/bin/python /home/rachpt/.flexget/bin/flexget daemon reloadNice=19[Install]WantedBy=multi-user.target systemctl reload-daemon &amp;&amp; systemctl enable flexget &amp;&amp; systemctl start flexget web-ui有两个 web-ui，使用v1就行了，区别就是v2还是半残品。 12345web_server: port: 9999 base_url: / web_ui: yes run_v2: true # 开启v2 webui，关闭注释即可 访问地址不一样，vi: http://127.0.0.1:9999/ ，v2: http://127.0.0.1:9999/v2/ 需要设置密码，不能改用户名(flexget)，具体看官方文档。 https://flexget.com/Web-UI 。效果图。 过滤几个用于的过滤方法。12345size_movie: content_size: min: 512 max: 22480 strict: no 按种子内容大小(体积)，单位MB。范围在 512M 至 22480M 之间的才 accept。 123exists_movie: path: /mnt/data/movies allow_different_qualities: better 如果path下已经有 1080p bluray版本资源，那么 720p bluary 就会被 reject掉。 123quality: - 720p bluray - 1080p webdl 按质量挑选，可以使用范围选择。https://flexget.com/Plugins/quality 。 其他template 中不能使用 过滤规则，比如 if。 可以 自动解压 rar zip 分卷或单个文件，https://flexget.com/Plugins/decompress ，https://flexget.com/Plugins/archives ，还有设置 transmission ratio等。 debug 模式：1flexget -L debug --test execute --tasks my-test-task]]></content>
      <tags>
        <tag>flexget</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jupyter-notebook-cannot-work-with-the-same-base-name]]></title>
    <url>%2F2019%2F04%2F10%2Fjupyter-notebook-cannot-work-with-the-same-base-name%2F</url>
    <content type="text"><![CDATA[.ipynb 死活连接不上kernel，但是单独放到其他目录又可以。 使用 pycharm 以及 vs code编辑python 代码，但是运行时提示我的 matplotlib 有问题，因为我使用了 anaconda，同时有使用过 virtualenv，环境乱七八糟，但是我的 anaconda base环境里面使用我所用到的库的。由于代码也不多，于是想到直接使用jupyter notebook。 于是我创建了一个和刚才的 py 文件同名的 ipynb 文件。当然它们是在同一个文件夹下。下面就是我的遭遇： 我打开其他目录下的 ipynb 文件却是正常的，于是排除我的 jupyter 环境的问题。经过一通复制粘贴重命名后，最终确定是那个 base name 一样的 py 文件导致的。改名问题解决。 这里记录一下，希望有用。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter, python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notes-about-awstats]]></title>
    <url>%2F2019%2F03%2F22%2Fnotes-about-awstats%2F</url>
    <content type="text"><![CDATA[使用awstata分析nginx以及vsftp日志。 安装可以使用相应平台的包管理器安装，也可以直接到官网下载归档文件，解压其中的 wwwroot放到nginx的根目录，或者在nginx config文件设置alias，可以参考 https://wiki.archlinux.org/index.php/awstats 或者tools/nginx/awstats-nginx.conf文件。 另外，需要 perl，这个系统一般都带有。 配置这部分比较复杂，可以使用配套的tools 里面的 awstats_configure.pl 交互式生成配置文件，也可以修改 /etc/awstats/awstats.model.conf，包管理器安装才有的。 我是用的 pacman 安装的，所以直接复制修改该model文件，将model改成自己的任务名，比如web或则ftp啥的。 123456789101112131415161718LogFile=&quot;/var/log/nginx/access.log&quot;LogType=W # 默认 web模式LogFormat=1SiteDomain=&quot;web-server&quot; # 改成你想显示的AllowToUpdateStatsFromBrowser=0 # 是否可以通过网页更新，具体好坏里面有说明DirIcons=&quot;/awstatsicons&quot; # 如果你修改了该路径UseFramesWhenCGI=0 # 是否开启侧边栏，0 不开ShowFlagLinks=&quot;en cn tw de jp&quot; # 显示语言切换按钮Logo=&quot;awstats_logo1.png&quot; # logo 图片LogoLink=&quot;/&quot; # logo 链接 上面是 nginx 日志的，对于 vsftp 只有一点区别，就是需要自己定义 LogFormat，如下： 1234567LogFile=&quot;/var/log/vsftpd.log&quot; # vsftp 需要打开对应的日志开关！！！LogType=F # ftp 模式LogFormat=&quot;%time3 %other %host %bytesd %url %other %other %method %other %logname %other %code %other %other&quot; # 这个需要和你的 vsftp log 文件列匹配。# 其他类似 需要注意文件权限问题，比如 wwwroot里面的 需要chown http(你的 nginx 运行用户)，log文件需要有读权限，否则你需要使用 root 运行下面家要说的生成命令。 生成需要使用 crontab (cronie) 定时运行更新命令。 1234sudo crontab -e # 创建 root 用户的定时任务# 每个 1 小时运行一次7 */1 * * * /usr/share/awstats/tools/awstats_updateall.pl now -awstatsprog=/usr/share/webapps/awstats/awstats/awstats.pl &gt; /home/awstatus.log# 因为配置文件在 etc 里面，所以上面没有指明路径。 因为我是用的是nginx alias 方式，所以 -awstatsprog 路径就是安装默认路径。 其他效果展示: http://mirrors.hust.edu.cn/visitor/ http://rachpt.iok.la/awstats/awstats.pl?config=nginx http://rachpt.iok.la/awstats/awstats.pl?config=vsftp]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>awstats</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[amazing-sed-on-Linux]]></title>
    <url>%2F2019%2F03%2F22%2Famazing-sed-on-Linux%2F</url>
    <content type="text"><![CDATA[记录一些少有用到的sed使用技巧。 正则匹配sed 默认情况使用基本正则表达式(BRE)，也就是有些元字符需要使用转义\，加上 -E或则-r参数后即可变成扩展正则表达a(ERE)式情况。 grep 可以使用 -i 参数忽略大小写，而 sed 的 -i 参数表示直接修改源文件而不是输出到标准输出 stdout，在替换模式下也是可以使用参数忽略大小写的，就是在 表示全部(g)的位置放置i。sed &#39;s/旧的东西/新的东西/ig&#39; filename。g 全部，i大小写不敏感。 sed 可以使用行号，范围或则正则表达式限定和面代码的作用范围，如sed -n &#39;1,3 p&#39; filename 只打印1到3行，如果有多个命令，则使用;分隔，{}裹起来。sed -n &#39;1, /匹配这个/ {s/old/new/;s%ba/ba%la/la%}&#39; filename，对于这个，使用正则表达式限定下界，普通情况我们使用两个/将正则表达式裹起来，可以看到后面替换模式中我们使用%而不是通常的/作为分隔符，这对于字段中包含/的情况会相当友好，不用使用\转义。所以前面正则表达式限定的地方有没有可能使用自定义符号而不是/？匹配网站链接、路径时需要注意，特别使用使用了变量的情况！！！有两种方式解决： 1. 使用`\`对所有匹配内容中的`/`转义， 2. 使用`\`转义你自己的第一个限定符。 sed &#39;/abc\/def/ {do something}&#39; filename，sed &#39;\=abc/def= {do something}&#39; filename。效果如下： 追加多行通常我们使用 a 加上我们需要添加的内容 最佳到指定位置。但是我们找遇到了如下错误： 使用\n来表示换行如何， 这次我们成功了。那么我们只需要将包含多行的一个变量将 不可见的换行辅 替换成字符\n即可追加这个多行变量到指定位置。那么如何将一个包含多行的变量变成一个使用符号\n分隔的单行变量？mult_lines=&quot;$(echo &quot;$mult_lines&quot;|sed &#39;:a;N;s/\n/\\n/;ta;&#39;)&quot;，注意双引号的使用。这里使用a 作为自定义标示符(label)用于跳转，N追加到模式空间，s就是我们熟悉的替换，注意\\n的使用。t仅当最后一个替换命令修改了模式空间时才跳转到标签。如果未指定label，则跳转到脚本的末尾，扩展阅读。还有一个细节需要提一下，就是$()中我们使用\\n，如果是使用` ` ，那么需要使用\\\n，一个应用例子。 其他还没有…]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Trouble-with-automatic-mouse-copy-function-under-linux]]></title>
    <url>%2F2019%2F02%2F22%2FTrouble-with-automatic-mouse-copy-function-under-linux%2F</url>
    <content type="text"><![CDATA[突然选中文本就自动复制到粘贴板了，怎么回事？ 这几天又安装了 goldendict，配合 translate-shell 直接使用 goolgle 翻译文献。不知道怎么回事一时间 Ctrl + C + C 无法使用，各种折腾之后终于能用了。这不是重点，重点是现在突然发现我选中任意地方的文本后，就自动被复制到张贴板了，这对于浏览器操作及其不便。 关闭词典以及其屏幕取词也无效。网上搜索一下，发现 linux 竟然有 选中复制/鼠标中建粘贴，以及 ctrl + c /ctrl + v 两种粘贴板，默认情况下两种粘贴板互相独立。因为我的某种操作让两种内容混在一起了。 粘贴板学问详情可以看 http://forum.ubuntu.org.cn/viewtopic.php?f=48&amp;t=279535 。 具体的误操作在该出 应该关闭同步剪切粘贴板和选中内容。 第一次知道还有选中复制这种功能。]]></content>
      <tags>
        <tag>linux, clipboard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[latex-beamer-note]]></title>
    <url>%2F2019%2F01%2F16%2Flatex-beamer-note%2F</url>
    <content type="text"><![CDATA[记录一些使用 LaTeX beamer 的技巧。 图片显示编号以及不显示编号大部分模板图片都不会编号，只需在导言区加上如下 1\setbeamertemplate&#123;caption&#125;[numbered] 即可显示图片编号。参考文档。 自定义编号，使用caption 宏包。 1\usepackage&#123;caption&#125; 标签使用 \caption*{}。参考文档。]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>beamer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install-matlab-on-archlinux]]></title>
    <url>%2F2018%2F12%2F31%2Finstall-matlab-on-archlinux%2F</url>
    <content type="text"><![CDATA[由于archlinux 并不在matlab 官方支持的系统之列，之前使用不完整的matlab(无法使用实时脚本，帮助页面显示不正常)，一直觉得理所当然，居然是有解决办法的。 linux 上安装 matlab不同于windows，在linux安装iso封装的软件可能需要使用命令(mount)挂载先，然后运行安装程序，后面就是熟悉的点点点了。大体步骤如下： 1234567891011121314151617181920mkdir /tmp/matlabsudo mount -o loop /mnt/data/MATLAB_R2018b_Linux/R2018b_glnxa64_dvd1.iso /tmp/matlab# 新开一个 terminal# 使用普通账户运行！sudo /tmp/matlab/install # 如果安装到自己的家目录，不需要使用 sudo。# 后面会弹出一个安装界面，# 若全部安装，50% 时提示弹出 dvd1 插入 dvd2# 使用 df 查看挂在的所有设备sudo umount -f /dev/loop0 # 如果提示设备忙，可以稍微等几分钟，再试。sudo mount -o loop /mnt/data/MATLAB_R2018b_Linux/R2018b_glnxa64_dvd2.iso /tmp/matlab# 点击安装界面的继续# 最后 umount ，以及 rmdir /tmp/matlab 和windows的安装一样(挂载相同的盘符)，dvd2 的挂载点(路径)应与dvd1 一致。理论上相当于将两dvd解压到一个文件夹(挂载相当于允许你分两次解压)。 matlab 支持的系统如下图： https://ww2.mathworks.cn/support/sysreq.html 并没有 archlinux。archlinux wiki上如是说： https://wiki.archlinux.org/index.php/MATLAB 所以但我安装后遇到 matlab 无法使用试试脚本以及帮助文档不正常时，以为这就是不支持的代价。 我甚至已经使用systemd-nspawn 构建 ubuntu容器运行 matlab，但是容器中的matlab仍然有如上问题。同样的matlab 版本，我在 ubuntu 系的linux上安装所有功能均表现正常。这甚至逼迫我更换系统发行版。 无意中发现通过下面的办法是可以解决archlinux 中matlab 部分功能受限的问题。 解决办法 通过 dvd 安装好matlab 2018b后， 使用yaourt matlab-r2017b (这个时候最高只有2017b)安装依赖。推荐使用 yay，yaourt已经没有继续维护了，现在(2019.7)已经有 matlab-r2018b了。 构建肯定是会失败的，但是依赖会被安装。 也可以自己安装 如下图片中所示的依赖，使用 yaourt 比较省事。 下面是matlab安装依赖前的报错情况。 实时脚本、帮助文档正常图。 最后通过最近频繁更换linux 发行版，得出的结论就是，home 和系统分开，大软件安装到 home下user 外面，比如 matlab comsol crossover pycharm anaconda 等。 .desktop 文件使用绝对路径，添加到 ~/.local/share/applications/ 里面。下面是我的 matlab.desktop。 12345678910[Desktop Entry] Categories=Application;Development;Comment=Scientific computing environmentEncoding=UTF-8Exec=/home/program/MATLAB/R2018b/bin/matlab -desktopIcon=/home/program/MATLAB/R2018b/toolbox/shared/dastudio/resources/MatlabIcon.pngName=MATLAB R2018bStartupNotify=true Terminal=falseType=Application 如果 命令行窗口 出现方块，只需要修改使用的字体以显示中文字符。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[something-difference-from-manjaro-back-to-ubuntu]]></title>
    <url>%2F2018%2F12%2F18%2Fsomething-difference-from-manjaro-back-to-ubuntu%2F</url>
    <content type="text"><![CDATA[qprop无法在软件较新的manjaro上编译运行，matlab实时脚本、帮助文档在arch-linux上有问题，mj更新系统很大概率遇到装不上。这三点因素使我做出再次更换系统的决定。 适合自己的linux发行版到目前为止，我已经完全使用linux系统一年了，所谓完全就是作为主力机器，能不用Windows坚决不用Windows。在这之前自认为对Windows的使用有一些自己的见解，对于配置出适合自己的Windows工作环境非常熟悉。清晰的知道Windows所不能给我提供的功能(或者实现困难)，我尝试过使用 ubuntu 以及ubuntu麒麟(大概14年，那时候原生的ubuntu配置中文比较费劲)，当时啥都不会，没多久就回到Windows10预览版了(那时候Windows8的开始屏可恶心死我了)，后面有试过几次，都没能领会到linux的精髓。 去年的大约这个时候，由于当时有一台闲置的pc用于 web 服务器，刚开始用的 Windows10，由于Windows总是自己坏掉，于是试了 Windows server 2016，稳定运行15天后再次死机，再加上当时我们需要连接超级计算机提交计算任务，于是了解了部分linux的脚本命令等，有理由相信我已经可以驾驭(使用)linux了，于是安装了ubuntu 16.04lts 到那台闲置的机器上。经过各种配置后，相当稳定，连续正常运行 93 天(后来需要升级系统才关机的)，在了解到各种软件的linux情况后，果断将工作电脑安装上 linux。 使用过好几个桌面系统，debian 系的、redhat 系的，最后选择了 linux mint，因为界面很适合从Windows转过来的用户，ubuntu的核心让我能够在网上找到较多的教程。用的相当舒适。直到后来从 18.3 升级到 19，有道词典用不了了(看文献屏幕取词翻译)。 我也试过回到就得 18.3，但是当时因为 python 的几个库的依赖相互冲突解决不了(可能是 3.5太老了，加上用过新的界面就回不去了)，最后我强行升级系统python直接将系统弄死了。 rpm的包看着好不友好，还有个莫名其妙的 iptable，对于我来说往往全全就是阻碍，centos 难用到死的 gnome桌面我打死不会再试，suse 由于当时试的 kde 版本，各种快捷键都不一样，最后被定义为难用。 先在笔记本装了 manjaro 的 cinnamon版本，一直也没啥问题。体验几乎和 mint 一致。最后将 开机 没有任何窗口的mint 18.3 替换成manjaro kde版，毕竟ked试manjaro官方维护的，可能会好一些。 经过短暂而痛苦的学习习惯kde桌面后，配置后喜爱的工作环境，还行。 不知道什么原因，TensorFlow本来一条命令轻轻松松搞定，然而费了吃奶的力气才装上，MATLAB的安装更是气，先后试了 2017a 2018a 2018b，中午乱码，无法创建实时脚本，帮助页面显示有问题。忍着用！还有最近好几次遇到升级时提示 python的xxx已经存在，无法升级系统，长久考虑，以后可能会出大问题。 加上最近导师想要使用 qprop 计算东西，刚开始怎么都编译不了，后面编译好后运行有问题。但是在个导师新装的 ubuntu 上编译后可以运行。 在虚拟机中测试 kubuntu 可以编译运行。于是重装系统至 kubuntu。 matlab刚开始时 实时脚本帮助文档都没问题，但是更换为原来的 home 后，又有问题了。删除 ~/.matlab 后一切正常！ 搜狗乱码貌似不需要 archlinux 的在 .xinputrc 里面加东西，其他参考这里。 使用原home使用 fstab 挂载原来的 home，体验很糟糕，文件管理器中文乱码，全新配置不会。 使用 cp -axv /old/home/xxconf /new/home/dir 还原 .mozilla 等软件数据。 待续…]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux, ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dual-disk-install-dual-system]]></title>
    <url>%2F2018%2F12%2F10%2Fdual-disk-install-dual-system%2F</url>
    <content type="text"><![CDATA[双 11 花了110元买了块 mstata 固态硬盘，完成多年的愿望。这里记录一下双硬盘独立安装 windows 和 Linux 系统。 现在的情况一般网上都是单一硬盘安装双系统的，不管是 legacy 或是 uefi，双系统的引导文件都在一块硬盘里面，所以最多就是通过软件修复一下例外一个系统的引导即可。现在的情况是两块固态硬盘，大小一样 120G，需要将 windows 安装到其中一块，而 Linux 安装到另外一块，并且希望在开机的时候提供一个友好的选择系统的界面。 比较容易实现的是，两块硬盘按照正常步骤分别安装到两硬盘，开机的时候 狂按 F12 (或者其他) 进入 boot manger 选择不同启动硬盘，就能进入不同的系统。但是操作很是不友好。 背景知识win7 不支持 uefi + GPT 模式启动，只能使用传统的 legacy Bios + MBR 模式启动，缺点很明显，硬盘上线2.2T，启动速度也相对慢，多了 Bios 自检过程。更多请看这里，或者这里。 刚开始的时候，我的唯一的硬盘上面安装的是 manjaro Linux，加装硬盘后，我使用常规方法安装了 windows 10，然后我将 windows 盘作为默认启动硬盘，使用 easyBSD 创建 Linux 的引导，失败告终，windows 不能切换 Linux，只能改启动应到盘。 就在要绝望的时候，有人说 Fedora 可以双硬盘安装并解决双系统引导问题。于是开始准别全部重装。 重装系统能用 uefi 的机器我当然不会使用 legacy 啦。 首先安装 windows 到 windows 认为的 disk 0，后来发现这个可有可无。有几点需要注意，修改 windows 安装程序 默认的 efi 100m 的设置，因为我们想把 linux 的 efi 挂载到 windows 的 efi 分区。时候证明，这一步可能不需要(在linux下看到 efi 使用量 35 m)。 系统版本选择界面后，按Shift+F10调出命令提示符， 1234567diskpartlist diskselect disk 0cleanconvert gptcreate partition efi size=800create partition primary size=102400 自定义 efi 分区大小， 其实 500m 可能就够了，保险起见，设了 800m。 具体情况这个参考文档。 第一次尝试安装 Fedora cinnamon 版本，一切照旧，我只是选择了 安装到另外空的硬盘，分区使用自动。装好后，自动将 Linux 盘作为了默认引导硬盘，greb 页面出了 Fedora 外还有 windows 的启动项，一切如愿。当然选择 windows 所在硬盘为默认引导盘 自然无法进入 Linux。 本来就此结束，但是那个引导界面实在是太丑了，还有 Fedora 用不习惯。 于是开始第二次尝试。Linux 版本是 manjaro KDE 版本，windows 还是之前的不变，只是格式化 Fedora 的盘。安装的时候 自己设置分区以及挂载点。windows 的(/dev/sda) efi 分区挂载到 /boot/efi，不格式化， /dev/sdb 上8 G linuxswap，其余全部ext4 挂载点 / 。 装完后 一切和 Fedora 一致，引导界面漂亮了很多，很现代，还能记住上一次使用的引导选项。 在 linux 下可以看到 efi 里面有 windows 的引导文件夹。 有可能在windows下使用 efi 引导修复工具可以将 Linux 引导选项加入到 windows 引导列表里面，这样每个硬盘都能引导双系统(未测试)。 。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[change-to-use-archlinux]]></title>
    <url>%2F2018%2F12%2F01%2Fchange-to-use-archlinux%2F</url>
    <content type="text"><![CDATA[因为python版本的原因，从linuxmint 19 换回mint18.3，最后尝试使用基于archlinux的manjaro。这里记录几个刚开始比较头疼的问题。 KED之前习惯了类windows的cinnamon，也想过直接使用manjaro的cinnamon版本，但是考虑到 mint19 上比较容易出现的xwindow卡死，于是决定尝试使用manjaro官方支持的kde版本，之前体验过一小段时间，当时感觉是初始设置反人类，设置麻烦。经过一两周的使用，现在基本上能把kde配置成方便自己习惯了。 文件双击打开， 桌面显示desktop文件夹内容， 任务栏调成类 windows， 开机自动启用小键盘， 安装 tim，kde connect配合安卓手机太棒了！… Tinyproxy安装好后啥配置对没改，使用 systemctl 启动不了，提示啥 /run/tinyproxy/tinyproxy.pid 无法创建。 解决办法：12345# PidFile: Write the PID of the main tinyproxy thread to this file so it# can be used for signalling purposes.# If not specified, no pidfile will be written.##PidFile "/run/tinyproxy/tinyproxy.pid" 取消 /etc/tinyproxy/tinyproxy.conf 如上的注释行。参考文档。 vsftpdvsftpd 的匿名模式路径一片空白，使用shell的ftp也连接不了。解决办法：123vim /etc/vsftpd.conf# 添加下面一行seccomp_sandbox=NO 参考文档。 例外，vsftpd 不支持使用 ln -s 软连接，使用 mount —band /old /new 可解。12# 在 /etc/fstab 中添加如下行，以便开机自动bind。/mnt/data/pub /srv/ftp/pub none bind 0 0 swapfie使用sudo fallocate -l 20G /swapfile 快速创建大体积swapfile 文件。12345678910111213141516sudo fallocate -l 20G /swapfile# 为了安全sudo chown root:root /swapfilesudo chmod 0600 /swapfilesudo mkswap /swapfile# 开sudo swapon /swapfile# 关sudo swapoff /swapfile# 添加开机自动挂载vim /etc/fstab/swapfile none swap sw 0 0 /etc/fstab 会在启动的时候执行. 若文件有误那么会启动失败！！！]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[an-error-in-mpv-player]]></title>
    <url>%2F2018%2F10%2F28%2Fan-error-in-mpv-player%2F</url>
    <content type="text"><![CDATA[最近 mpv 突然打不开，终端运行提示 libtalloc 版本有问题。 使用终端运行错误提示如下， 12$ mpv mpv: relocation error: /usr/lib/x86_64-linux-gnu/libldb.so.1: symbol talloc_strdup_append_buffer version TALLOC_2.0.2 not defined in file libtalloc.so.2 with link time reference 百度一番，有类似的问题的解决记录。 文档1，文档2. 经比较，应该是 libtalloc 有问题。 解决： 123sudo apt-get install --reinstall libtevent0 libtalloc2# 可能只要最后的 libtalloc2 即可 小记。]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[change-the-resolution-of-the-console]]></title>
    <url>%2F2018%2F09%2F20%2Fchange-the-resolution-of-the-console%2F</url>
    <content type="text"><![CDATA[周末花了一个下午搞定了 Linux 字符界面分辨率与中文环境。 Console一般有图形界面的 Linux 发行版通过 Ctrl + Alt + F[1-6] 进入(切换)到字符界面(控制台 字符哑终端) console.C + A + F7 返回 x-window。 临时切换至字符界面能过在不影响后台计算进程的前提下处理轻量文本任务、查看系统状态等操作。 但是有两个问题，一是分辨率，二是中文支持。 分辨率由于之前图方便，直接使用的 VGA 接口，字符界面分辨率特别难受，后来查看才得知 1080p 的显示器一直使用的 800x600 分辨率模式，各种模糊、显示不清，甚至让我怀疑 linux 版本的问题。Google 百度来来回回一个下午找到一些修改 vga 模式下分辨率的方法。 对于 ubuntu / Linux mint，修改 grub 配置文件 /etc/default/grub。 123# 添加GRUB_GFXMODE=1600x1200x32GRUB_GFXPAYLOAD_LINUX=keep 之前一直坑在这里面，就是自以为 分辨率以及 色深自己根据显示器随便写就是。后面才发现需要在开机选择引导时，按 c 进入 grub 界面，使用 vbeinfo 查看系统支持的分辨率和色深。 写非法的分辨率以及色深会导致 console 进不去。 鉴于 vga 模式下的分辨率没有和显示器匹配的。于是不得不改用 DVI接口，渣渣显卡没有 HDMI 接口，否则就不存在这些问题。 dvi 可以粗略理解为 HDMI 接口的缩水版，dvi 和 HDMI 接口都是数字信号传输的，直接匹配显示器分辨率。 所以最终的解决办法是 使用 DVI/HDMI 接口代替 VGA 接口 中文 使用英文作为系统语言，添加中文支持，这样欢迎等信息都是英文。 安装 sudo apt install zhcon 使用 zhcon --utf8 进入中文环境。 鼠标使用 GPM 实现.安装: 1234567sudo apt install gpmsudo systemctl enable gpm.servicesudo systemctl start gpm.servicesudo systemctl status gpm.service]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>console</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim-set-working-directory-to-the-current-file]]></title>
    <url>%2F2018%2F08%2F22%2Fvim-set-working-directory-to-the-current-file%2F</url>
    <content type="text"><![CDATA[vim自动进入打开文件所在目录,原谅我无耻地 copy。 如果装了插件 NERDTree，使用 :NERDTreeFind 可以扩展到打开文件所在目录。不自动有点麻烦。 百度了一圈，找到的答案是使用 12&quot;在.vimrc 中加入execute &quot;cd&quot; expand(&quot;%:h&quot;) 缺点是如果目录路径中有特殊字符可能报错。比如： 使用 Google 查找关键词 vimrc execute cd expand，找到 vim 官方解决办法。 123456set autochdirautocmd BufEnter * silent! lcd %:p:hautocmd BufEnter * if expand(&quot;%:p:h&quot;) !~ &apos;^/tmp&apos; | silent! lcd %:p:h | endif 第一种，可能和某些插件有冲突，本人测试刚才有特殊字符的文件正常。后面两个兼容性更好，最后一个加了判断，/tmp 中的文件不切换到改路径去。此法最好。 参考文档1，文档2-wiki.]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[service-systemctl-and-daemon]]></title>
    <url>%2F2018%2F07%2F28%2Fservice-systemctl-and-daemon%2F</url>
    <content type="text"><![CDATA[前面说到了使用原码编译 transmission-daemon qbittorrent-nox nginx ，但是需要自己配置启动脚本。 transmission-daemon之前使用 apt 安装的 tr-d ，虽然很容易可以使用 sudo systemctl enable|start|stop|status transmission-daemon，但是不得不忍受一个很长很傻的运行用户名，而且修改起来特别麻烦，文件权限也是乱的很。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778sudo vim /etc/init.d/transmission-daemon# 添加下面的脚本，并给执行权限#!/bin/sh -e### BEGIN INIT INFO# Provides: transmission-daemon# Required-Start: $local_fs $remote_fs $network# Required-Stop: $local_fs $remote_fs $network# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start or stop the transmission-daemon.# Description: Enable service provided by transmission-daemon.### END INIT INFONAME=transmission-daemonDAEMON=/usr/bin/$NAMEUSER=rachptSTOP_TIMEOUT=30export PATH="$&#123;PATH:+$PATH:&#125;/sbin"[ -x $DAEMON ] || exit 0[ -e /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME. /lib/lsb/init-functionsstart_daemon () &#123; if [ $ENABLE_DAEMON != 1 ]; then log_progress_msg "(disabled)" log_end_msg 255 || true else start-stop-daemon --start \ --chuid $USER \ $START_STOP_OPTIONS \ --exec $DAEMON -- $OPTIONS || log_end_msg $? log_end_msg 0 fi&#125;case "$1" in start) log_daemon_msg "Starting bittorrent daemon" "$NAME" start_daemon ;; stop) log_daemon_msg "Stopping bittorrent daemon" "$NAME" start-stop-daemon --stop --quiet \ --exec $DAEMON --retry $STOP_TIMEOUT \ --oknodo || log_end_msg $? log_end_msg 0 ;; reload) log_daemon_msg "Reloading bittorrent daemon" "$NAME" start-stop-daemon --stop --quiet \ --exec $DAEMON \ --oknodo --signal 1 || log_end_msg $? log_end_msg 0 ;; restart|force-reload) log_daemon_msg "Restarting bittorrent daemon" "$NAME" start-stop-daemon --stop --quiet \ --exec $DAEMON --retry $STOP_TIMEOUT \ --oknodo || log_end_msg $? start_daemon ;; status) status_of_proc "$DAEMON" "$NAME" &amp;&amp; exit 0 || exit $? ;; *) log_action_msg "Usage: /etc/init.d/$NAME &#123;start|stop|reload|force-reload|restart|status&#125;" || true exit 2 ;;esacexit 0 文件的开头 ### 部分为LSB tags，格式比较固定，可以参考其他的修改，如果没有会有如下类似报错： 1234ssh.service is not a native service, redirecting to systemd-sysv-installExecuting /lib/systemd/systemd-sysv-install enable sshinsserv: warning: script 'ssh' missing LSB tags and overridesupdate-rc.d: error: ssh Default-Start contains no runlevels, aborting. [参考文档tps://my.oschina.net/apis/blog/1647729?p=1)。 使用命令： 12sudo update-rc.d transmission-daemon defaults 更新 system 脚本。 至此不出意外就可以使用 1sudo service transmission-daemon stop|start|status 开机启动前面的 service 可以一系统服务的方式启动 daemon，而且可以指定运行的用户名，但会不能开机自启动。 123456789101112131415161718cd /etc/systmd/systemvim transmission-daemion.service# 填入[Unit]Description=Transmission BitTorrent DaemonAfter=network.target[Service]User=rachptType=simpleExecStart=/usr/bin/transmission-daemon -f --log-error --logfile /var/log/transmission-daemon.logExecReload=/bin/kill -s HUP $MAINPID[Install]WantedBy=multi-user.target 在这里卡了半天，无法成功，-f 好像很重要，删除后无法运行，无法设置开机运行。 123sudo systemctl daemon-reloadsudo systemctl enable transmission-daemon 12# 查考所有服务sudo systemctl list-unit-files 记得备份所有 transmission-daemon 目录下的 resume 和 torrent 等文件目录。 血的教训。 nginxservice 脚本参考 此文 。 开机启动 1234567891011121314151617181920212223242526272829303132333435# 直接复制官方的vim /etc/systemd/system/nginx.service# Stop dance for nginx# =======================## ExecStop sends SIGSTOP (graceful stop) to the nginx process.# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control# and sends SIGTERM (fast shutdown) to the main process.# After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends# SIGKILL to all the remaining processes in the process group (KillMode=mixed).## nginx signals reference doc:# http://nginx.org/en/docs/control.html#[Unit]Description=A high performance web server and a reverse proxy serverDocumentation=man:nginx(8)After=network.target[Service]Type=forkingPIDFile=/run/nginx.pidExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reloadExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pidTimeoutStopSec=5KillMode=mixed[Install]WantedBy=multi-user.target 注意路径，其他和 transmission-daemon 一样。 qbittorrent12345678910111213141516171819vim /etc/systemd/system/qbittorrent.service# 或者 /lib/systemd/system/qbittorrent.service[Unit]Description=qBittorrent Daemon ServiceAfter=network.target[Service]User=rachptType=forkingRemainAfterExit=yesExecStart=/usr/bin/qbittorrent-nox -dExecStop=/usr/bin/killall -w qbittorrent-noxRestart=on-abortNice=19[Install]WantedBy=multi-user.target 好像不用 init.d 里面运行脚本。 flexget这东西也可以 开机自动已 daemon 运行。 参考文档 在此 copy 过来。 12345678910111213141516171819202122# 新建一个配置文件sudo vim /etc/default/flexget# Configuration for /etc/init.d/flexget# User to run flexget as.# Daemon will not start if left empty.FGUSER="rachpt"# Full path to the flexget config.yml file to use.# Defaults to FGUSER $HOME/.flexget/config.ymlCONFIG="/home/rachpt/.config/flexget/config.yml"# Path to the directory where flexget should log. Do not add trailing slash.# Defaults to the FGUSER $HOME/.flexget directoryLOG="/home/rachpt/.config/flexget"# Log verbosity # Available options : none critical error warning info verbose debug trace# Defaults to infoLEVEL="info" 建运行脚本 /etc/init.d/flexget 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151#!/bin/bash### BEGIN INIT INFO# Provides: flexget# Required-Start: $network $remote_fs# Required-Stop: $network $remote_fs# Should-Start: # Should-Stop: # Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Flexget# Description: FlexGet is a multipurpose automation tool # for content like torrents, nzbs, podcasts,# comics, series, movies, etc.### END INIT INFO# Author: Antoine Joubert, 19/01/2014NAME="flexget"DAEMON="/usr/local/bin/flexget"SETTINGS="/etc/default/$NAME"DESC="Flexget"PIDFILE="/var/run/$NAME.pid"set -e. /lib/lsb/init-functionsunset FGUSER CONFIG LOG LEVEL# Exit if flexget not installedif [ ! -x "$DAEMON" ]; then log_action_msg "$DESC: Could not find flexget executable. Exiting." exit 2fi# Read configuration variablesif [ -r /etc/default/$NAME ]; then . /etc/default/$NAMEelse log_action_msg "$DESC: /etc/default/$NAME not found. Exiting." exit 2fi# Exit if FGUSER has not been set in /etc/default/flexgetif [ -z $FGUSER ]; then log_action_msg "$DESC: FGUSER not set in /etc/default/$NAME. Exiting." exit 2fi# Function to verify if flexget is already runningrun_check() &#123; if [ -e $PIDFILE ]; then status_of_proc -p $PIDFILE $DAEMON $NAME &gt; /dev/null &amp;&amp; RETVAL=0 || RETVAL="$?" else RETVAL="2" fi&#125;end_log() &#123; if [ $RETVAL -eq 0 ]; then log_end_msg 0 return 0 else log_end_msg 1 exit 1 fi&#125;# Function to define config file, log file and log levelconf_check() &#123; if [ -z "$CONFIG" ]; then OPTIONS="$OPTIONS" else OPTIONS="-c $CONFIG" fi if [ -z "$LOG" ]; then OPTIONS="$OPTIONS" else OPTIONS="$OPTIONS -l $LOG/flexget.log" if [ ! -d "$LOG" ]; then mkdir -p -m 750 $LOG chown $FGUSER $LOG fi fi if [ -z $LEVEL ]; then OPTIONS="$OPTIONS" else OPTIONS="$OPTIONS -L $LEVEL" fi&#125;start_flexget() &#123; run_check if [ $RETVAL = 0 ]; then log_action_msg "$DESC: Already running with PID $(cat $PIDFILE). Aborting." exit 2 else conf_check log_daemon_msg "$DESC: Starting the daemon." start-stop-daemon --start --background --quiet --pidfile $PIDFILE --make-pidfile --chuid $FGUSER \ --user $FGUSER --exec $DAEMON -- $OPTIONS daemon start RETVAL=$? end_log fi&#125;stop_flexget() &#123; run_check if [ $RETVAL = 0 ]; then log_daemon_msg "$DESC: Stopping the daemon." start-stop-daemon --stop --quiet --chuid "$FGUSER" --pidfile "$PIDFILE" --retry 30 RETVAL=$? [ -e "$PIDFILE" ] &amp;&amp; rm -f "$PIDFILE" end_log else log_action_msg "$DESC: Not currently running. Aborting." exit 2 fi&#125;status_flexget() &#123; run_check if [ $RETVAL = 0 ]; then log_action_msg "$DESC: Currently running with PID $(cat $PIDFILE)." else log_action_msg "$DESC: Not currently running." fi exit $RETVAL&#125;case "$1" in start) start_flexget ;; stop) stop_flexget ;; restart) stop_flexget &amp;&amp; sleep 2 &amp;&amp; start_flexget ;; status) status_flexget ;; *) echo "Usage: $0 &#123;start|stop|restart|status&#125;"esacexit 0 记得加执行权限。 1sudo update-rc.d flexget defaults 建立 flexget.service 文件。 12345678910111213141516sudo vim /etc/systemd/system/flexget.service [Unit]Description=Flexget DaemonAfter=network.target[Service]User=rachptType=simpleWorkingDirectory=/home/rachpt/.config/flexgetExecStart=/usr/local/bin/flexget daemon startExecStop=/usr/local/bin/flexget daemon stopExecReload=/usr/local/bin/flexget daemon reload[Install]WantedBy=multi-user.target 其他和前面一样，不再重复。 使用 pidtree 可以看到所有进程的父进程。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>daemon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[use-expect-to-ssh-and-solve-a-problem]]></title>
    <url>%2F2018%2F07%2F26%2Fuse-expect-to-ssh-and-solve-a-problem%2F</url>
    <content type="text"><![CDATA[使用 expect 实现一个简单命来使用 ssh 连上远程主机，并解决一个恼火的问题。 正常的远程连接主机的方法是ssh user@ip -p port，根据提示输入密码，很是繁琐。expect 能过实现交互式的脚本命令。 脚本expect 一般需要自己额外安装，ubuntu为例： 1234567891011121314151617sudo apt-get install expect# 创建脚本vim auto_ssh.sh#!/usr/bin/expect -fset timeout 10 # 脚本超时时间spawn ssh rachpt@115.156.156.156expect "rachpt@115.156.156.156's password: "send "mypassword\r" # 密码expect "rachpt@pc:*" # 远程主机名 pcsend "clear\r" # 清屏interact # 退出脚本，控制交给用户 12345vim ~/.bashrc# 添加一个别名alias as='/path/auto_ssh.sh' 之前一直用这个脚本，开始时很是爽，只需 as 一下，就自动连接。 但是我不得不忍受下面的情形： 连上后如果改变 terminal 大小，远程的大小不会随着变。 后来发现不是我一个人遇到这问题。 解决使用下面的脚本代替： 123456789101112131415161718#!/usr/bin/expect -f#trap sigwinch spawnedtrap &#123; set rows [stty rows] set cols [stty columns] stty rows $rows columns $cols &lt; $spawn_out(slave,name)&#125; WINCHset timeout 10spawn ssh rachpt@115.156.156.156expect "rachpt@115.156.156.156's password: "send "mypassword\r"expect "rachpt@pc:*"send "clear\r"interact 原因是没有传输窗口改变信号，加一个 trap在前面即可。 参考文档1，文档2，文档3。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>expect</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[compile-nginx-1.14]]></title>
    <url>%2F2018%2F07%2F25%2Fcompile-nginx-1-14%2F</url>
    <content type="text"><![CDATA[魔改编译安装 nginx。 要做啥如图所示： 希望将 nginx 默认的 错误页面自定义加入一个 返回的超链接。 改源码 下载源码，http://nginx.org/en/download.html选择 Stable version， nginx-1.14.0。 修改源码： 12345678910111213141516171819202122232425262728293031vim nginx-1.14.0/src/http/ngx_http_special_response.c# 大约 109 行开始static char ngx_http_error_401_page[] ="&lt;html&gt;" CRLF"&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;401 Authorization Required&lt;/title&gt;&lt;/head&gt;" CRLF"&lt;body bgcolor=\"white\"&gt;" CRLF"&lt;center&gt;&lt;h1&gt;401 Authorization Required&lt;/h1&gt;&lt;/center&gt;" CRLF"&lt;center&gt;&lt;h2&gt;&lt;a href=\"/index.html\"&gt;返回首页&lt;/a&gt;&lt;/h2&gt;&lt;/center&gt;" CRLF;static char ngx_http_error_402_page[] ="&lt;html&gt;" CRLF"&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;402 Payment Required&lt;/title&gt;&lt;/head&gt;" CRLF"&lt;body bgcolor=\"white\"&gt;" CRLF"&lt;center&gt;&lt;h1&gt;402 Payment Required&lt;/h1&gt;&lt;/center&gt;" CRLF"&lt;center&gt;&lt;h2&gt;&lt;a href=\"/index.html\"&gt;返回首页&lt;/a&gt;&lt;/h2&gt;&lt;/center&gt;" CRLF;static char ngx_http_error_403_page[] ="&lt;html&gt;" CRLF"&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;" CRLF"&lt;body bgcolor=\"white\"&gt;" CRLF"&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;" CRLF"&lt;center&gt;&lt;h2&gt;&lt;a href=\"/index.html\"&gt;返回首页&lt;/a&gt;&lt;/h2&gt;&lt;/center&gt;" CRLF... 按自己需求修改，其中，包含中文不要指定 utf-8 编码。 编译123456789101112131415161718192021222324cd nginx-1.14.0./configure --with-select_module --with-poll_module \--with-threads --with-file-aio --with-http_ssl_module \--with-http_v2_module --with-http_realip_module \--with-http_addition_module --with-http_xslt_module \--with-http_xslt_module --with-http_image_filter_module \--with-http_image_filter_module --with-http_geoip_module \--with-http_geoip_module --with-http_sub_module \--with-http_dav_module --with-http_flv_module \--with-http_mp4_module --with-http_gunzip_module \--with-http_gzip_static_module --with-http_auth_request_module \--with-http_random_index_module --with-http_secure_link_module \--with-http_degradation_module --with-http_slice_module \--with-http_stub_status_module --with-http_perl_module \--with-mail --with-mail_ssl_module --with-stream --with-stream \--with-stream_ssl_module --with-google_perftools_module \--with-cpp_test_module --with-pcre --with-libatomic \--prefix=/usr/local/nginx --sbin-path=/usr/sbin/nginx \--conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lockmake &amp;&amp; sudo make install 各个模块具体用处，请参看以下文章。 参考文档1，参考文档2。 添加 service系统 mint, 对 ubuntu 应该都有效. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263vim /etc/init.d/nginx# 写入脚本#! /bin/sh### BEGIN INIT INFO# Provides: nginx# Required-Start: $remote_fs $syslog# Required-Stop: $remote_fs $syslog# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: starts the nginx web server# Description: starts nginx using start-stop-daemon### END INIT INFO##------------------------------------------------------------------------------# Functions#------------------------------------------------------------------------------. /lib/lsb/init-functions#------------------------------------------------------------------------------# Consts#------------------------------------------------------------------------------PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binDAEMON=/usr/sbin/nginxPS="nginx"PIDNAME="nginx" #lets you do $PS-slavePIDFILE=$PIDNAME.pid #pid filePIDSPATH=/run #pid pathDESCRIPTION="Nginx Server..."RUNAS=root #user to run asSCRIPT_OK=0 #ala error codesSCRIPT_ERROR=1 #ala error codesTRUE=1 #booleanFALSE=0 #booleanlockfile=/var/lock/subsys/nginxNGINX_CONF_FILE="/etc/nginx/nginx.conf"#------------------------------------------------------------------------------# Simple Tests#------------------------------------------------------------------------------#test if nginx is a file and executabletest -x $DAEMON || exit 0# Include nginx defaults if availableif [ -f /etc/default/nginx ] ; then . /etc/default/nginxfi#------------------------------------------------------------------------------# Functions#------------------------------------------------------------------------------setFilePerms()&#123; if [ -f $PIDSPATH/$PIDFILE ]; then chmod 400 $PIDSPATH/$PIDFILE fi&#125;configtest() &#123; $DAEMON -t -c $NGINX_CONF_FILE&#125;getPSCount() &#123; return `pgrep -f $PS | wc -l`&#125;isRunning() &#123; if [ $1 ]; then pidof_daemon $1 PID=$? if [ $PID -gt 0 ]; then return 1 else return 0 fi else pidof_daemon PID=$? if [ $PID -gt 0 ]; then return 1 else return 0 fi fi&#125;#courtesy of php-fpmwait_for_pid () &#123; try=0 while test $try -lt 35 ; do case "$1" in 'created') if [ -f "$2" ] ; then try='' break fi ;; 'removed') if [ ! -f "$2" ] ; then try='' break fi ;; esac try=`expr $try + 1` sleep 1 done&#125;status()&#123; isRunning isAlive=$? if [ "$&#123;isAlive&#125;" -eq $TRUE ]; then echo "$PIDNAME found running with processes: `pidof $PS`" else echo "$PIDNAME is NOT running." fi&#125;removePIDFile()&#123; if [ $1 ]; then if [ -f $1 ]; then rm -f $1 fi else #Do default removal if [ -f $PIDSPATH/$PIDFILE ]; then rm -f $PIDSPATH/$PIDFILE fi fi&#125;start() &#123; log_daemon_msg "Starting $DESCRIPTION" isRunning isAlive=$? if [ "$&#123;isAlive&#125;" -eq $TRUE ]; then log_end_msg $SCRIPT_ERROR else start-stop-daemon --start --quiet --chuid $RUNAS --pidfile $PIDSPATH/$PIDFILE --exec $DAEMON \ -- -c $NGINX_CONF_FILE setFilePerms log_end_msg $SCRIPT_OK fi&#125;stop() &#123; log_daemon_msg "Stopping $DESCRIPTION" isRunning isAlive=$? if [ "$&#123;isAlive&#125;" -eq $TRUE ]; then start-stop-daemon --stop --quiet --pidfile $PIDSPATH/$PIDFILE wait_for_pid 'removed' $PIDSPATH/$PIDFILE if [ -n "$try" ] ; then log_end_msg $SCRIPT_ERROR else removePIDFile log_end_msg $SCRIPT_OK fi else log_end_msg $SCRIPT_ERROR fi&#125;reload() &#123; configtest || return $? log_daemon_msg "Reloading (via HUP) $DESCRIPTION" isRunning if [ $? -eq $TRUE ]; then `killall -HUP $PS` #to be safe log_end_msg $SCRIPT_OK else log_end_msg $SCRIPT_ERROR fi&#125;terminate() &#123; log_daemon_msg "Force terminating (via KILL) $DESCRIPTION" PIDS=`pidof $PS` || true [ -e $PIDSPATH/$PIDFILE ] &amp;&amp; PIDS2=`cat $PIDSPATH/$PIDFILE` for i in $PIDS; do if [ "$i" = "$PIDS2" ]; then kill $i wait_for_pid 'removed' $PIDSPATH/$PIDFILE removePIDFile fi done log_end_msg $SCRIPT_OK&#125;destroy() &#123; log_daemon_msg "Force terminating and may include self (via KILLALL) $DESCRIPTION" killall $PS -q &gt;&gt; /dev/null 2&gt;&amp;1 log_end_msg $SCRIPT_OK&#125;pidof_daemon() &#123; PIDS=`pidof $PS` || true [ -e $PIDSPATH/$PIDFILE ] &amp;&amp; PIDS2=`cat $PIDSPATH/$PIDFILE` for i in $PIDS; do if [ "$i" = "$PIDS2" ]; then return 1 fi done return 0&#125;case "$1" in start) start ;; stop) stop ;; restart|force-reload) stop sleep 3 start ;; reload) $1 ;; status) status ;; configtest) $1 ;; terminate) $1 ;; destroy) $1 ;; *) FULLPATH=/etc/init.d/$PS echo "Usage: $FULLPATH &#123;start|stop|restart|force-reload|status|configtest|terminate|destroy&#125;" echo " The 'destroy' command should only be used as a last resort." exit 1 ;;esacexit 0 记得改权限.上面的 nginx 路径需要改成自己编译时候写的,或者 which nginx. 12345sudo update-rc.d nginx defaultssudo systemctl daemon-reloadsudo systemctl enable nginx 参考文档.]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[run-matlab-in-a-terminal]]></title>
    <url>%2F2018%2F07%2F25%2Frun-matlab-in-a-terminal%2F</url>
    <content type="text"><![CDATA[直接在 termianl 中运行 matlab，输入命令，执行脚本。 matlab 绝对是一个超级强大的 脚本工具，当然不仅仅是。对于使用 linux 日常来说，程序提供 cli，就意味着可以集成并协同工作。在一个 shell 脚本种一个程序(命令)只做一件事，程序的输出作为另一个程序的输入，配合 Linux 的管道机制，一切皆有可能。Keep calm and open a terminal. 安装使用 mount 先挂载 dvd1,图形界面直接双击挂载。一定要在挂载路径之外 使用 sudo install后面按提示弹出 dvd1,挂载 dvd2. 安装路径 建议软件默认位置，选择创建 /usr/local/bin/matlab。 激活hust 买了正版授权，注意一个学号只能授权一台设备一个版本，可以取消已经授权了的设备。 终端运行打开 terminal， matlab -help 可以看到帮助文档。 使用 matlab -nodesktop 在 terminal 中运行 matlab，但是会闪过 matlab 的版权信息UI。 使用 matlab -nojvm 关闭 matlab 的 java 虚拟机，所有与 GUI 相关的都用不了，不会有图形界面。 使用 matlab -nosplash 关闭版权信息页面。 使用 matlab -nodesktop -nosplash -r script/PATH 运行 m 脚本，(不要 .m 后缀)。 使用 alias: 123vim ~/.bashrcalias matlab='matlab -nojvm -nodesktop -nosplash' 退出 使用 quit 或者 exit。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[make-transmission2.94-from-source-code]]></title>
    <url>%2F2018%2F07%2F24%2Fmake-transmission2-94-from-source-code%2F</url>
    <content type="text"><![CDATA[从源代码编译安装 transmission， 以支持跳过校验以及自定义部分 webUI 特性。环境 ubuntu 系。 编译环境1234sudo apt-get install build-essential automake \ autoconf libtool pkg-config intltool \ libcurl4-openssl-dev libglib2.0-dev \ libevent-dev libminiupnpc-dev libgtk-3-dev libappindicator3-dev 官方参考文档 。 魔改 跳过校验 请参考这里。 以及这里。 自定义 webUI 界面。 效果如下图： 在工具栏上添加一个跳转到自定义路径的按钮。 修改1： 123456789vim web/index.html# 第 50 行附近添加 &lt;div id=&quot;toolbar-pause-all&quot; title=&quot;Pause All Torrents&quot;&gt;&lt;/div&gt; + &lt;div id=&quot;toolbar-separator&quot;&gt;&lt;/div&gt; + &lt;a href=&quot;/index.html&quot; title=&quot;返回首页&quot;&gt;&lt;div style=&quot;margin-right: 10px; margin-top: 6px&quot;&gt;&lt;img src=&quot;./images/home.png&quot; /&gt;&lt;/div&gt;&lt;/a&gt; + &lt;div id=&quot;toolbar-separator&quot;&gt;&lt;/div&gt; &lt;div id=&quot;toolbar-inspector&quot; title=&quot;Toggle Inspector&quot;&gt;&lt;/div&gt; 为此需要添加一枚 home.png 图标 到 web/images/home.png. 同时修改 该文件夹 的 Makefile.am 和 Makefile.in，如下： 12345678910vim web/images/Makefile.am# 改成如下datadir = $&#123;datarootdir&#125;/$&#123;PACKAGE_NAME&#125;/$&#123;subdir&#125;dist_data_DATA = \ favicon.ico \ favicon.png \ webclip-icon.png \ home.png 1234567891011vim web/images/Makefile.in# 大约在 365 行附近，如下修改disti\_data\_DATA = \ favicon.ico \ favicon.png \+ webclip-icon.png \+ home.pngall: all-am 自此 自定义的 webUI 就算是好啦。 修改2： 魔改 401 界面，效果如下： 首先使用了命令 cd transmission-2.94 &amp;&amp; find . | xargs grep &#39;&lt;h1&gt;&#39; 查找包含 &lt;h1&gt; 的源代码位置。结果为 ./libtransmission/rpc-server.c: evbuffer_add_printf (body, &quot;&lt;h1&gt;%d: %s&lt;/h1&gt;&quot;, code, code_text); 12345678vim ./libtransmission/rpc-server.c# 大约在 128 行 evbuffer_add_printf (body, "&lt;h1&gt;%d: %s&lt;/h1&gt;", code, code_text); if (text)+ evbuffer_add_printf (body, "%s&lt;br /&gt;&lt;br /&gt;&lt;a href=\"/index.html\"&gt;Click to Homepage&lt;/a&gt;", text); evhttp_send_reply (req, code, code_text, body); 修改如上，在 %s 后面加上了一个 a 标签。 编译123./configure -q &amp;&amp; make -ssudo make install 安装会自动覆盖掉以前的版本。 详见：https://github.com/rachpt/transmission-skiphashcheck-mod-webUI]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>transmission</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[make-qbittorrent-from-source-code]]></title>
    <url>%2F2018%2F07%2F21%2Fmake-qbittorrent-from-source-code%2F</url>
    <content type="text"><![CDATA[从源码编译安装旧版本 qbittorrent，别问我为什么要安装旧版。 以下内容转载至:https://www.cnblogs.com/shuochen/p/8533712.html （仅作为备份）。英文原版:https://github.com/qbittorrent/qBittorrent/wiki/Compiling-qBittorrent-on-Debian-and-Ubuntu 。 一、安装依赖环境①安装一般依赖包123sudo apt-get install libboost-dev libboost-system-dev build-essential \ libboost-chrono-dev libboost-random-dev libssl-dev libgeoip-dev \ git pkg-config automake libtool ②安装Qt5库1sudo apt-get install qtbase5-dev qttools5-dev-tools ③安装python和GeoIP数据库1sudo apt-get install python geoip-database 二、安装Libtorrent①下载Libtorrent包并打开12sudo git clone https://github.com/arvidn/libtorrent.gitcd libtorrent ②选择1.0.*分支编译安装12345git checkout RC_1_0./autotool.sh./configure --disable-debug --enable-encryption --prefix=/usr --with-libgeoip=systemmake clean &amp;&amp; makesudo make install 三、编辑安装qBittorrent①从github下载对应版本的QB安装包QB历史版本下载：https://github.com/qbittorrent/qBittorrent/releases 如编译安装3.3.11版本的QB 123wget https://github.com/qbittorrent/qBittorrent/archive/release-3.3.11.tar.gztar -xzvf release-3.3.11.tar.gzcd qBittorrent-release-3.3.11 ②编译qBittorrent需要GUI则可以取消后面的disable参数。 12./configure --prefix=/usr --disable-guimake &amp;&amp; sudo make install 这里编译的时候如果提示错误 缺少 zlib 运行以下命令即可 1sudo apt-get install zlib1g-dev 四、运行qBittorrent①初始化QB(设置中文)运行以下命令 12qbittorrent-nox # 无 GUIqbittorrent # 有 GUI 运行后会提示输入,输入y，然后回车即可，这时打开第③步中的地址，进入后打开设置，在WEBUI里将语言改成中文，然后Ctrl+C 结束，再次输入命令运行QB，这是刷新网页就是中文了，意思就是设置完需要重启下客户端才能使语言修改生效，其它设置类似。 ②在后台运行qBittorrent因为直接运行QB，退出shell窗口的话就会关闭，所以我们可以用nohup的方式运行QB 1nohup qbittorrent-nox &amp; 这样QB就已经稳定在后台运行了，即使你关闭shell也不会结束的。 ③访问qBittorrent的Web-UI默认地址: http://IP地址:8080默认用户名: admin默认密码: adminadmin 其他魔改效果如下: 在 web UI 上添加一个返回的超链接 “首页”. 123456789101112vim qBittorrent-release-3.3.9/src/webui/www/private/index.html# 搜索 help-about ,大约在 79 行 &lt;li&gt;&lt;a id="aboutLink"&gt;&lt;img class="MyMenuIcon" src="theme/help-about" alt="QBT_TR(&amp;About)QBT_TR" width="16" height="16" onload="fixPNG(this)"/&gt;QBT_TR(&amp;About)QBT_TR&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; + &lt;li&gt; + &lt;a href="/index.html"&gt;首页&lt;/a&gt; + &lt;/li&gt; &lt;/ul&gt; 如上 添加 li 和一个 a 标签即可. 登录界面 1加一个 返回按钮,同时添加一行移动端适配代码. 1234567891011121314vim qBittorrent-release-3.3.9/src/webui/www/private/login.html# 添加 移动端适配代码,# 在 head 中添加 &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;+ &lt;meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=8" /&gt;# 修改末尾 submit 按钮 &lt;div class="row"&gt;&lt;label for="password"&gt;QBT_TR(Password)QBT_TR&lt;/label&gt;&lt;br /&gt;&lt;input type="password" id="password" name="password" /&gt;&lt;/div&gt;+ &lt;div class="row"&gt;&lt;input type="submit" id="login" value="QBT_TR(Login)QBT_TR" /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input type="submit" value="返回首页" onclick="javascript:location.href='/index.html'" /&gt;&lt;/div&gt; &lt;/form&gt; 编译推荐使用 —disable-gui 不要 GUI, 使用 daemon 运行. 123456789101112131415sudo vim /etc/systemd/system/qbittorrent.service# 写入一下内容[Unit]Description=qBittorrent Daemon ServiceAfter=network.target[Service]User=rachptExecStart=/usr/bin/qbittorrent-noxExecStop=/usr/bin/killall -w qbittorrent-nox[Install]WantedBy=multi-user.target 123456789# 重载 daemonsudo systemctl daemon-reload# 启动sudo systemctl start qbittorrent# 状态sudo systemctl status qbittorrent# 运行开机自启动sudo systemctl enable qbittorrent 参考文档.]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[compile-vim-with-clipboard-supported]]></title>
    <url>%2F2018%2F07%2F20%2Fcompile-vim-with-clipboard-supported%2F</url>
    <content type="text"><![CDATA[从源码编译 vim，以支持使用系统粘贴板。 why&quot; + Y &quot; + P 这两组组合键可以实现 vim 与系统粘贴板之间的共享数据。重要性可想而知，至少有时还是需要和外部交换粘贴板的。 如果不自己编译源码，唯一的办法就是额外安装GUI版本的 vim。很蠢，不是吗? 编译 下载源代码,https://github.com/vim/vim 使用 git git clone https://github.com/vim/vim.git 安装依赖sudo apt-get install xorg-dev # 参考文档sudo apt-get install libncurses5-dev # 参考文档 编译cd vim./configure --with-features=huge # 参考文档cd src/make &amp;&amp; sudo make install 验证vim --version | grep &quot;clipboard&quot;看到 +clipboard 即是成功了。 其他安装 YouCompleteMe 直接参考官方文档，先安装依赖。http://valloric.github.io/YouCompleteMe/#ubuntu-linux-x64 如果出现下面错误(一定会)：YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1 or 3.4 )需要在编译 vim 时加入支持 python 的参数。--enable-pythoninterp=yes --enable-python3interp=yes # 前面的时 python2 的后面是3的。参考文档1 ，参考文档2。使用 checkinstall 构建 deb 包。123sudo apt install checkinstallcd ~/vimsudo checkinstall 参考文档。 图标创建图标添加到右键列表。123456789101112131415vim ~/.local/share/applications/vim.desktop [Desktop Entry]Encoding=UTF-8Name=Vim Text Editor (Console)Comment=Edit text files in a console using VimExec=vim %uTerminal=trueType=ApplicationIcon=/usr/share/pixmaps/vim.png # 此处设置图标路径 # 可以下载这个 http://pixelwhip.github.io/svg-flavors/img/logos/vim.pngCategories=Application;Utility;TextEditor;StartupNotify=trueMimeType=text/plain;NoDisplay=true 参考文档.Set vim as your default editor with update-alternatives.1234sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim 1sudo update-alternatives --set editor /usr/local/bin/vimsudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim 1sudo update-alternatives --set vi /usr/local/bin/vim 总结vim 编译主要命令： ./configure --with-features=hug --enable-pythoninterp=yes --enable-python3interp=yes --enable-rubyinterp --enable-luainterp --enable-perlinterp --enable-multibyte=true --enable-cscope=true --prefix=/usr,--enable-gui=no GUI相关 --enable-gui=gtk2; cd src; make &amp;&amp; sudo make install. 最后关于卸载以及 清理，(在源代码路径下)使用 make clean 清理之间编译完成的；使用 sudo make uninstall 卸载使用 make 安装的软件。实在不行，先 whereis vim，使用 rm -rf 删掉文件即可。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb-linux-and-mi8]]></title>
    <url>%2F2018%2F07%2F06%2Fadb-linux-and-mi8%2F</url>
    <content type="text"><![CDATA[记录几个在 Linux 上通过 adb 工具控制 MI8 的操作。以及无电脑卡刷 TWRP。 ADB安装命令（ubuntu系列）： 123456sudo add-apt-repository ppa:nilarimogard/webupd8sudo apt-get update# 直接试下面的，不行在加 ppasudo apt-get install android-tools-adbadb --version # 检查是否安装 fastboot12# 安装sudo apt-get install android-tools-fastboot fastboot 授权： https://developer.android.com/studio/run/device 授权12345678910# 打开usb 调试，连上 linux，列出所有 usb 设备。lsusbrachpt@pc ~ $ lsusbBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 001 Device 004: ID 0b95:1790 ASIX Electronics Corp. AX88179 Gigabit EthernetBus 001 Device 002: ID 2109:2812 VIA Labs, Inc. VL812 HubBus 001 Device 071: ID 046d:c534 Logitech, Inc. Unifying ReceiverBus 001 Device 088: ID 2717:ff48 Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub 可以通过对比连接前后变化得知哪个是手机的 ID 和idProduct 。 Bus 001 Device 088: ID 2717:ff48 这条即是。新手机有可能带有 Google 字样。 其中ID号：2717，idProduct号：ff48。 参考网上教程，需要建两个文件用于授权。 第一个文件： 1234567891011# 先切换目录cd /etc/udev/rules.d/ &amp;&amp; ls# 新建一个叫 imx-android.rules 的文件。# 也有说是叫 51-android.rules，等等sudo vim imx-android.rules# 填入一下内容SUBSYSTEM=="usb", ATTRS&#123;idVendor&#125;=="填ID号", ATTRS&#123;idProduct&#125;=="填idProduct号",MODE="0777"# 后面的 0777 是因为我需要可执行权限。# 最后加可执行权限sudo chmod +x imx-android.rules 第二个文件： 1234mkdir ~/.androidvim ~/.android/adb_usb.ini# 添加ID号，16进制，0x+ID号0x2717 重启adb。 123adb kill-server# 可能需要 重新插拔一下 usb 线。adb start-server 黑域开启黑域服务： 1adb -d shell sh /data/data/me.piebridge.brevent/brevent.sh MIUI 广告通过 adb 冻结 msa： 12345678adb shell pm disable-user --user 0 com.miui.systemAdSolution # 国内版adb shell pm disable-user --user 0 com.miui.msa.global # 国际版# disable 换成 enable 可解除冻结，当然也可以直接在手机上解除。# 其他命令参考adb shell pm 其他常见广告关闭方法 。 刷 TWRP由于没有使用 windows，手边没有数据线，已经解锁的米8如何刷第三方 rec TWRP呢？ 刷开发版，使用自带的 root，授权 本地终端，替换 recovery，然后卡刷 zip，搞定。 下载 原贴链接. 下载地址：链接: https://pan.baidu.com/s/1cD_ya9pwDIFqrBuglHhNnw 密码: qc1s 这里记录一下。 需要一个终端模拟器。有个比较老的 超级终端，网上有汉化版，但是不能使用 方向键，各种不爽。 推荐使用 juicessh，免费版就够用了，这个可以使用本地终端模拟，记得给 root 权限，首次使用输入 su 获取。 12345678910111213141516171819sucd /dev/block/platform/soc/ls# 找一下类似的文件夹，可能不是下面这个。cd 1d84000.ufshc/by-namels# 可以看到 recovery这个链接文件。# 自己下载第三方 rec 的 img 文件到sd卡根目录dd if=/sdcard/recovery.img of=recovery# 成功后，使用 reboot 重启reboot recovery 卡刷 zip由于上面改的只是临时rec文件，以后重启失效，需要从上面进入的 rec 卡刷 zip 包。重点就是 那个 dd 命令。 参考文档1，文档2。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mi8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zip-and-upload-to-baidupcs]]></title>
    <url>%2F2018%2F07%2F02%2Fzip-and-upload-to-baidupcs%2F</url>
    <content type="text"><![CDATA[文件批量使用 zip 打包并上传 百度网盘备份。 脚本12345678910111213141516171819202122232425262728293031#!/bin/bash# author: rachpt@126.com# version: 2.0#------settings--------## 密码password='password@baidu.com'# 标识pass="locked"# 百度网盘路径uplaodPath="/zip/path/"# 获取但前脚本的绝对路径ROOT_PATH="$(dirname "$(readlink -f "$0")")"#--------zip and upload-----------## 压缩与上传文件列表，不递归子目录zip_file_list=$(find "$ROOT_PATH" -maxdepth 1 -iname "*my.file")# 设置 IFS，防止路径中有空格IFS_OLD=$IFSIFS=$'\n'# 循环for filename in $zip_file_listdo zipPath=$&#123;filename%.*&#125;_$&#123;pass&#125;.zip # zip 路径 zip -rjqP "$password" "$zipPath" "$filename" # 压缩 [ ! -d "$&#123;filename%/*&#125;/done" ] &amp;&amp; mkdir "$&#123;filename%/*&#125;/done" # 移动路径 mv "$filename" "$&#123;filename%/*&#125;/done/$&#123;filename##*/&#125;" # 移动doneIFS=$IFS_OLD# 上传百度网盘/opt/baidupcs/baidupcs upload "*_$&#123;pass&#125;.zip" "$uplaodPath" 解析zip -rjqP ，r 递归所有子文件，j 不保留文件目录结构， q 安静模式， P 设置密码，其后跟密码。 find &quot;$ROOT_PATH&quot; -maxdepth 1 -iname &quot;*my.file&quot;， -maxdepth 1 最大递归深度1，参数放置位置紧跟在 find 路径后。 /opt/baidupcs/baidupcs 为 BaiduPCS-Go 客户端。具体可以看其说明文档。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[a-simple-script-to-count-ABC]]></title>
    <url>%2F2018%2F06%2F21%2Fa-simple-script-to-count-ABC%2F</url>
    <content type="text"><![CDATA[一份规整的 excel 表格，需要统计每一行所有 ABC 的个数,求和放到最后一行。 我是不会手工数的，当然是写个小程序或者说是脚本更准确。 代码如下：可以先 wc -l 看一下 csv 文件行数。 12345678#!/bin/bashfor n in &#123;1..72&#125;do count=`cat data.csv|sed -n "$&#123;n&#125; p"|egrep -o 'A|B|C'|wc -l` sed -i "$n s/$/,$count/" data.csv count=0done 当然开始前（与windows有文件交换）使用 dos2unix 转换一下，结束后 unix2dos 换回来。 这里记录一下。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install-CAJViewer-on-Linux]]></title>
    <url>%2F2018%2F06%2F05%2Finstall-CAJViewer-on-Linux%2F</url>
    <content type="text"><![CDATA[在安装 Linux 上安装 CAJViewer 阅读 caj 文件。使用 crossover 容器安装。 crossovercrossover 运行在 linux 和 mac 上的用以安装 windows 软件的一个兼容层，商业软件，可以试用几天。为何不用免费开源的 wine？因为目前使用 wine 安装的 Tim 有致命 bug，及其容易卡死软件，而使用 crossover 安装的 Tim 几乎完美（有几个小 bug，传文件OK），安装 crossover 可以参考： 可以在此下载 https://www.newasp.net/soft/423534.html 。 永久试用教程 。 补丁： https://pan.baidu.com/s/1eSgLS6u ，或者 https://pan.baidu.com/s/1kVTeir1 密码：bov7 。 如果使用的是 英文界面，可能会有较为严重的中文支持问题。这里打包了 win10 中文默认字体。 蓝奏云 https://www.lanzous.com/i15vvsb ，注意使用的 xz 压缩， 改成7z后缀方便上传用。 如下图所示，在软件容器中放入字体文件就能解决中文乱码问题。 CAJViewer 直接去 CNKI 下载 CAJViewer 7.2 ，也可以直接在 crossover 里面下载，也是 7.2 版。 直接 使用 软件建议的 xp 兼容层安装。 至此，可能觉得已经万事大吉，不然，当运行软件时，会提示： MSXML not regester ，然后软件闪退。 原因可能是没有必要的运行库。 对于 xp 兼容层，安装 运行库 2010，如下图示。注意 安装到 CAJViewer 的容器里面。 最后提示，别忘了复制中文字体到 CAJViewer 容器字体文件夹。 CAJViewer 运行图。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>CAJViewer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[upgrade-ubuntu-stepped-pit]]></title>
    <url>%2F2018%2F05%2F07%2Fupgrade-ubuntu-stepped-pit%2F</url>
    <content type="text"><![CDATA[日常干活用的 mint，特殊情况换到 ubuntu 上干活，一直很烦 窗口关闭按钮一会儿在左边一会儿在右边，考虑到娱乐用的 windows 也在右边，所以看到 ubuntu 18.04 lts 的关闭按钮在右侧，于是有了将 16.04 lts （unity 好像没法设置按钮）升级的想法。 换更新源之前一直用的 清华的源，毕竟同一个局域网速度快。前几天，大概 5月4日，一直检测不到新版本，于是换了个 阿里云 的，一下检测到新的版本，载了一个多小时， 1sudo do-release-upgrade -d 参考内容。 期间不能跑，需要选择配置。因为不想继续使用 unity ，所示选择安装 GNOME 3。 重启后，以前的 ctrl + alt + f7 变成了 ctrl + alt + f1 。 差点吓傻了我，屏幕被放得很大，找了下，发现是 无障碍模式某个都系被打开了，这可能是之前开了大小写指示器的原因所致。 python3.6python3.5 被升级至 3.6 版本。为什么我关心python版本，应为之前安装 flexget ，官方说是不支援 py3.6，因为2.7还在，所以先 用 pip2 重新安装了 flexget 。正在愁以后是不是要装个虚拟环境 装 3.5，某天再看 flexget 的主页，居然支持 3.6了，balabala…… 问题就是 pip 还是 pip3.5 ，而非 3.6 ， 没办法了，一个一个改，使用 find 搜了一下所有 python3.5 的残留相关文件，cd 过去 cat 看看能不能删。最主要的就是 pip3.5 这个也得干掉（sudo apt remove pip3.5），将python 的脚本文件夹/usr/local/lib/python3.5/dist-packages/ 改到3.6，我可不想再一个一个 pip 重装。 12345678910111213141516171819sudo apt remove pip3.5sudo rm /usr/share/app-install/desktop/python3.5:python3.5.desktopsudo rm -f/usr/share/app-install/desktop/idle-python3.5:idle-python3.5.desktopsudo rm -f /usr/share/app-install/desktop/idle-python3.5:idle-python3.5.desktopsudo rm -r python3.5sudo rm /var/lib/dpkg/info/python3.5-minimal.listsudo rm /var/lib/dpkg/info/libpython3.5-minimal:amd64.listsudo rm -r /usr/local/lib/python3.6 #先看下里面的东西sudo mv /usr/local/lib/python3.5 /usr/local/lib/python3.6sudo rm /var/lib/dpkg/info/libpython3.5-minimal:amd64.postrmsudo rm /var/lib/dpkg/info/python3.5-minimal.postrm#/home/[username]/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/JediHTTP/vendor/parso/test/normalizer_issue_files/# 上面这个不要 removesudo apt install python3-pipsudo pip3 install --upgrade pip 附上 修改 pip 源。 123456$ cat ~/.pip/pip.conf [global]index-url = https://pypi.tuna.tsinghua.edu.cn/simpleextra-index-url= https://pypi.doubanio.com/simple[install]trusted-host=mirrors.aliyun.com 需要自己创建该文件。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[extra-shell-notes]]></title>
    <url>%2F2018%2F05%2F07%2Fextra-shell-notes%2F</url>
    <content type="text"><![CDATA[自学收集的一些有用的 shell 奇淫妙技。 unset12unset 变量名unset .f 函数名 .f 前后有空格。用于删除定义了的变量与函数。 包含文件123. filePathsource filePath . 后面有一空格。 注释shell 没有块注释，可以使用一对花括号将需要注释的内容包起来，定义成一个函数，但是后面不使用改函数，从而曲线救国。 字符串获取字符串长度 12string="abcd"echo $&#123;#string&#125; #输出 4 提取子字符串 12string="alibaba is a great company"echo $&#123;string:1:4&#125; #输出liba 查找子字符串 12string="alibaba is a great company"echo `expr index "$string" is` # 查找 is 在变量中的位置 数组之前一直不会用，get 到技能，这里记录一下。 1234567891011121314151617181920212223#!/bin/bash NAME[0]="Zara"NAME[1]="Qadir"NAME[2]="Mahnaz"NAME[3]="Ayan"NAME[4]="Daisy"echo "First Index: $&#123;NAME[0]&#125;"echo "Second Index: $&#123;NAME[*]&#125;" # * 与 @ 效果一样，显示全部# 打印for i in $&#123;NAME[@]&#125;do echo $&#123;NAME[$i]&#125;done# 批量修改for i in $&#123;NAME[@]&#125;do NAME[$i]=`expr $i + 5 `echo $&#123;NAME[$i]&#125;done 其他赋值方式 123array=(var1 var2)array=([0]=var1 [1]=var2)array[0]=var1 计算数组元素个数 123$&#123;#array[@]&#125;# 或者$&#123;#array[*]&#125; 遍历 1234567for var in $&#123;array[@]&#125;; do echo $vardonefor ((i = 0; i &lt; $&#123;#array[@]&#125;; i++)); do echo $&#123;array[$i]&#125;done 参考内容1, 内容2. 无限循环12345678910while :do somescripts;done# 或者while truedo somescripts;done 取最后一行获取最后一行数据。 法一， 1echo $varibles | tail -1 法二， 1echo $varibles | awk 'END&#123;print&#125;' 法三， 1echo $varibles | sed -n '$p' 其他， 1234sed '$!N;$!D'# 获取最后两行# 一样的效果awk '&#123;b=a"\n"$0;a=$0&#125;END&#123;print b&#125;' 参考资料 。 不让别名生效在 .bashrc 或者 .profile 里面定义 alias 可以简化命令输入，但有时想用非别名命令，可以在前面加一个 \\ ，如下 1\grep something filename ps 命令ps 命令的参数有： 参数 作用 -a 显示所有进程（包括其他用户的） -u 用户以及其他信息 -x 显示没有控制终端的进程 特别地，ps aux 这种短格式不加减号（-）也是合法的。 123pidof sshd # 显示程序 PIDkill 3459 # 停止PID对应程序killall httpd # 终止程序所有进程 有用的小命令12345678910111213141516171819202122232425262728last # 系统登录记录history # 执行命令历史# 几个全称su：Swith user # 切换用户，切换到root用户cat：Concatenate # 串联uname：Unix name # 系统名称df：Disk free # 空余硬盘du：Disk usage # 硬盘使用率tar：Tape archive # 解压文件pwd：print working Directory # 打印工作目录grep：global regular expression printsudo：Superuser dochown：Change owner # 改变所有者chgrp：Change group # 改变用户组chmod：Change mode # 改变模式# 路径全称/bin = BINaries /dev = DEVices /etc = Editable Text Configuration # 配置文件/opt = Optional application software packages/lib = LIBrary /tmp = TeMPorary /usr = Unix Shared Resources /var = VARiable # 储存各种变化/proc = PROCesses /sbin = Superuser BINaries 12345678more filename # 一页一页看head -n 20 filename # 看头，默认 10行head - 20 filename # 简洁的写法tail ... # 和head类似，显示 尾部tr [原始字符] [目标字符] # 替换，例子如下cat filename | tr [a-z] [A-Z] # 全部大写wc -lwc # 统计字等stat filename # 文件详情 123# cut 按 列 提取文本tail -20 ～/.bash_history |cut -d' ' -f2# -d 设置分割， -法显示列 123# diff 比较文件差异diff -c fileA.sh fileB.sh# -c 详情， --brief 给出判断结果 touch 修改已经存在文件的信息。 参数 作用 -a 修改“读取时间”（atime） -m 修改“修改时间”（mtime） -d 上面两者同时修改 1touch -d '2018-05-15 01:22:23' filemname 历史命令！数字 用于重复执行某次命令。history 查看历史命令。mkdir -p /a/b/c 递归迭代创建文件夹。 sed 多个匹配： 123sed '1,3s/my/your/g; 3,$s/This/That/g' my.txt# 等价于sed -e '1,3s/my/your/g' -e '3,$s/This/That/g' my.txt 使用&amp;来当做被匹配的变量 1sed 's/my/[&amp;]/g' my.txt 圆括号 使用圆括号匹配的示例：（圆括号括起来的正则表达式所匹配的字符串会可以当成变量来使用，sed中使用的是\1,\2…） 12345$ sed 's/This is my \([^,&amp;]*\),.*is \(.*\)/\1:\2/g' my.txtcat:bettydog:frankfish:georgegoat:adam 上面这个例子中的正则表达式有点复杂，解开如下（去掉转义字符）： 正则为：This is my (\[^,&amp;]\*),.\*is (.*)匹配为：This is my (cat),……….is (betty) 然后：\1就是cat，\2就是betty. 参考内容。或者这里。 变量123456789101112# 变量 意义$0 脚本文件名$1/$2 第N(&gt;1)个参数$# 参数个数$@ 所有参数(数组)$* 所有参数(字符串)$- 当前脚本执行时的附加参数，比如`-x`$_ 最近的参数（或者当前脚本执行的目录）$IFS 输入字段分隔符，一般是空格$! 最近的后台执行的命令$$ 当前脚本的 pid$? 脚本执行后的返回值 当脚本内需要向另一个脚本或函数传递所有参数时:应使用&quot;$@&quot;而不是$*或者&quot;$*&quot;。&quot;$@&quot;会把所有参数都按原样传递过去，而$*遇到有空格的参数会分割成多个，&quot;$*&quot;则是把所有参数变成一个参数（字符串）传进去。 vim 编辑后无权限在底栏模式下::w !sudo tee %然后按提示输入密码 确认:[O]K, (L)oad File: 输入 L 会重新载入,丢失所有操作记录,推荐直接使用 O.解析: 此命令是把当前文件(即%)作为stdin传给sudo tee命令来执行. 不用 tee 的实现方式:1234:w !sudo sh -c "cat &gt; %"# 当然可以在 vimrc 里面加入下一个映射.cmap w!! w !sudo sh -c "cat &gt; %" :r !pwd 或 :r !ls 将执行结果复制到 vim 中. vim 替换中，%的意义是代表整个文件，而执行外部命令时则是文件名. 可以详见 此处. 查看归档或压缩文件内容无需解压，查看 归档文件包含的内容。 vim命令模式下直接使用 vim 可以查看归档文件内容。 tar -tf 文件路径此法在 man tar 有说。 rar unrar zip unzip 1234567rar v 文件.rar# 字幕 Lunrar l 文件.rarzip -sf 文件.zipunzip -l 文件.zip 其他 zipinfo zcat zless以及 less。 bash 转换小写 123456var='ExampleAAA'var="$&#123;var,,&#125;"# var : exampleaaa# 只小写第一个var="$&#123;var,&#125;" bash 4+ 转换大写 123456var='ExampleAAA'var="$&#123;varR^^&#125;"# var : EXAMPLEAAA# 只大写第一个var="$&#123;var^&#125;" bash 4+ 大小写转换 123456var='ExampleAAA'var="$&#123;var~~&#125;"# var : eXAMPLEaaa# 只改变第一个大小写var="$&#123;var~&#125;" bash 4+ 作为对比：常用的还有 ${var#[regex]} 从前向后删第一个匹配的 [regex]，${var##[regex]} 从前向后删所有匹配的 [regex]；# 换成% 表示掉头，从后向前。 冒号(:)作用，以及_通常情况使用 冒号 占位，和Python中的pass作用类似，除此之外还有替代临时变量作用 12345var=' test text ': "$&#123;1#"$&#123;var%%[![:space:]]*&#125;"&#125;": "$&#123;_%"$&#123;_##*[![:space:]]&#125;"&#125;"var="$_"# var='test text' 可以看到临时变量存到_中。 字符串长度，使用 1$&#123;#var&#125; 其中var为变量。hexo踩过的坑 读取文件到变量，而不用cat 12file_data="$(&lt; "file/path")"# 比使用 cat 速度更快！ 使用变量访问变量 12345678cookie_tt='vbdbv45367'site='tt'# 法一echo "$(eval echo '$'"cookie_$site")"# 法二: cookie_$siteecho $&#123;!_&#125; 使用变量命名另外一个变量 1234var="world"declare "hello_$var=value"printf '%s\n' "$hello_world"# value 取变量第一行 12345var='111222333'"$&#123;var/$'\n'*/&#125;"# var = 111 大括号范围 1234567891011121314151617# 普通范围echo &#123;1..10&#125;# 小数echo 1.&#123;1..6&#125;# 嵌套echo &#123;a..z&#125;&#123;1..10&#125; # 260个# 零填充echo &#123;01..100&#125; # 001 002 ...# 改变步长echo &#123;1..10..2&#125; # 1 3 5 7 9 # 字符串列表rm -rf ~/Downloads/&#123;Movies,Music,ISOS&#125; bash 的扩展匹配模式开启方法 shopt -s extglob，关闭shopt -u extglob。-s means set，-u means unset。shoptshopt 即是 Shell Option，extglob即是Extended Globbing。 1234# 例子var='123.720p.456'echo "$&#123;var/+(720p|1080p)&#125;"# var 123..456 其他还有?(pattern-list) 匹配一个或者零个模式*(pattern-list) 匹配多个或者零个模式+(pattern-list) 匹配一个或者多个模式@(pattern-list) 匹配一个模式!(pattern-list) 匹配除了模式的其他模式 除了路径匹配，放在测试里面也可以，此外，可以嵌套，不能使用{}。参考文档-http://mywiki.wooledge.org参考文档-linuxjournal参考文档-gnu 待续…… ASCII值转换为字符使用 awk1awk &apos;BEGIN&#123;printf(&quot;%c&quot;,91)&#125;&apos; 使用 printf12printf \\x`printf &quot;%x&quot; 91`# 先转 16 进制，再\x5b 转成 ASCII 字符。 字符转ascii值123printf &quot;%d&quot; \&apos;A# 或者printf &quot;%d&quot; &quot;&apos;A&quot;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flexget-and-transmission-on-ubuntu]]></title>
    <url>%2F2018%2F05%2F07%2Fflexget-and-transmission-on-ubuntu%2F</url>
    <content type="text"><![CDATA[Flexget 进阶。自动下载与删除。 安装 flexgetflexget 需要 python2.7, 3.4, 3.5 或者 3.6。（居然支持3.6了 (￣▽￣)／ ） 命令12345678910sudo pip3 install flexgetflexget -V # 检查版本flexget check # 检查配置文件flexget --test execute # 测试flexget status # 状态flexget --db-cleanup # 初始化 SQLite数据库flexget execute # 运行which flexget # 查看安装路径，用于 crontab 定时任务 crontab 配置参考 。 Control daemon: 123sudo status flexgetsudo stop flexgetsudo start flexget yml 配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485templates: default: transmission: host: localhost port: 9091 username: username password: 'password' free_space: path: /srv/ftp/data space: 10240 download: /home/rc/Downloads ##----------------## limit_size: content_size: min: 512 max: 61440 strict: no ##----------------## clean: clean_transmission: enabled: yes host: localhost port: 9091 username: username password: 'password' finished_for: 7 days tracker: xxxxxxx|xxxxx delete_files: yes disable: details ##----------------## ttg_wiki: if: - "'1080p' in title": reject - "'720p' + 'WiKi' in title": accept tasks: byr_test: rss: https://xxxxx.xxx accept_all: yes template: - default #- limit_size content_size: min: 52 max: 6144 strict: no transmission: ratio: 2 path: /srv/ftp/data ##----------------## wiki: rss: https://xxxxx.xxx accept_all: yes template: - default - limit_size - clean transmission: #ratio: 2 path: /srv/ftp/data ##----------------## hdsky: rss: https://xxxxx.xxx template: - default - clean if: - "'Complete' in title": reject - "'iPad' in title": accept content_size: min: 400 max: 10240 strict: no transmission: ratio: 2 path: /srv/ftp/mp4 ##----------------## # 号注释，yml 需要严格对齐，使用两个空格缩进，形成代码块，yml 文件的语法格式：字段+冒号+空格+内容 。 templates: # 模板。 tasks: # 任务。 transmission 模块需要安装，另外，transmission-daemon或者 GUI 需要设置 rpc。 模块transmission password 记得加上引号。 1pip install transmissionrpc space 单位 M，content_size 一样，用于限制大小。download 放的是torrent文件路径。path 为种子内容下载路径。 具体可以参考 官方文档。 使用 transmission 模块和使用 watch-dir 相比，更灵活更方便，对不同的 rss ，可以设置不同的分享率 ratio ，以及不同的下载路径 path 。但是添加了的 torrent 文件需要自己写其他脚本删除或者移动。参见其他。 后续使用 flexget 的自动删种可能效果不是很好，需要使用另外的脚本处理。 待续…… 参考1 ，参考2 transmission-remote ，参考3 。 其他如果想在种子发布一段时间后猜开始下载，比如越过 新种免费期，可以使用下面的脚本配合 watch-dir 实现。 12345678910111213141516171819202122232425262728#!/bin/bash#author rachpt@126.com#date 2018-05-07#-----------设置-------------## flexget torrent 下载路径flexgetPath="/home/rachpt/Downloads/temp/"# transmission watch-dirautoDownloadPath="/home/rachpt/Downloads/ttg/"# 间隔时间，秒intervalsTime=25200#----------------------------#filelist=$(find $flexgetPath -iname "*.torrent*")# 使用换行分割IFS_OLD=$IFSIFS=$'\n'for filename in $filelistdo modifiedTime=`stat -c %Y "$filename"` currentTime=`date +%s` if [ $[$currentTime - $modifiedTime] -gt $intervalsTime ] then mv -f "$filename" "$autoDownloadPath$&#123;flexgetPath##*/&#125;" fidoneIFS=$IFS_OLD &lt;span id=&quot;tr-auto-delete&quot;&gt;transmission 完成下载后自动移动种子文件到指定文件夹脚本。&lt;/span&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/bash# author rachpt@126.com# required dumptorrent to find the real name of torrent# get dumptorrent here: https://sourceforge.net/projects/dumptorrent/files/#----------------设置------------------#dumptorrentPath="/usr/local/bin/dumptorrent"flexgetPath="/home/rachpt/Downloads/ttg/"moveTotPath="/home/rachpt/Downloads/finish/"logoPath="/home/rachpt/Downloads/finish/info"#----------------日志函数---------------#function printLogo &#123; echo "=================================" &gt;&gt; $logoPath echo "匹配成功" &gt;&gt; $logoPath echo "下载到了："$TR_TORRENT_DIR &gt;&gt; $logoPath echo "种子编号："$TR_TORRENT_ID &gt;&gt; $logoPath echo -e "于："$TR_TIME_LOCALTIME " \c" &gt;&gt; $logoPath echo "完成对："$TR_TORRENT_NAME" 的移动！" &gt;&gt; $logoPath&#125;#----------------处理空格---------------#function moveBlank &#123; find "$1" -name "* *" | while read name do na=$(echo $name | tr ' ' '.') mv "$name" $na done&#125;#--------------移动种子文件-------------#moveBlank $flexgetPath# 生成点分割文件名function createMoveToPath &#123; dotTrPath=`echo "$newname" | sed 's/[ ][ ]*/\./g'` if [ -n $dotTrPath ] then totalMoveToPath="$moveTotPath$dotTrPath.torrent" else totalMoveToPath="$moveTotPath$newname.torrent" fi&#125;filelist=$(find $flexgetPath -iname "*.torrent.*")# 使用换行分割IFS_OLD=$IFSIFS=$'\n'for filename in $filelistdo newname=`$dumptorrentPath "$filename" | gawk 'BEGIN&#123;FS=":"&#125; /Name/&#123;print $2&#125;'` newname=`echo "$newname" | sed 's/^ [ ]*//g'` if [ "$newname" = "$TR_TORRENT_NAME" ] then createMoveToPath mv -f "$filename" "$totalMoveToPath" &gt;&gt; $logoPath printLogo fidoneIFS=$IFS_OLD#----------------移动完成---------------#]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>flexget</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 使用笔记-02]]></title>
    <url>%2F2018%2F04%2F02%2Fwindows-note-02%2F</url>
    <content type="text"><![CDATA[承诺好的笔记，一直没写，一是不好意思，因为我已经转向 linux 了，不好说啥，二是才学疏浅，想到没必要将自己的观点强加到他人身上。 但还是继续，承诺需要兑现。 装机后驱动不管是核心显卡还是独立显卡，刚刚装好系统后，显示一般都比较粗大，甚至是模糊，亮度最大，不能调节，这是驱动的问题，需要更新驱动。如果不是很老的机器，或者硬件特殊，只需要使用 windows 的系统更新即可自动装好合适的驱动。 你可能需要先激活系统才能进行自定义设置。激活工具推荐 01笔记文末 链接。 如果嫌 windows 系统更新的下载速度慢，可以使用 绿色版的 驱动精灵安装驱动，推荐 在 http://www.zdfans.com/ 上下载，或者 baidu，如果你经验足够丰富不会下到 下载器 安装流氓软件。 右键 此电脑 ——&gt; 管理 ——&gt; 设备管理器（或者 ctrl + x ——&gt; m，或者 右键 开始 ——&gt; 设备管理器(M)）进入设备管理器，没有叹号，表明几乎所有驱动 ok 了。 关闭 windows 的自动更新为什么要关闭 自动更新，会不会不安全？ 几乎没有坏的影响，好的到是有，之所以 你被流氓 安装 xx管家、xx助手等不是电脑中毒了，而是你自己手贱所致。如何下载到正确的软件 我之后会提到。别用软件管家！真的是没必要，贪图眼前的便利准会掉坑里。 自动更新，windows 防火墙，windows defender 这三个不是同一个东西。 如何关闭。（家庭版需要其他方法，自己百度） 点击 运行，或者 win + R ，输入 gpedit.msc ；或者 打开 cmd 输入 gpedit 。 依次展开 计算机配置 ——&gt; 管理模板 ——&gt; windows 组件 ——&gt; windows 更新。 将 配置自动更新 （双击打开） 改成 已禁用 ，这是最重要的，其他的可以不改，如果你想尝试 ，请仔细阅读 说明。可以将 自动更新频率 设为 禁用。 同样的道理，你可以在这里面 禁用 onedrive defender等。 理论上讲，只要你不自己去点 设置（win+I） 里面的 检查更新，系统不会自己 更新。 运行库Microsoft Visual C++ Redist xxxx，有些软件提醒你安装运行库， 推荐 zdfans 上面的运行库。说一下，这个 zdfans 大部分软件不是 他自己做的，是搬运，或者说是一种备份。自己百度 常用运行库也是可以的。 别提醒我 是否 我知道需要运行的软件很安全，不需要这个。怎么去掉？ 打开 控制面板（win + R然后输入 ctontrol）不行的话你点点点找一下， 展开 用户账户，然后再点击 用户账户。接着 更改用户账户控制设置。 滑块移到最下面，确定。 显示此电脑win + I 打开设置，或者你点点点找一下，不同版本可能不一样。 个性化 ——&gt; 主题 ——&gt; 桌面图标设置，把计算机勾上，其他的按需勾选。 又或者 桌面 右键 ——&gt; 个性化 ——&gt; 主题 ——&gt; 桌面图标设置。 点点点，没什么好说的。 更干净的界面推荐 软件 dism++， 下载请出门百度，第一个就是（如果你没被广告）。 这个 Dism++ x86/x64 ，就是下载链接。 绿色软件 无需安装，解压后 推荐放到 D 盘(区别于系统盘)。 dism++ 可以干的事： 清理垃圾，清理 C盘的windows 目录，我一般是全部勾上清理。 去掉 桌面 快捷方式 字样，快捷方式箭头，以及小盾牌，具体自己去该软件里面点点点找一下。 精简 文件资源管理器 （就是点开此电脑的界面）左侧 的东西，比如网络、家庭组、可移动设备、以及此电脑下的 6个（或者其他）文件夹。 找回 window 照片查看器，去掉 ie 右上角笑脸。 关闭 安全警告等等 。 卸载 uwp 应用，不懂别乱卸！ 显示复选框 扩展名等如下图没什么好说的。 清理注册表软件卸载后一般会在注册表里面留下无用的记录，可以使用 CCleaner清理，这软件不免费，推荐 zdfans 上面下载，或者其他的 什么 大眼仔啥的。 这个软件也可以清理系统 垃圾 ，主要是 user 目录下的，注意清理别勾选 浏览器的 cookie，否则你每次都要登录。 使用绿色版！ 一些日用软件 bandizip 点击到官网，免费，无广告，图标主题不错！兼容 rar、7z、zip、等各种格式，压缩 推荐 使用 7z 格式，别用 rar 这个收费格式，也别用各种破解版 winRAR 了（别提免费版），好压、360压啥的也不要用。而且支持不解压 看图。自动解压功能也很好用，具体看官网的介绍。 7zip 也不错，可是界面有点丑。不嫌弃用这个也可以的。 potplayer 棒子出品，质量不错，解码强，无广告，可玩性很丰富，有很多快捷键。 点击到官网 ，安装的时候记得把推荐的额外解码器都装上，保平安。如果嫌烦，可以关闭它的自动更新。开源 全平台的 vlc 也是不错的，论外观易用性，还是首推 pot。我 Linux 上最喜欢的简洁 mpv (全平台)播放器是不会推荐的，那是极客的最爱。 极客请使用 mpv 播放器，介绍可以看这里。 TIM 比 QQ 好，干净些许。 Sumatra PDF 免费小巧的 pdf &amp; 电子书（mobi、epub等）阅读软件，如果你不需要 做标记，用这个准没错，有绿色便携版，推荐使用安装版，可以关联格式。 点击到官网 ，LaTeX 的御用 阅读器。 Gimp &amp; photoshop 这年头，不会P图，好意思说自己会用电脑？ 免费 开源 跨平台 就用 Gimp，只用 win 的话，网上搜个 破解版的 ps cc，有绿色破解版，自己baidu，这玩意儿 熟能生巧。 点击到 Gimp 官网 。Gimp 比 PS 小巧很多，有中文官方文档。 Snipaste 点击到官网 ，比 QQ（TIM） 的强大，图标好看，快捷键强。免费。希望 linux 版快点出来。 写代码 Visual Studio Code，atom，sublime 破解版，notepad++，notepad2 都不错。 如果只是想看 linux 生成的 文本文件 ，notepad2 代替默认的记事本很便利 (写字板可以救急！)。 IDM &amp; FDM 下载器，区别前者收费，后者免费，但是前者感觉更好。迅雷什么的还是不要用。 Get Free Download Manager ，IDM -旧版- 绿色破解版 。 视频压制 推荐使用 小丸工具箱，如果你不会 使用 ffmpeg 的话，megui 啥的大部分人也用不着。 隆重介绍一下火绒 想不出什么理由让我不推荐它。如果你不放心 defender ，别用管家、别用卫士！ 点击到官网 ，注意 设置取消 它的 主页推广，如果你不想被它换主页。 先这样吧 :joy: 。 推荐阅读 Windows 绝赞应用 。 可以先关注 http://amazingapps.org/ 这个，截止目前就 windows 的比较完整。]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[use-linux-format-not-dos]]></title>
    <url>%2F2018%2F04%2F01%2Fuse-linux-format-not-dos%2F</url>
    <content type="text"><![CDATA[写个 shell 脚本格式化输出数据，出现诡异 bug，郁闷了一天，早上看书之际，dos2unix 出现到脑海中，乌云散去，果然如此。 情景有一个 txt 文件，行数很多，需要复制其中的部分数据到 excel 统计，一个文件大概要复制 40-50 次，懒人总是想捷径。首先想到的是使用 shell 脚本实现，因为 python 才开始，先是看书，4-5天，写脚本，各种碰壁，于是 用了低级方法可以干活，隔几天后 改进，如下。 123456789101112131415161718192021222324252627282930313233343536373839#!/bin/bashtempfile=`mktemp const.XXXXXXXX`sed -n '/+\/-/p' $1 &gt; $tempfilebulkmodulus=`gawk '/=/ &#123; print $4 &#125;' $tempfile`for (( j = 4; j &lt; 7; j = j + 2 ))do for (( i = 1; i &lt; 22; i++ )) do cijTempName=`cat $tempfile | gawk -v circle=$j '$1 == loop &#123;print $circle&#125;' loop=$i` if [ $i -ge 2 ] &amp;&amp; [ $i -le 6 ] then if [ -z $cijTempName ] then echo -e "-\t\c" else echo -e $cijTempName"\t\c" fi else if [ -z $cijTempName ] then echo -e "0\t\c" else echo -e $cijTempName"\t\c" fi fi done echo doneecho echo 'bulk:' $bulkmodulus rm -f $tempfile $tempfile2 数据大概如下： 做了部分模糊处理。 错误需要提出 cij 的 第 4列 以及 第 6 列。使用制表符在各自行中打印。 结果出乎我的意料，第二行的 误差值 只打印了两个。 百思不得其解，我甚至已经考虑 使用 awk 的 FS ORS 各种折腾。最后皆以失败告终。 解决今天图书馆看书，突然想到我这个 txt 文件是在 windows 生成的，自然 换行符与 linux/unix 的不同，如此以来自然能够解释 中间部分正常，而尾巴部分出现诡异。 于是，加上 dos2unix Constants.txt ，完美解决问题。 存在即是合理，不是莫名其妙，只是你不知道。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[use-outer-variables-in-awk]]></title>
    <url>%2F2018%2F03%2F31%2Fuse-outer-variables-in-awk%2F</url>
    <content type="text"><![CDATA[awk 命令中使用外部定义的变量。 做好了的 12345678910111213141516171819202122for (( i = 1; i &lt; 22; i++ ))do cijTempName=`cat $tempfile | gawk '$1 == loop &#123;print $4&#125;' loop=$i` if [ $i -ge 2 ] &amp;&amp; [ $i -le 6 ] then if [ -z $cijTempName ] then echo -e "-\t\c" else echo -e $cijTempName"\t\c" fi else if [ -z $cijTempName ] then echo -e "0\t\c" else echo -e $cijTempName"\t\c" fi fidone 使用 awk（gawk 是 AWK 的 GNU 版本）获取每行第一个位置的元素，并与外面的 loop counter 比较，如果比配，则打印这一行中的 第四个元素，否则，1-6 loop 中打印 “-”，后面的打印 0。 关键点 gawk 中判断 $1 与 loop counter 如何处理。 格式：awk ‘{action}’ 变量名=变量值 这样传入变量，可以在action中获得值。 注意：变量名与值放到’{action}’后面。 如果要在 BEGIN 的action不能获得变量值，使用 参数 v，即是 awk -v 。这里没用到。 参考内容。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[the-gateway-of-materials-studio]]></title>
    <url>%2F2018%2F03%2F31%2Fthe-gateway-of-materials-studio%2F</url>
    <content type="text"><![CDATA[关于 Materials studio 的 Remote Gateway。 MS 默认 使用 http://localhost:18888 查看进程，之前一直不知道 Edti 的用户名与密码是啥，google 了下，找到官方帮助文档，看了下了解了些许，这里记录一下。 开关找到路径 ~/Accelrys/MaterialsStudio8.0/etc/Gateway 与自己的安装路径有关。 12345678910./gwstart# 开./gwstop# 关./gwrestop# 重启#目录下的其他可执行文件功能，如其名#运行计算中 需要保持 这个 是开得状态。 用户1234567# 在刚才的目录下./gwusers /list# 列出 用户./gwusers /add rachpt# 添加用户 默认情况下 使用 gatekeeper密码： 空 管理 emote Gateway 。 参考内容 。 更多请看 。]]></content>
      <categories>
        <category>DFT</category>
      </categories>
      <tags>
        <tag>castep</tag>
        <tag>ms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[a-bash-script-for-pt-signin]]></title>
    <url>%2F2018%2F03%2F29%2Fa-bash-script-for-pt-signin%2F</url>
    <content type="text"><![CDATA[写一个脚本，每天 定时自动签到 PT 站。 加了 图片验证的比较复杂，目前搞不定，只对不需要 验证码的签到有效。 第一版脚本如下，自己需要修改 cookie ，或者其他。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#!/bin/bash# author: rachptecho "hyperay 签到"curl 'https://www.hyperay.org/sign_in.php' \-H 'Host: www.hyperay.org' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-type: application/x-www-form-urlencoded' \-H 'Cookie: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data 'action=sign_in'echo ''echo "hdhome 签到"echo ''curl 'https://hdhome.org/attendance.php' \-H 'Host: hdhome.org' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Cookie: __xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \-H 'Upgrade-Insecure-Requests: 1'echo ''echo "6v 签到"echo ''curl 'http://bt.neu6.edu.cn/forum.php' \-H 'Host: bt.neu6.edu.cn' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Cookie: LRpW_2132_ulastactivity=fb5dVHpNQ0vxxxxxxxxxxxxxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \-H 'Upgrade-Insecure-Requests: 1'echo ''echo "hdchina 签到"echo ''curl 'https://hdchina.org/plugin_sign-in.php?cmd=signin' \-H 'Host: hdchina.org' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'X-Requested-With: XMLHttpRequest' \-H 'Cookie: __cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data 'cmd=signin'echo ''echo "TTG 签到"echo ''tempPage=`mktemp ttgpage.XXXXXX`curl 'https://totheglory.im/' \-H 'Host: totheglory.im' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-Type: application/x-www-form-urlencoded' \-H 'X-Requested-With: XMLHttpRequest' \-H 'Cookie: __xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' &gt; $tempPagemyTimestamp=`gawk '/token/&#123;print $3&#125;' $tempPage | gawk 'BEGIN&#123;FS="\""&#125; &#123;print $2&#125;'`myToken=`gawk '/token/&#123;print $5&#125;' $tempPage | gawk 'BEGIN&#123;FS="\""&#125; &#123;print $2&#125;'`curl 'https://totheglory.im/signed.php' \-H 'Host: totheglory.im' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-Type: application/x-www-form-urlencoded' \-H 'X-Requested-With: XMLHttpRequest' \-H 'Cookie: __xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data 'signed_timestamp=$myTimestamp&amp;signed_token=$myToken'rm -f $tempPageecho ''echo "所有签到完成！"exit 其中 TTG 和其他的有区别，需要获取 但前时间 time 以及 token，比较懒，curl 的头可以封装 成函数，这里 直接 使用 firefox 复制的 curl 链接。:joy: 😂 😂 定时 任务 请参考 here , and here 。 第二版添加 cmct.tv ，TTG 的需要修改 cookie 格式，以及变量存在的行使用 双引号！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#!/bin/bash# author: rachptecho "hyperay 签到"curl 'https://www.hyperay.org/sign_in.php' \-H 'Host: www.hyperay.org' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-type: application/x-www-form-urlencoded' \-H 'Cookie: xxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data 'action=sign_in'echo ''echo "hdhome 签到"echo ''curl 'https://hdhome.org/attendance.php' \-H 'Host: hdhome.org' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Cookie: xxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \-H 'Upgrade-Insecure-Requests: 1'echo ''echo "6v 签到"echo ''curl 'http://bt.neu6.edu.cn/forum.php' \-H 'Host: bt.neu6.edu.cn' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Cookie: xxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \-H 'Upgrade-Insecure-Requests: 1'echo ''echo "hdchina 签到"echo ''curl 'https://hdchina.org/plugin_sign-in.php?cmd=signin' \-H 'Host: hdchina.org' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'X-Requested-With: XMLHttpRequest' \-H 'Cookie: xxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data 'cmd=signin'echo ''echo "TTG 签到"echo ''tempPage=`mktemp ttgpage.XXXXXX`### 获取 cookiecurl -c ttgcookie 'https://totheglory.im/' \-H 'Host: totheglory.im' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-Type: application/x-www-form-urlencoded' \-H 'X-Requested-With: XMLHttpRequest' \-H 'Cookie: __cfduid=xxxxxxxxxxxxxx; uid=XXXXXX; pass=xxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' &gt; $tempPage# myTimestamp=`gawk '/token/&#123;print $3&#125;' $tempPage | gawk 'BEGIN&#123;FS="\""&#125; &#123;print $2&#125;'`# 不需要上面这个！myToken=`gawk '/token/&#123;print $5&#125;' $tempPage | gawk 'BEGIN&#123;FS="\""&#125; &#123;print $2&#125;'`myLaccess=`cat "ttgcookie" | awk '/laccess/&#123;print $7&#125;'`curl 'https://totheglory.im/signed.php' \-H 'Host: totheglory.im' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-Type: application/x-www-form-urlencoded' \-H 'X-Requested-With: XMLHttpRequest' \-H "Cookie: __cfduid=xxxxxxxxxxxxxx; uid=XXXXXX'; pass=xxxxxxxx" \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data "signed_timestamp=$myLaccess&amp;signed_token=$myToken"# 注意 使用了变量的地方 使用 双引号 不能使用 单引号。rm -f $tempPage ttgcookieecho ''echo "CMCT.tv 签到"echo ''curl 'https://cmct.tv/plugin.php?id=dsu_paulsign:sign&amp;operation=qiandao&amp;infloat=1&amp;inajax=1' \-H 'Host: cmct.tv' \-H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0' \-H 'Accept: */*' \-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' --compressed \-H 'Content-Type: application/x-www-form-urlencoded' \-H 'X-Requested-With: XMLHttpRequest' \-H 'Cookie: xxxxxxxxxxxxxx' \-H 'DNT: 1' \-H 'Connection: keep-alive' \--data 'formhash=04fcd2f6&amp;qdxq=ym&amp;qdmode=1&amp;todaysay=%C7%A9%B5%BD%C0%B2%C0%B2%C0%B2%A1%A3%A1%A3%A1%A3&amp;fastreply=0'echo ''echo "所有签到完成！"exit 注意 使用了变量的地方 使用 双引号 不能使用 单引号。TTG cookie 中的 PHPSESSID 字段 不需要。 更新(使用 httpie)需要安装 httpie，curl 处理 ttg 不是很方便。 脚本需要自己比对 修改 cookie。 http 在crontab 中运行需要添加 --ignore-stdin 。 2018.11.19 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/bin/bash# author: rachpt#-----------------------------------------------#echo '-------------------------'echo "[hyperay 签到]"echo ''cookie_hyperay='Cookie: c_secure_uid=XXXXXX==; c_secure_pass=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxa; c_secure_login=bm9wZQ=='http --ignore-stdin -b -f POST 'https://www.hyperay.org/sign_in.php' action=sign_in "$cookie_hyperay"|grep --color=never '.*'#-----------------------------------------------#echo '-------------------------'echo "[hdhome 签到]"echo ''cookie_hdhome='Cookie: c_secure_uid=XXXXXXX=; c_secure_pass=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; c_secure_login=bm9wZQ=='http --ignore-stdin -b GET 'https://hdhome.org/attendance.php' "$cookie_hdhome"|grep -A 10 '"outer"'|grep 'table width='|sed -r 's/&lt;[^&gt;]+&gt;//ig'#-----------------------------------------------#echo '-------------------------'echo "[TTG 签到]"echo ''cookie_ttg='Cookie: uid=000000; pass=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; PHPSESSID=xxxxxxxxxxxxxxxxxxxxxxxxxx'http --ignore-stdin -b GET 'https://totheglory.im/' "$cookie_ttg" &gt; /dev/null# 如果提示[未能获取到 Token！],则需要更换下面一行的请求链接！ttg_post_data="$(http --ignore-stdin -b GET 'https://totheglory.im/disclaimer.php' "$cookie_ttg"|grep 'signed_timestamp')"ttg_timestamp="$(echo "$ttg_post_data"|awk '&#123;print $3&#125;'|sed 's/[\" ,&#123;&#125;]//g')"ttg_token="$(echo "$ttg_post_data"|awk '&#123;print $5&#125;'|sed 's/[\" ,&#123;&#125;]//g')"http --ignore-stdin -b -f POST 'https://totheglory.im/signed.php' signed_timestamp=$ttg_timestamp signed_token=$ttg_token "$cookie_ttg"|grep '.*'echo -e "\n当前状态：\c"if [ ! "$ttg_token" ]; then echo '[未能获取到 Token！]'else http --ignore-stdin -b GET 'https://totheglory.im/disclaimer.php' "$cookie_ttg"|grep '"sp_signed"'|sed -r 's/\[&lt;a.*donate.php.*a&gt;\]//;s/&lt;[^&gt;]+&gt;//ig;s/ //g;s/&amp;nbsp;//g'fi#-----------------------------------------------#echo '-------------------------'echo "[hdchina 签到]"echo ''cookie_hdchina='Cookie: mv_secure_uid=XXXXXXXX; mv_secure_pass=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; mv_secure_login=bm9wZQ=='http --ignore-stdin -b -f POST 'https://hdchina.org/plugin_sign-in.php?cmd=signin' cmd=signin "$cookie_hdchina"|grep 'state'#-----------------------------------------------#echo '-------------------------'echo "[所有签到完成！]"]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>pt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[change-sidebar-width-of-firefox]]></title>
    <url>%2F2018%2F03%2F28%2Fchange-sidebar-width-of-firefox%2F</url>
    <content type="text"><![CDATA[Firefox 的侧边书签很好用，但是在低分辨率屏幕上，最小宽度总是太宽，有办法突破最小值吗，答案是有的。不知道现在侧边栏插件适配了没有。这里记录在 ubuntu 平台使用自定义 css 样式改小侧边栏的最小值。 配置文件路径在 firfox 地址栏输入 about:profiles ，找到配置文件路径。如下图。 在 Root Directory 中创建 chrome 文件夹，然后在其中新建一个名为 userChrome.css 的 css 文件。 CSS 文件12345#sidebar-box,#sidebar,#sidebar-header &#123; max-width: 300px !important; min-width: 50px !important;&#125; 重启 firefox 生效，效果 如上图。 参考内容1，内容2，内容3 。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[transmission-settings]]></title>
    <url>%2F2018%2F03%2F25%2Ftransmission-settings%2F</url>
    <content type="text"><![CDATA[之前不会设置 transmission ，习惯了 ut 的点点点，觉得很是不好用，对其 json 的配置文件很不友好的形式感到恶心，不过现在有了更多的 linux 命令行与 shell 脚本知识后，再看 transmission，真心佩服如此灵活的配置。什么 qBittorrent，deluge 什么的，一边去，看我 transmission。 这里记录一些 配置心得。 transmission 有好几个版本，带有用户形图界面 GUI 的 GTK+、QT版本，以及没有任何界面的 daemon 守护进程。其中 daemon 没有任何 GUI界面，需要一个例外的软件管理它、控制它，transmission-cli、transmission-remote-cli/gtk 或者 Transmission Web Control。 下面说的是 daemon 版的设置，对其它的也是有效的。只是 settings.json 的位置不一样。 rpcrpc 为 WEBGUI 控制的相关设置。 1234567891011121314151617181920212223&quot;rpc-authentication-required&quot;: false,# 是否需要用户名与密码验证，是全局设置&quot;rpc-bind-address&quot;: &quot;0.0.0.0&quot;,# 黑名单，全局性的&quot;rpc-enabled&quot;: true,# 是否开启 WebGUI，开启其他才有效&quot;rpc-host-whitelist&quot;: &quot;*example.com&quot;,# 在有密码验证的时候，host名单，默认 localhost 和所有 ip 地址在其中&quot;rpc-host-whitelist-enabled&quot;: true,# 是否开启 host 白名单&quot;rpc-password&quot;: &quot;×××&quot;,# 密码，保存后自动转化成加密态&quot;rpc-port&quot;: 9091,# 端口，默认9091,ip + : + 端口号，才能访问 tr&quot;rpc-url&quot;: &quot;/transmission/&quot;,# 路径名，显示在端口后面，默认即可&quot;rpc-username&quot;: &quot;××&quot;,# 用于认证的有户名&quot;rpc-whitelist&quot;: &quot;127.0.0.1,10.42.0.*&quot;,# 全局白名单，只有 ip 在其中的客户机才能访问，可以使用通配符# 这个与 需不需要 用户名与密码验证无关&quot;rpc-whitelist-enabled&quot;: true,# 是否开启 白名单访问，除非你只在一个固定的 ip (段)上管理，否则不要开启 参考文档 。 脚本1234&quot;script-torrent-done-enabled&quot;: true,# 每一个种子完成后 执行脚本 开关&quot;script-torrent-done-filename&quot;: &quot;/home/transmission/auto&quot;,# 执行的脚本路径，使用 全路径 可以 使用的变量 TR_APP_VERSION TR_TIME_LOCALTIME TR_TORRENT_DIR TR_TORRENT_HASH TR_TORRENT_ID TR_TORRENT_NAME 一个例子 , 参考文档 。 其他暂时没什么说的，都能百度到，或者看官方文档搞定。 2018-05-15 更新 制作种子需要使用 transmission-create命令(由 transmission-cli 提供)，web版帮助文档。 使用命令： 1transmission-create -p -o /path/out.torrent -s 16384 -t https://example.com/announce.php -c 'made by Linux' /path/something/ -p 表示私密种子， -o 设置输出路径，-s 设置分块大小，单位KiB ，默认 2M，-t 设置tracker，-c 添加评论，最后的文件或者路径即是需要制作种子的源文件。 remote使用transmission-remote 管理tr，web版帮助文档。 具体应用可以参考这里。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>transmission</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notes-for-shell-scripting-bible]]></title>
    <url>%2F2018%2F03%2F23%2Fnotes-for-shell-scripting-bible%2F</url>
    <content type="text"><![CDATA[Linux 命令行与 shell 脚本编程大全（第二版）简要阅读笔记。 看到哪儿就就记到哪，没有规律可循。 cron 时间表全称 cron table ，* 通配符，dayofweek 可以使用 三字母格式（mon, tue, wed, thu, fri, sat, sun） 对应0-7 ，0, 7 为 sun。 每一月最后一天执行脚本的一种方式： 100 12 * * * if [ `date +%d -d tomorrow` = 01 ] ; then ; COMMAND crontab -l 列出所有定时任务。 crontab -e 编辑用户自己的时间表，文件在 /var/spool/cron/ 目录下。 对于不要求使用精确时间的任务，可以在 /etc/cron.*ly 添加脚本。 hourly，monthly，daily。意如其名，复制到里面即可。 cron 惟一的问题是假定你 7x24 小时开机。 anacron 可以执行错过了的 cron 任务。 cron 时间戳文件在 /var/spool/anacron 下，作业表在 /etc/anacrontab 文件。 123456789100 2 * * 6* * * * * *- - - - - -| | | | | || | | | | + year [optional]| | | | +----- day of week (0 - 7) (Sunday=0 or 7)| | | +---------- month (1 - 12)| | +--------------- day of month (1 - 31)| +-------------------- hour (0 - 23)+------------------------- min (0 - 59) 在线验证 corntab 表达式 。 每次修改crontab file 后需要重启cron 吗？ 一般来说，不需要，如果想确保已经生效，可以restart 一下。https://stackoverflow.com/questions/10193788/restarting-cron-after-changing-crontab-file 突破最小执行时间 1 min的限制： 可以使用 sleep 实现： 1234567crontab -l# test*/1 * * * * /usr/bin/date &gt;&gt; /home/rachpt/con-test.log*/1 * * * * sleep 15; /usr/bin/date &gt;&gt; /home/rachpt/con-test.log*/1 * * * * sleep 30; /usr/bin/date &gt;&gt; /home/rachpt/con-test.log*/1 * * * * sleep 45; /usr/bin/date &gt;&gt; /home/rachpt/con-test.log 开机运行脚本ubuntu 发行版默认开机运行级别 2 ，如果想改，需要自己创建 /etc/inittab文件。 0，关机；1 ，单用户模式；6 ，关机。2-5 ubuntu 不区分，red hat 区分。 不同发行版使用的 开机脚本(upstart script)路径不同，如 /etc/rc#.d /etc/init.d /etc/init.d/rc.d 定义自己的 /etc/initio.d/rc.local dabian 发行版 /etc/rc.local ubuntn 发行版 如果使用脚本，需要使用全路径名。 任务优先级使用 nice 与 renice 命令修改优先级。值 -20 — 20 ，越大优先级越小。 123nice -d 10 ./test.shrenice 12 -p 进程号 普通用户只能降低优先级，root 用户（或者 sudo）可以随意。 进程状态 S 符号 意义 D 可中断的休眠状态 R 运行状态 S 休眠状态 T 跟踪状态或停止状态 Z 僵化状态 模式空间与保持空间一个经典案例，使用模式空间与保持空间实现反序。 1sed -n '&#123;1!G ; h ; %p &#125;' filepath 命令 操作 h 模式空间 复制 到保持空间 H 模式 附加 到 保持 g 保持 复制到 模式 G 保持 附加到 模式 x 二者交换 ！ negate 排除命令。排除末尾行，$! N …. and 符号使用&amp;符号 代替 sed 匹配的内容。 1234echo "The cat sleeps in his hat" | sed 's/.at/"&amp;"/g'# 输出结果The "cat" sleeps in his "hat" 上例中可以使用 子字符模块 实现， 123echo "That furry cat is pretty, taht furry hat is pretty" | sed 's/hurry \(.at\)/\1/'# 输出结果That cat is pretty, taht hat is pretty \1 替换第一个模块，\2 替换第二个，以此类推。 加倍行间距一个简单的命令，加倍行间距。 1sed '$!G' datafile 保持空间 在启动sed的时候默认只有一行空行。 但是有一个缺点，如果原文件中已经有些许空行，则会出现空行不均。 改进方法。 1sed '/^$/d;$!G' datafile 先删除空行，然后加倍行。如果空行中有空格，需要例外匹配。 添加行号简单的方法。 1sed '=' datafile 但是 行号 与行不在同一行。改进。 1sed '=' datafile | sed 'N; S/\n/ /' 说明，N 同时处理两行，将其中的 \n 换成 空格。 打印末尾几行123456789101112131415161718rachpt@pc ~/desktop $ sed '&#123;&gt; :start&gt; $q&gt; N&gt; 11,$D&gt; b start&gt; &#125;' ms_castep.param# 结果如下geom_method : BFGSfixed_npw : falsegeom_modulus_est : 500.000000000000000 GPacalculate_ELF : falsecalculate_stress : truepopn_calculate : truecalculate_hirshfeld : truecalculate_densdiff : falsepopn_bond_cutoff : 3.000000000000000pdos_calculate_weights : false $q 末行退出 b 跳转的循环，D 只输出模式空间中的第一行。 选择性删除空行1234567891011rachpt@pc ~/desktop $ sed '/./,/^$/!d' test# 结果如下This is a header lineline 2line 3line 4end of filerachpt@pc ~/desktop $ /./,/^$/ 匹配 任意字符行可空行区间。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CASTEP-module-in-MS]]></title>
    <url>%2F2018%2F03%2F23%2FCASTEP-module-in-MS%2F</url>
    <content type="text"><![CDATA[网上找的部分 Materials Studio 关于 CASTEP 模块的使用。 生成的文件作用.cell 文件包含 坐标和晶格参数.param 文件包含 所有模拟输入参数 ms 设置 中的 Optimize cell 意思是优化晶格常数，改变 计算精度，自动优化晶包 得到的文件.xsd 最后的优化结构.xtd 轨迹文件，包含每一步的结构.castep 包含优化信息的输出文件 计算任何性质，都有 .param .castep 文件输出。 linux 使用 perl 脚本命令进行 处理 比如 perl cell2poscar.pl .cell, 生成POSCAR文件 原出处 。 关于第一原理的一些理解：（1）第一性原理其实是包括基于密度泛函的从头算和基于Hartree-Fock自洽计算的从头算，前者以电子密度作为基本变量（霍亨伯格-科洪定理），通过求解Kohn-Sham方程，迭代自洽得到体系的基态电子密度，然后求体系的基态性质；后者则通过自洽求解Hartree-Fock方程，获得体系的波函数，求基态性质；评述：K-S方程的计算水平达到了H-F水平，同时还考虑了电子间的交换关联作用。（2）关于DFT中密度泛函的Functional，其实是交换关联泛函，包括LDA，GGA，杂化泛函等等。一般LDA为局域密度近似，在空间某点用均匀电子气密度作为交换关联泛函的唯一变量，多数为参数化的CA-PZ方案；GGA为广义梯度近似，不仅将电子密度作为交换关联泛函的变量，也考虑了密度的梯度为变量，包括PBE,PW,RPBE等方案，BLYP泛函也属于GGA；此外还有一些杂化泛函，B3LYP等。（3）关于赝势在处理计算体系中原子的电子态时，有两种方法，一种是考虑所有电子，叫做全电子法，比如WIEN2K中的FLAPW方法(线性缀加平面波)；此外还有一种方法是只考虑价电子，而把芯电子和原子核构成离子实放在一起考虑，即赝势法，一般赝势法是选取一个截断半径，截断半径以内，波函数变化较平滑，和真实的不同，截断半径以外则和真实情况相同，而且赝势法得到的能量本征值和全电子法应该相同。赝势包括模守恒和超软，模守恒较硬，一般需要较大的截断能，超软势则可以用较小的截断能即可。另外，模守恒势的散射特性和全电子相同，因此一般红外，拉曼等光谱的计算需要用模守恒势。赝势的测试标准应是赝势与全电子法计算结果的匹配度，而不是赝势与实验结果的匹配度，因为和实验结果的匹配可能是偶然的。（4）关于收敛测试：（a）Ecut，也就是截断能，一般情况下，总能相对于不同Ecut做计算，当Ecut增大时总能变化不明显了即可；然而，在需要考虑体系应力时，还需对应力进行收敛测试，而且应力相对于Ecut的收敛要比总能更为苛刻，也就是某个截断能下总能已经收敛了，但应力未必收敛。（b）K-point，即K网格，一般金属需要较大的K网格，采用超晶胞时可以选用相对较小的K网格，但实际上还是要经过测试。（5）关于磁性一般何时考虑自旋呢？举例子，例如BaTiO3中，Ba、Ti和O分别为+2，+4和-2价，离子全部为各个轨道满壳层的结构，就不必考虑自旋了；对于BaMnO3中，由于Mn+3价时d轨道还有电子，但未满，因此需考虑Mn的自旋，至于Ba和O则不必考虑。其实设定自旋就是给定一个原子磁矩的初始值，只在刚开始计算时作为初始值使用，具体的可参照磁性物理。（6）关于几何优化包括很多种了，比如晶格常数和原子位置同时优化，只优化原子位置，只优化晶格常数，还有晶格常数和原子位置分开优化等等。在PRL一篇文章中见到过只优化原子位置，晶格常数用实验值的例子（PRL 100, 186402 (2008)）；也见到过晶格常数先优化，之后固定晶格常数优化原子位置的情况；更多的情况则是Full geometry optimization。一般情况下，也有不优化几何结构直接计算电子结构的，但是对于缺陷形成能的计算则往往要优化。（7）关于软件软件大致分为基于平面波的软件，如CASTEP、PWSCF和ABINIT等等，计算量大概和体系原子数目的三次方相关；还有基于原子轨道线性组合的软件(LCAO)，比如openmx，siesta，dmol等，计算量和体系原子数目相关，一般可模拟较多原子数目的体系。 参考文献：Designing meaningful density functional theory calculations in materials science—a primer 赝势 晶包内原子超过30个时，或者晶包内有许多空洞的地方，使用 real-space 效率更高。 出处 。]]></content>
      <categories>
        <category>DFT</category>
      </categories>
      <tags>
        <tag>castep</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个 shell 脚本]]></title>
    <url>%2F2018%2F03%2F19%2Fsevseral-shell-scripts%2F</url>
    <content type="text"><![CDATA[记录几个 shell 脚本，高效。 批量使用下划线替换路径中的空格12345678910#!/bin/bash find . -name "* *"|while read name;do na=$(echo $name | tr ' ' '_') mv "$name" $nadone 参考文章。 Imagemagic 批量缩小图片123456789101112131415161718192021222324#!/bin/bash if [ ! -d re_size ];then mkdir -p re_sizefifilelist=$(find -iname "*.jpg")FOLDER=$(cd `dirname $0`; pwd)for filename in $filelistdo tempname=$&#123;filename#*.&#125; newfilename=$&#123;FOLDER&#125;$&#123;tempname&#125; if [ ! -d re_size$&#123;tempname%/*&#125; ];then mkdir -p re_size$&#123;tempname%/*&#125; fi convert $newfilename -resize 800 -quality 60 $&#123;FOLDER&#125;/re_size$&#123;tempname&#125; done 参考文章1 ，参考2 。 批量压制视频12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/bin/bash # author: rachpt@126.com#------settings--------#myfolder=finshed# use sd or ipadcompatibility=sd #-------maincode-------#if [ $compatibility == "sd" ]then cut="854x480" videorate="500k" audiorate="64k" speed="fast" profile="-x264-params \"profile=high:level=4.0\"" out="480p" elif [ $compatibility == "ipad" ]then cut="1280x720" videorate="2200k" audiorate="128k" speed="slow" profile="-x264-params \"profile=high:level=4.2\"" out="720p"else exit fiif [ ! -d $myfolder ];then mkdir -p $myfolderfifilelist=$(find \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.ts" -o -iname "*.avi" -o -iname "*.wmv" \) -a ! -name "*_$out.mp4")FOLDER=$(cd `dirname $0`; pwd)for filename in $filelistdo tempname=$&#123;filename#*/&#125; newfilename=$&#123;FOLDER&#125;/$&#123;tempname&#125; ffmpegcode="ffmpeg -i $newfilename -s $cut -c:v libx264 $profile -preset $speed -b:v $videorate" isempty=$&#123;filename#*.&#125; isempty=$&#123;isempty%/*&#125; if [ ! -d $myfolder$isempty ];then mkdir -p $myfolder$isempty fi nohup $ffmpegcode -pass 1 -an -f mp4 -y /dev/null &amp;&amp; $ffmpegcode -pass 2 -c:a aac -b:a $audiorate -strict -2 $&#123;FOLDER&#125;/$myfolder/$&#123;tempname%.*&#125;_$out.mp4 &gt;/dev/null 2&gt;&amp;1donerm -f ffmpeg2pass*echo "finished!"exit]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个 MS 错误]]></title>
    <url>%2F2018%2F03%2F13%2Fsome-error-of-ms%2F</url>
    <content type="text"><![CDATA[记录几个 MS 的错误。 未找到基态能 在计算过程中经常遇到计算失败的情况，文件给出的警告是： 123*Warning* max. SCF cycles performed but system has not reached the groundstate. Warning: electronic minimisation did not converge when finding ground state. 和收敛有关的参数主要有能量的CUTOFF，SCF的次数，SMEAR，以及K点选取等，可以尝试一下。 SCF最大仍不收敛一般来说，MS默认的SCF次数100对于小系统是够用的，但是，原子数一多，就不一定了。 a) 首先结构的合理性，如果自建的结构偏离最低能量太大（或失配度太大），可能会难以收敛。 b) 取消一切对称性，充分驰豫晶格。 c) 有些结构本身就是亚稳态，scf的各项收敛指标如果设的太高，对于亚稳态就可能达不到如此的精度。 d) 改变收敛的条件，降低精度(能量的截断值)。 e) 增加循环次数。 f) 改变赝势。 优化不收敛增加设Max.Interations的大小 interations是定义积分精度的，相当于gaussian里的int选项；根据gauss的经验，对重原子如果不用细的积分网格，结果就不准确，特别是频率计算，可能会把正的频率算成负的频率。提高 interations的确可以提高精度，特别是对于过渡态和频率计算。 总能和文献不一致，而且多种方法都不同 很正常，只要相对值近似就可以。 在倒空间进行电子结构计算的方法中,都存在一个能量零点的取法的问题,不同的程序,取的不同。根本原因是V(G)在G=0是发散的(可以去R.T. Martin的电子结构那本书)。 castep是利用周期性,在倒空间进行电子结构计算的.我没有记错的话,Dmol3是在实空间来进行电子结构计算的.能量零点的取法就跟不同前者了。 因此在进行电子结构计算中，不要比较任何绝对能量值的大小，这样是毫无意义的，即使是同一个程序中也是这样，更不用说是两个不同的程序。 能量的相对值才具有物理意义。 部分来自该文 。 CASTEP结果错报警信息是CASTEP结果中的出错报警信息，该信息的含义如下： Warning max. SCF cycles performed but system has not reached the groundstate.已完成最大SCF循环，但体系仍未到达基态。Current total energy, E = -3470.539604785 eVCurrent free energy (E-TS) = -3470.795901720 eV(energies not corrected for finite basis set) NB est. 0K energy (E-0.5TS) = -3470.667753253 eV上述三者分别为完成最大SCF循环后（即当前）能量值。** Warning: electronic minimisation did not converge when finding ground state.在搜寻基态过程中电子最小化并未达到收敛，]]></content>
      <categories>
        <category>DFT</category>
      </categories>
      <tags>
        <tag>castep</tag>
        <tag>ms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 中快速添加 hexo 文章]]></title>
    <url>%2F2018%2F03%2F13%2Fquick-add-a-essay-on-hexoSystem%2F</url>
    <content type="text"><![CDATA[在 hexo 添加新的文章的方式通常使用 new 命令新建一个 post ，然后编辑保存，或者直接使用编辑器新建保存，写了一个 shell 脚本实现便利地写文章。 所用的系统为 Linux mint ，markdown 编辑器为 typora 。 由于在 _post 中直接新建 md 文件需要自己手动天际 yaml 文件头，title 、date 等。而 cd 到 hexo 根目录后，使用命令 hexo new post &quot;title-of-essay&quot; ，即可在 _post 中创建预定样式的 md 文件，但是步骤略微繁琐。 通常的步骤： 1234cd blog #我的 hexo 博客目录hexo new post title-for-a-pagetypora ~blog/source/_posts/title-for-a-page.md &amp; 需要按的键比较多。 想到使用 shell 脚本，然后使用 alias 设置别名，爽歪歪。 脚本如下： 12345678#!/bin/bash read -t 600 -p "输入文章标题：" titlecd ~/blog dir=$(hexo new post $title | cut -d : -f 2)dir=$&#123;dir#*/&#125;cd ~ typora $dir &amp;exit 其中 600 是超时时间，单位秒，typora 为 md 格式编辑器。 编辑 bashrc 。 123456gedit .bashrc# 在最后添加alias ww='sh /home/rachpt/document/ww.sh &amp;&amp; exit'# 写上自己的路径，创建新的文件后自动关闭终端。ww 为自定义别名。 几点笔记：read 命令实现读取用后输入信息。变量赋值后面直接使用“=”，前后不能空格。使用前面的变量 使用$ + 变量名。管道运算符| 将前面命令的输出输入下一个可以接受标准输入的命令。cut 实现分片。#*/ 删除第一个/ 以及其前面的部分。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单使用 FFmpeg 压制视频]]></title>
    <url>%2F2018%2F03%2F12%2Fa-simple-example-of-FFmpeg%2F</url>
    <content type="text"><![CDATA[使用 FFmpeg 2pass 简单改小视频分辨率，降低音视频码率，以用于移动设备观看。 直接上命令： 12345ffmpeg -i in.mp4 -s 854x480 -c:v libx264 -preset slow -b:v 500k -pass 1 -an -f mp4 -y /dev/null #windows 最后使用 NULL，linux 使用 /dev/null。抑制输出。# -s 后面就是视频分辨率， b:v b:a 后面是相应码率。# &amp;&amp; \ 可以连接两句ffmpeg -i in.mp4 -s 854x480 -c:v libx264 -preset slow -b:v 500k -pass 2 -c:a aac -b:a 64k -strict -2 out.mp4# strict -2 参数由ffmpeg版本决定，旧的要，否则报错。 速度选项： ultrafastsuperfastveryfastfasterfastmedium – default presetslowslowerveryslow 12345-an : 不编码音频-vcodec : 设置视频的编码，我这里使用的是x264-b : 这个是码率-f : 强制使用格式-y : 自动输y确认 一条命令： 1nohup ffmpeg -i in.mkv -s 854x480 -c:v libx264 -preset slow -b:v 500k -pass 1 -an -f mp4 -y /dev/null &amp;&amp; ffmpeg -i in.mkv -s 854x480 -c:v libx264 -preset slow -b:v 500k -pass 2 -c:a aac -b:a 64k -strict -2 out.mp4 &gt;/dev/null 2&gt;&amp;1 &amp; 参考内容1 ， 参考内容2 。 使用脚本批量压制： 12345678910111213141516#!/bin/bash filelist=$(find *.mp4 *.mkv *.avi ! -name "*_480p.mp4" -a)OLDIFS="$IFS"IFS=$"\n"for filename in *.mp4 *.mkv *.avido nohup ffmpeg -i $filename -s 854x480 -c:v libx264 -preset fast -b:v 500k -pass 1 -an -f mp4 -y /dev/null &amp;&amp; \ ffmpeg -i $filename -s 854x480 -c:v libx264 -preset fast -b:v 500k -pass 2 -c:a aac -b:a 64k -strict -2 "$&#123;filename%.*&#125;"_480p.mp4 &gt;/dev/null 2&gt;&amp;1 donerm ffmpeg2pass*IFS=$OLDIFS 参考文档1 ， 参考文档2—nohup ，参考文档—find ，参考文档—IFS 。 find 使用有无，具体修改如下。 改进版，可以处理子目录下的所有 mp4 mkv avi wmv格式视频。 123456789101112131415161718192021222324#!/bin/bash rm -f nohup.outif [ ! -d finish ];then mkdir -p finishfifilelist=$(find \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" -o -iname "*.wmv" \) -a ! -name "*_480p.mp4")FOLDER=$(cd `dirname $0`; pwd)for filename in $filelistdo tempname=$&#123;filename##*/&#125; newfilename=$&#123;tempname%.*&#125; nohup ffmpeg -i $FOLDER$&#123;filename#*.&#125; -s 854x480 -c:v libx264 -preset fast -b:v 500k -pass 1 -an -f mp4 -y /dev/null &amp;&amp; ffmpeg -i $FOLDER$&#123;filename#*.&#125; -s 854x480 -c:v libx264 -preset fast -b:v 500k -pass 2 -c:a aac -b:a 64k -strict -2 finish/"$&#123;newfilename&#125;"_480p.mp4 &gt;/dev/null 2&gt;&amp;1 donerm -f ffmpeg2pass*exit 裁剪1ffmpeg -ss 00:00:00 -i in.mp4 -to 03:35:55 -vcodec copy -acodec copy -avoid_negative_ts 1 cutout.mp4 -i 需要在 -to 前面。 参考文章1，参考2。 字幕1ffmpeg -i input.mp4 -i subtitles.srt -c:s mov_text -c:v copy -c:a copy output.mp4 参考文档。 附录： mpv 几个快捷键 键 功能 &lt; 逐帧 播放，上一帧 &gt; 逐帧 播放，下一帧 M 静音 shift + &lt;— 退一秒 shift + —&gt; 进一秒 参考内容 。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决 mint 系统中 mendeley 无法使用 fcitx 输入中文]]></title>
    <url>%2F2018%2F03%2F12%2Fsolve-the-problem-of-cannot-inputting-Chinese-in-mendeley%2F</url>
    <content type="text"><![CDATA[自从使用了 mendeley 软件后各种不顺，万恶之源就是在 mendeley 中无法使用 fcitx 输入中文。 一开始的解决办法是换用 ibus 输入法，万般无赖，离开了使用良久的 fcitx，转向 ibus。先是 ibus 的 sunpinyin 无法设置使用双拼，然后是升级 libpinyin ，最后是尝试升级 ibus 本身，最后以失败告终，白白浪费时间罢了。 使用 ibus 最后连中文都无法输入，重启也无效。于是换回熟悉的 fcitx ，居然让我发现了解决 fcitx 与 mendeley 之间矛盾的方法。 最简单的解决办法： 123sudo cp /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so /opt/mendeleydesktop/plugins/qt/plugins/platforminputcontexts/# linux mint 18.3，基于 ubuntu 16.04 参考 此文 （ubuntu），以及 知乎 链接 。 拷贝 libfcitxplatforminputcontextplugin.so 到 mendeley 安装位置，debian和ubuntu的安装位置为： /opt/mendeleydesktop/plugins/qt/plugins/platforminputcontexts/ 重新启动mendeley即可发现中文可以输入了。 1234locate libfcitxplatforminputcontextplugin.so #找到系统中的libfcitxplatforminputcontextplugin.so#复制到 /opt/mendeleydesktop/plugins/qt/plugins/platforminputcontexts/ 目录下。 需要注意的是，在这之前，我使用新立得卸载了 ibus，不知怎么总是无法生效。于是在系统设置 —&gt; 输入法 中 安装简体中文的语言支持，也就是同时装好 fcitx 和ibus 后，重启。最后成功解决 fcitx 在 mengeley 中输入中文的问题。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>memdeley</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[努比亚 Z11 mini 换电池]]></title>
    <url>%2F2018%2F03%2F11%2Fchange-battery-for-nubiaZ11mini%2F</url>
    <content type="text"><![CDATA[年前就想换电池了，听说小米7快发布了，于是没换等mi7。现在看来mi7要等上一段时间了。所已淘宝买个电池换换，再战个半年。 准备工作 淘宝买电池： 随便找的 淘宝电池 ，41块大洋。 买来后东西挺多的， 使用工具： 只需要这三个工具 + 一个电吹风机。 刀子用来翘壳和电池的，需要十字螺丝刀。 拆后壳由于只有一个手机，所以没拍图片，网上找的图片修的。 使用吹风机加热后壳，变烫后直接用刀子在下面位置撬开小口。 注意避开卡扣位置。 需要注意的是，有如下三个地方使用了胶，特别是指纹区域附近，用卡片从 右侧 顶开胶。 小心指纹排线。 拆开上板使用螺丝刀拆掉摄像头所在区域的金属盖板，注意 保存螺丝。 从摄像头红圈上面部分翘起 盖板。 拆电池首先拆掉指纹排线 btb ，然后是电池的 btb。 两块黄色区域就是固定电池的双面胶尾巴。 用刀子或者 塑料片拆解电池（图片来自 优酷）。用吹风机加热电池四周以方便将其取下。 如果使用刀子，注意电池后面的排线，别划到了。 拆电池会使电池变形。 建议建议新电池先上排线 btb，开机测试，充电测试一下，没问题再关机装好还原。 最后， 附上拆下来的电池图。 以及比较。]]></content>
      <tags>
        <tag>nubia</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 设置开机自动打开数字小键盘]]></title>
    <url>%2F2018%2F03%2F11%2Flinux-allow-numlock-on%2F</url>
    <content type="text"><![CDATA[Linux mint 设置开机自动打开数字键盘锁 numlock。 因为开机密码是用的数字，每次开机或者重起系统后输入密码前总是需要手动打开Numlock开关，很麻烦，还没有指示器。于是想到让其开机自动打开省事。 linux mint 设置对于linux mint ，在系统设置 —&gt; 登录窗口 —&gt; 设置 中，有激活 numlock 开关，但是是不可用状态。 原因是需要安装一个软件： numlockx 1sudo apt-get install numlockx #安装好后，可能需要重起系统 设置好后，重起即可看到效果。 或则编辑 lightdm 的配置文件： 1sudo gedit /etc/lightdm/lightdm.conf 添加新行 123456[Seat:*]allow-guest=false #不允许访客登录系统greeter-show-manual-login=false #可以自己输入登录用户名greeter-hide-users=true #隐藏用户列表greeter-setup-script=/usr/bin/numlockx on #这一行自己加的，其他是系统设置时自动加的 这样等同于在设置中激活numlock 。 参考博文 。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>numlock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个关于 iBus 输入法的记录]]></title>
    <url>%2F2018%2F03%2F10%2Fnotes-for-solve-ibus-error%2F</url>
    <content type="text"><![CDATA[Mendely 的标注功能只支持 iBus 的中文输入，被迫从 Fcitx 改成 iBus。遇到一些问题，这里记录备忘。 Sunpinyin 无法打开首选项Linux mint 切换输入法还是很简单的，Fictx 和 iBus 一键安装。系统设置 —&gt; 语言 —&gt; 输入法 —&gt; 简体中文 点击安装即可。切换需要重启系统。 在终端中输入 1ibus-setup #设置 iBus 点击 Sunpinyin 首选项，报错如下： 1234Traceback (most recent call last): File "/usr/share//ibus-sunpinyin/setup/main.py", line 42, in &lt;module&gt; import ibusImportError: No module named ibus 提示没有 ibus 模块，网上搜到的解决办法如下： 从 https://ubuntu.pkgs.org/14.04/ubuntu-main-amd64/python-ibus_1.5.5-1ubuntu3_all.deb.html 下载deb安装即可。或则从 这里 下载。 原地址: ibus-setup-sunpinyin 无法打开设置 使用ibus-libpinyin相比 ibus-pinyin ，ibus-libpinyin 更新一些。可能会更好。源码地址： https://github.com/libpinyin/ibus-libpinyin 安装很是费劲，最后更新到 IBus 智能拼音 1.9.3 后居然直接不能用来，使用 apt 安装的是1.7.3 （mint 18.3）。 安装参考 在debian stretch上编译安装ibus-libpinyin(V1.7.3)过程记录 。 核心思想：提示缺少啥依赖，就安装啥。如 name 的依赖缺少，就找 libname-dev 的包。 其中 libdb4.8-dev 的部分 直接使用 sudo apt install libdb5.3-dev 解决的（mint 18.3）。 关于libpinyin， 在 github 上下源码编译 make 老是报错，最后直接 在此 下载现成的解决的。 libpinyin 使用./autogen.sh --prefix=/usr 加上路径安装。默认在 /usr/local 目录下，自带 share 。装错 直接 rm 删掉即可。 好气，转好后居然不能用。 软件能用坚决不要强行更新ibus 有个下bug，不能一直显示输入法状态，于是想到更新软件版本解决，从源码编译，麻蛋，一个又一个的依赖缺失，最后make还是失败了。从deb安装，直接提示部分核心组件需要升级，😂，而核心组件的升级除非我升级底层系统。所以最后只好换回原来版本。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ibus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next 主题设置]]></title>
    <url>%2F2018%2F03%2F05%2Fsettings-for-next-theme%2F</url>
    <content type="text"><![CDATA[记录几个修改，方便以后升级主题后更新。 目前 next 版本：6.0.5 。 文章加密打开themes-&gt;next-&gt;layout-&gt;_custom-&gt;head.swig文件(默认路径)插入 JS 脚本： 12345678910&lt;script&gt; (function()&#123; if('&#123; &#123; page.password &#125; &#125;')&#123; if (prompt('请输入文章密码') !== '&#123; &#123; page.password &#125; &#125;')&#123; alert('密码错误！返回上页'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 使用：12345678---title: date: 2018-03-05 19:37:08tags:categories:top: #顶置password: #密码--- 没什么卵用，查看源码一切都暴露了。 添加 DaoVoice打开themes-&gt;next-&gt;layout-&gt;_custom-&gt;head.swig文件(默认路径)插入JS： 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123; &#123;theme.daovoice_app_id&#125; &#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; 首先在 daovoice 注册账号，邀请码是0f81ff2f,注册完成后会得到一个 app_id ： 123# Online contact daovoice: truedaovoice_app_id: &quot;刚才获得的 app_id&quot; 自定义css打开themes/next/source/css/_custom/custom.styl ： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// Custom styles.// 主页文章添加阴影效果 （不利于移动端）/* .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 15px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125;*/// 鼠标样式 * &#123; cursor: url("/images/sword2.ico"),auto!important &#125; :active &#123; cursor: url("/images/sword1.ico"),auto!important &#125; // DaoVoice 图标透明 .daodream-launcher-button, .daodream-launcher-maximized, .daodream-launcher-with-initials &#123; opacity:0.3; -moz-opacity:0.3; opacity: 0.3; &#125; #daodream-launcher &#123; opacity:0.1; -moz-opacity:0.1; opacity: 0.1; &#125; div.daodream-launcher-preview &#123; opacity:0.9 !important; -moz-opacity:0.9 !important; opacity: 0.9 !important; &#125; #daodream-launcher:hover &#123; opacity:0.9 !important; -moz-opacity:0.9 !important; opacity: 0.9 !important; &#125; .daodream-launcher-button:hover, .daodream-launcher-maximized:hover, .daodream-launcher-with-initials:hover &#123; opacity:0.9 !important; -moz-opacity:0.9 !important; opacity: 0.9 !important; &#125;// Valine 和 algolia 和 DaoDream 去除 Powered By div.info, span.algolia-powered, div.daodream-powered-by &#123; visibility: hidden !important; height: 0 !important; &#125; div.txt-right&#123; visibility: hidden !important; height: 0 !important; &#125; 统计字数&amp;阅读时间至hexo根目录，安装 hexo-symbols-count-time ： 1sudo npm install hexo-symbols-count-time --save 至 hexo 的 _config.yml 添加： 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 至 next 主题 的 _config.yml 修改： 123456symbols_count_time: separated_meta: &lt;span style=&quot;color: red&quot;&gt;true&lt;/span&gt; item_text_post: true item_text_total: false awl: 5 wpm: 200 hexo-reading-time 和 hexo-worcount 已经弃用。 站点访问量直接配置 next 主题： 12345678busuanzi_count: enable: &lt;span style=&quot;color: red&quot;&gt;true&lt;?span&gt; total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 或者自己改文件： 在 /home/rachpt/blog/themes/next/layout/_partials/footer.swig 最后添加代码： 1234567&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;&lt;div&gt; &lt;i class="fa fa-user-md"&gt;&lt;/i&gt; 本站总访问量：&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt; &amp;nbsp;| &amp;nbsp; &lt;i class="fa fa-eye"&gt;&lt;/i&gt; 本站访客数：&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt; &lt;/div&gt; 头像旋转在\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，里面添加如下代码： 1234567891011121314151617181920212223242526272829303132333435363738 /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;/* 鼠标经过头像旋转360度 */img:hover &#123; -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 添加 “本文结束”创建。在路径 \themes\next\layout\_macro 中新建 post-end-tag.swig 文件,并添加以下内容： 1234567&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;&#123;# #&#125;&#123; &#123; __(theme.post_end_tag.contents) &#125; &#125;&#123;# #&#125;&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 修改。接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码。 12345&#123;% if theme.post_end_tag.enabled and not is_index %&#125; &lt;div&gt; &#123;% include 'post-end-tag.swig' %&#125; &lt;/div&gt;&#123;% endif %&#125; 参数。主题配置文件（theme/next/_config.yml)末尾添加： 123post_end_tag: enabled: true contents: ---------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢阅读--------- 内容可以自定义。本人参考 hexo的next主题个性化配置教程 修改。 顶置修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为： 12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 使用：（数值越大文章越靠前） 1234567---title: date: 2018-03-05 19:37:08tags:categories:top: #顶置--- 添加侧边栏音乐播单 下载所需文件： ​ 长显+连续播放+右键音量控制 OR ​ 长隐+连续播放 ​ 备用下载播放器 密码：oznd 设置 hexo 配置文件 _config.yml : 123skip_render: - 404.html #跳过404页面 - static/** #跳过static目录下的所有内容，注意是两个*号。 先复制 下载文件中的 四个文件夹至 source/static 。然后将 _my 文件夹移动到 /themes/next/layout 。 使所有页面都能播放，在 /themes/next/layout/_layout.swig 的 &lt;/body&gt; 前添加 1&#123;% include &apos;_my/audio.swig&apos; %&#125; 至/themes/next/_config.yml 主题配置文件末尾添加： 1234567891011121314# musicaudio: enable: true sources: [ &#123; title: '....', artist: '....', mp3: '......mp3', cover: '.....jpg' &#125;, &#123; title: '.....', artist: '......', mp3: '.......mp3', cover: '.....jpg' &#125; ] 其他： 注释掉 source/static/js/player.js的$(&quot;div.ssBtn&quot;).click() ，播放器就不会一直弹出。 12345678910source/static/js/player.jsvar setProgress = function (value) &#123; var currentSec = parseInt(value % 60) &lt; 10 ? '0' + parseInt(value % 60) : parseInt(value % 60), ratio = value / audio.duration * 100; $('.timer').html(parseInt(value / 60) + ':' + currentSec);+ localStorage.time = value //储音乐的播放状态+ localStorage.song = currentTrack //储音乐的播放状态&#125; sessionStorage.autoPlay = &quot;true&quot; 控制自动播放。 123456789101112131415161718var FirstLoad = function (i, time) &#123; if (i == undefined) &#123; i = 0 currentTrack = 0 shuffleIndex = 0 &#125; loadMusic(i) if (time) &#123; audio.currentTime = time &#125; if (localStorage.volume) &#123; audio.volume = localStorage.volume &#125; if (sessionStorage.autoPlay == undefined) &#123; sessionStorage.autoPlay = "true" &#125;&#125; 设置 参考 。]]></content>
  </entry>
  <entry>
    <title><![CDATA[next 主题使用笔记——标签]]></title>
    <url>%2F2018%2F03%2F05%2Ftest%2F</url>
    <content type="text"><![CDATA[记录 hexo-theme-next 一些使用技巧，自用。 版本要求 0.4.5+ 。 引用文字居中1&#123;% cq %&#125; 文本居中引用&#123;% endcq %&#125; #简洁的写法 cq = centerquote 文本居中引用 大图片 图片将自动扩大 26%。 1&#123;% fi /image-url, alt, title %&#125; # fi = fullimage note 标签 http://getbootstrap.com/ 至next主题配置文件上设置： 1234567note: style: simple # modern # flat # disabled icons: false border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 使用： 123456789&#123;% note class_name %&#125; Content (支持部分 md 格式) &#123;% endnote %&#125;class_name 使用： default primary success info warning danger default 样式 (支持部分 md 格式) primary 样式 (支持部分 md 格式) success 样式 (支持部分 md 格式) info 样式 (支持部分 md 格式) warning 样式 (支持部分 md 格式) danger 样式 (支持部分 md 格式) 插入视频使用： 12&lt;video src=&apos; &apos; type=&apos;video/mp4&apos; controls=&apos;controls&apos; width=&apos;100%&apos; height=&apos;100%&apos;&gt;&lt;/video&gt; 音乐使用： http://saili.science/2017/05/30/music/ 12&lt;audio controls=&quot;controls&quot; playsinline=&quot;&quot; webkit-playsinline=&quot;&quot;&gt; &lt;source src=&quot;http://other.web.nf01.sycdn.kuwo.cn/resource/n2/40/14/3065311430.mp3&quot; type=&quot;audio/mpeg&quot;&gt; &lt;/audio&gt; Tabs 标签至 next 主题配置中启用： 1234567# Tabs tag.tabs: enable: true&gt; transition: tabs: true labels: true border_radius: 0 使用： 1234567891011&#123;% tabs 选项卡[标题], 2 %&#125;&lt;!-- tab --&gt;**这是选项卡 1**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**我是选项卡 2**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**就是选项卡 3 了**&lt;!-- endtab --&gt;&#123;% endtabs %&#125; , 2 从第二个开始。 选项卡[标题] 1选项卡[标题] 2选项卡[标题] 3这是选项卡 1 我是选项卡 2 就是选项卡 3 了 1234567891011&#123;% tabs Fifth unique name %&#125;&lt;!-- tab @text-width --&gt;**This is Tab 1.**&lt;!-- endtab --&gt;&lt;!-- tab @amazon --&gt;**This is Tab 2.**&lt;!-- endtab --&gt;&lt;!-- tab @bold --&gt;**This is Tab 3.**&lt;!-- endtab --&gt;&#123;% endtabs %&#125; This is Tab 1.This is Tab 2.This is Tab 3. https://almostover.ru/2016-01/hexo-theme-next-test/]]></content>
  </entry>
  <entry>
    <title><![CDATA[新博客地址]]></title>
    <url>%2F2018%2F03%2F03%2Fmy-new-blog%2F</url>
    <content type="text"><![CDATA[已经对 wordpress 无止境的更新无语了，慢慢迁移至 Github Pages &amp; Coding Pages。 永久地址： https://rachpt.github.io ，已经重定向至 https://rachpt.me 。 https://rachpt.coding.me ，已经重定向至 https://blog.rachpt.me 。 &nbsp; 以后有可能 重定向到这个域名。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Gimp 简单使用笔记]]></title>
    <url>%2F2018%2F03%2F03%2Fgimp-simple-notes%2F</url>
    <content type="text"><![CDATA[记录一些 Gimp 常用操作，力求简洁明了。 画矩形框 选用矩形选择工具 (快捷键R) ，选区。 编辑 —&gt; 勾画选区。 画笔工具使用 快捷键 P 进入画笔工具，临时使用拾色器工具 （吸管工具）快捷键 ctrl + 鼠标左键； 与此对比，PS 使用 b 进入画笔工具，使用 alt 取色。两者 画笔放大缩小 快捷键一致，[ ] 。 放大缩小GIMP 和 PS 一样使用 Z 进入缩放zoom。不同处， ps 按住z 键 同时按住鼠标左键左右拖动实现缩放；双击左侧工具栏上的 抓手工具 或者 缩放工具 画面大小自适应。 而GIMP 不同，任意界面 按住 ctrl 键，使用鼠标滚轮实现缩放。 选区浮动ps 里面只需选中对象，直接鼠标即可拖动。Gimp里面需要先将选区浮动，然后才能移动，快捷键 ctrl + shift + L，或者右键、选择(直接工具栏点击也行)、浮动。移动玩后需要将浮动选区创建到新图层(不再修改，固定到图层也可以)，才能换其他图层。 旋转选区快捷键 shift + R，特别地，直接 R 是矩形选择工具，比较常用，M 移动工具，按住空格不放，临时移动。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>gimp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pycharm please specify a different SDK name]]></title>
    <url>%2F2018%2F03%2F03%2Fpycharm-please-specify-a-different-SDK-name%2F</url>
    <content type="text"><![CDATA[设置 pycharm 保存时， 报错：pycharm please specify a different SDK name ，网上找到解决办法，这里记录一下，备用。 产生原因之前创建过两个相同的 project。比如先建一个 project，觉得不好，删掉再建，手残有时刚刚删掉的project，就会出现这个错误。两个现有虚拟环境具有相同的名称，于是无法设置解释器。 解决办法打开 settings ，在project interpreyer 里面，show all 。 选择有红色警示符的项，删掉即可。 参考： PyCharm 2017.3 Help 。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Materials Studio CASTEP 迭代次数设置]]></title>
    <url>%2F2018%2F03%2F02%2Fms-scf-max-iterations%2F</url>
    <content type="text"><![CDATA[今天遇到 Materials Studio cij 计算失败，提示基态电子最小化失败。检查输出文件，发现蛛丝马迹。 错误信息1234Error check_elec_ground_state : electronic_minimisation of initial cell failed.Current trace stack: check_elec_ground_state castep 检查castep 文件发现下面的片段 1234567891011121314... 99 -2.09594982E+004 6.31070540E-001 3.18129596E-006 4013.01 &lt;-- SCF 100 -2.09594980E+004 6.31017470E-001 -2.41328571E-006 4053.95 &lt;-- SCF------------------------------------------------------------------------ &lt;-- SCF *Warning* max. SCF cycles performed but system has not reached the groundstate. Current total energy, E = -20959.33865776 eVCurrent free energy (E-TS) = -20959.49797103 eV(energies not corrected for finite basis set) . . . 意思大概是我设置的 SCF 迭代次数不够，100次后仍然未能找到自恰解。 回想使用步骤皆是以前的所用的，马上翻看之前成功的castep文件， 12345678 13 -2.78030685E+004 -1.99686373E+000 -7.49554981E-007 898.41 &lt;-- SCF 14 -2.78030685E+004 -1.99941165E+000 4.13854537E-008 943.16 &lt;-- SCF 15 -2.78030685E+004 -2.00267847E+000 -2.65786251E-007 988.60 &lt;-- SCF------------------------------------------------------------------------ &lt;-- SCF Final energy, E = -27803.06847596 eVFinal free energy (E-TS) = -27803.06847596 eV(energies not corrected for finite basis set) 几乎都是十几次得到自恰解。 找到问题所在。 迭代次数我不是设置的500 么回到 windows 版的MS，检查设置。我勒个去，Geometry Optimization 的 Max.iterations是500没错，但是Elastic Constants 的 Max.iterations还是默认的100。 还有 SCF 迭代次数可以设置。 问题有可能就在这里，提高迭代次数上线，有可能能够收敛，也有可能不能，白白浪费时间。 截断能、k点、自旋、对称性等都有可能影响收敛。 没办法，只能试试看了。 后续如果解决，会详细记录。]]></content>
      <categories>
        <category>DFT</category>
      </categories>
      <tags>
        <tag>castep</tag>
        <tag>ms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 使用笔记-01]]></title>
    <url>%2F2018%2F01%2F27%2Fwindows-note-01%2F</url>
    <content type="text"><![CDATA[首先得知道windows这玩意儿是啥。或许很多人已将将windows和PC电脑画等号了，这显然是不对的。windows是巨硬推出的一款带图形界面的操作系统，我们买的电脑或者笔记本大部分钱用于硬件上，几户所有预装系统的笔记本都是最便宜定置性最差的windows家庭版（或则家庭中文版）。于是逻辑上而言，装系统将是使用windows的第一步，对于小白用户，老老实实用你的windows家庭版（或许你都不知道自己的系统是啥，和别人的有啥区别，囧）。 目前而言，可以考虑安装的windows有三个 大版本：win7,win8.1,win10。win7应该很快进入与xp一样的停止支持的状态，而win8.1真心不适合桌面平台，win10将是我最先推荐的。现在几户所有的电脑都是64位的处理器了，除非老爷机。（对于win10 右键此电脑，属性 即可看到如下所示信息页面，或则在 资源管理器 中右键点击 属性） 32位windows系统最大只支持3.6G左右的内存，如果你有4G或以上内存，请不要考虑32位系统。32位系统也有它自己的优点，小就是一个，32位系统可以节省系统安装空间30%-40%，32位系统当然是不支持64位应用程序的，同一个软件32位版与64版运行效率相当，能用64的我当然是推荐使用64的。 如果你是考虑兼容性，在win7 与win10之间无法决则，我几乎可以告诉你兼容性几乎不用考虑，除非你要使用老掉牙的旧软件，或者是某些特别偏的久久未更新的行业（小众）软件。win10 几乎支持能用到的所有软件。 如果你还是要使用win7，那么没必要非旗舰版不可，对于普通用户而言可能专业版就很不错了，一是安装体积较旗舰版小上不少，再则你永远用不到的旗舰版的功能也没必要占用你本来就不多的硬件资源。 win8.1 我们直接忽略，一是安装体积较win7、10都大上不少（是win10的1.5倍），开始屏真的不适合桌面用户，还有那厚厚的程序边框（用过win10的窄边后你会觉得8.1很丑）[我会告诉你有软件可以修改，但是还是没有win10一个像素窄]。 至于win10，如果你是变形本，比如surface之类有触控屏的笔记本，并且想体验完整的windows服务，那么pro专业版或者enterprise企业版将是你最好的选择，教育版和企业版类似。对于普通user而言pro专业版就够了。家庭版没有本地策略组，很多必要的功能没有，所有强烈建议不要使用家庭版系统（谁用谁知道：开机，尼玛，正在安装系统更新，重启，靠，更新失败，正在回滚，重启；关键是这是一个循环，以后还会这样）。 对于普通笔记本与台式机，如果你不用巨硬的uwp应用，并且不是edge浏览器的忠实粉丝（谁会用这玩意儿啊，体验太差！）。那么 windows 10 LTSB 企业长期服务支持版 将是最好的选择。推荐理由如下： 原生无应用商店哪些没卵用的东西； 无edge浏览器，有IE，不用考虑兼容性，有些网银必须这货才能用； 更新少，稳定性高（当然可以设置禁用自动更新）。LTSB目前有两个分支：ltsb 2015 和 ltsb 2016（这两个是独立维护不一样的）。推荐笔记本使用2016，台式机使用2015。理由： 2016 系统自带wifi热点（你非要用猎豹wifi，我无话可说）与护眼模式（第三方软件也可以实现），这两点笔记本比较需要。同时开始菜单较2015版有一点改变，16的更方便些。 2015 的软件兼容性可能更好，比如好用的KClock只能在2015上用，2016及其以上不行。[win + x]和2016有区别，个人觉得2015的更方便。至于你一直关心的激活，除win7外，都只能 KMS激活180天（激活软件都贴心的做了定时重新激活，所以一次激活后你就不用管了，至于软件文末给链接），系统镜像下载，推荐百度 i tell you 或则记住这个 http://msdn.itellyou.cn/ 。 点击详情，复制 ed2k 链接至百度云离线下载，然后使用工具从百度网盘下载即可得到系统镜像文件。 推荐使用U盘全新安装。win10 的系统可以直接挂载镜像复制里面的全部内容至一个格式化的U盘即可完成启动盘的制作。无需向win7一样必须使用工具刻录制作启动盘。如果你不放心，可以使用这个免费的工具 Rufus http://rufus.akeo.ie/ 。U盘格式一般使用fat32即可，其他的NTFS、exfat也行。 一本正经地系统安装开始。 开始前备份好需要的文件。如果你有固态硬盘，推荐固态硬盘不要分区（自己百度分区脑补），机械的建议不要分太多，两个不能再多了。 可能还有UEFI引导是大多数新手的困惑，UEFI引导需要配合GPT分区（如果有固态，这个是必须的！才能发挥固态的优势）。能使用UEFI则尽量使用。如果安装中发现 以前分区是MBR格式，如果无重要文件可以全盘格式化变成GPT格式分区，如果有重要分区不能格式化，找个PE系统，进去点点点几下就可以轻松转换格式，具体自己百度。 鉴于windows的运行机制，个人建议固体硬盘留给C盘做系统盘，机械硬盘一个分区用作数据存储。如果只有一个机械硬盘，要安装的软件少，则100G给C盘，其他做数据存储。让C盘的空间使用率在60%或许是比较合适的。 具体而言，不同的主板进入BIOS的方法可能不一样，大部分是使用F2 进入BIOS设置。装系统，需要关闭有个 security 啥的，允许 使用USB boot 引导 使用 UEFI，可以设置U盘的引导顺序为第一个，F10保存重启，如果不知道如何进入boot manager 的话。如果一切顺利，重启选择重USB引导启动进入安装界面，一路点点点，设置分区大小，会自动重启几下，随后系统就算是全新安装好了。如果你是个懒人，可以考虑双击setup 进行升级安装，但只能升级对应版本系统，并且升级后极有可能有一些莫名其妙的小bug，不推荐。 win10 全系列+office 激活工具（最好的激活工具）： 蓝奏云盘: https://pan.lanzou.com/i0fg1tg 度盘链接: https://pan.baidu.com/s/1mjbPqm0 密码: rach 至于后续，会有其他windows系列教程上线，敬请期待。]]></content>
      <categories>
        <category>实用</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下的PDF阅读软件Zathura]]></title>
    <url>%2F2018%2F01%2F22%2Flinux-pdfreader-zathura%2F</url>
    <content type="text"><![CDATA[记录 zathura 的常用设置与技巧，vim党的最爱。 关于安装： archlinux 请看 https://wiki.archlinux.org/index.php/Zathura ; ubuntu 系 sudo apt install zathura；或则源码编译安装 https://github.com/pwmt/zathura 。 配置若配置文件不存在则需要自己手动创建。 用户配置文件路径 ~/.config/zathura/zathurarc； 全局配置文件路径 /etc/zathurarc； 常用配置使用 vim ~/.config/zathura/zathurarc 添加下面的配置命令，#号以及后面为注释。 1234567891011121314151617181920212223242526#以宽度自适应打开set adjust-open "width"#字体与字号set font "Noto Sans CJK SC Regular 10"#GUI相关，留空可隐藏底部statusbarset guioptions ""#只显示文件名，否则显示完整路径set window-title-basename true#增强搜索，实时搜索set incremental-search true#显示右侧进度条set show-v-scrollbar true#粘贴版set selection-clipboard clipboard#默认高度，像素set window-height 760#默认宽度set window-width 1300 更多可以参考：https://github.com/lervag/dotfiles/blob/master/zathura/.config/zathura/zathurarc 默认打开方式的路径# linux mint 18.3 设置默认打开方式， # 如果右键无效可使用下面方法 /etc/gnome/defaults.list #保存全局打开方式路径 /usr/share/applications #保存，这两个是一样的 ～/.config/mimeapps.list #用户 # 添加 application/pdf=xpdf.desktop 常用快捷键f 高亮链接，按 相应数字 打开链接 q 退出 r Rotate the page 旋转 R Reload the document 重载 space 下滚半页 # ^ 代指 ctrl 键 ^r inverted color /反色 ^n Toggle statusbar visibility 状态栏开关 ^m Toggle inputbar visibility 输入栏开关 # 下面快捷键与 vim 一样 ^f Scroll page down 下一屏 ^b Scroll page up 上一屏 ^d Scroll half a page down 下半屏 ^u Scroll half a page up 上半屏 数字 + G 跳转对应页码 gg 最前 GG 最后 命令:bmark xxx 创建书签xxx （长书签） :blist xxx 打开bookmark :bdelete xxx 删除书签 :info 显示文档信息 # 下面命令和 vim 类似 :q 退出 /word 搜索word，使用 n / N 跳到下一个(上一个)结果， ?word 搜索 向前（向后） 短命令书签 使用 a letter or number ，先按 m 键，然后按短书签名，创建； 跳转先前的短书签，先按 &#39; 键，然后先前的字母或数字； 关于复制问题 I discovered that zathura is using the x11 primary selection as default instead of the actual clipboard. This can be changed by creating a ~/.config/zathura/zathurarc file with the following content: 1set selection-clipboard clipboard 具体见 https://github.com/zegervdv/homebrew-zathura/issues/5 部分参考 http://80x86.io/post/pdf-viewer-for-linuxer 截图 其他如果需要对 pdf 进行标注，KDE桌面 推荐 Okular，其他桌面环境推荐 福昕阅读器。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 更新 xz 至 5.2+]]></title>
    <url>%2F2018%2F01%2F13%2Fubuntu-update-xz-to-5-2%2F</url>
    <content type="text"><![CDATA[xz 是啥，以前觉着7z就已经到顶级了，原来还有更厉害的xz压缩。 具体见知乎 谁才是压缩的王者？7z 还是 xz 。 了解到 xz 5.2 以上才支持多线程，而ubuntu 默认的xz不支持多线程，于是升级xz。 下面是记录升级方法： 到 https://launchpad.net/ubuntu/+source/xz-utils/5.2.2-1.3/+build/13082764 下载 liblzma5_5.2.2-1.3_amd64.deb (88.7 KiB)安装即可 使用xz -V 命令查看 xz版本。]]></content>
      <categories>
        <category>实用</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux mint 安装 Materials Studio 8.0 与使用 CASTEP]]></title>
    <url>%2F2018%2F01%2F11%2Finstall-materials-studio-on-ubuntu%2F</url>
    <content type="text"><![CDATA[linux mint 是基于ubuntu的，所以对ubuntu也应该是有效的。（推荐 desktop 使用 mint cinnamon 版） 安装简要步骤setp1. 安装 rpm2cpio step2. 使用 bash csh step3. sudo ./install /opt/ms80 step4. cd /opt/ms80/LicensePack/etc step5. sudo ./lp_config step6. sudo ./lp_echovars step7. sudo ./install /opt/ms80 y # OK! It work’s! # 最好安装到自己的家目录 更新 2018.01.12安装到自己的家目录（/home/user）重启后才有用，无需 sudo。 使用 bash 很重要，不能使用 ubuntu默认的 dash，否则软件无法安装，无法运行！ 12# 查看使用的默认 shell 是啥。ls -l /bin/sh ubuntu 采用的是 dash （theDebian Almquist Shell），而非 bash （GNU Bourne-Again Shell，大多数 linux 默认使用这个作为默认shell）。 修改默认的sh。 1sudo dpkg-reconfigure dash 然后选择【否】 完成修改。 参考1 ，bash与dash 区别 。 自己看 install.log , 并设置开机自动启动 gateway 。 12# 设置开机启动/home/rachpt/Accelrys/MaterialsStudio8.0/etc/Gateway/gwstart 浏览器 http://127.0.0.1:18888 查看是否成功。 使用方法1234567~/Accelrys/MaterialsStudio8.0/etc/CASTEP/bin/RunCASTEP.sh -np 8 "you ms_job path/name" # 不要 param 后缀的 param 文件名。# 例子nohup /home/rachpt/Accelrys/MaterialsStudio8.0/etc/CASTEP/bin/RunCASTEP.sh -np 7 PMA2PbI4 &amp;# nohup ... &amp; 由于后台运行，# 7 表示CPU 核心数，# 由于是在 PMA2PbI4 任务的文件夹中打开的终端，所以任务直接使用 相对路径。]]></content>
      <categories>
        <category>linux</category>
        <category>DFT</category>
      </categories>
      <tags>
        <tag>castep</tag>
        <tag>ms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 免安装程序配置]]></title>
    <url>%2F2017%2F12%2F31%2Fsetting-protable-program-on-linux%2F</url>
    <content type="text"><![CDATA[给黑程序上户口。适用于基于debian 的 ubuntu ，以及 linux mint（强烈推荐）。 Linux 创建程序图标Debian 这类linux的软件包是 deb 后缀，这是一种类似 windows 下的 exe 安装包文件，除此之外，还有一种一文件夹形式存在的软件包，其中的 xxx.sh 就是软件的可执行文件，类似与 windows 软件安装完成后其目录中的 exe 文件（软件快捷方式就是链接到这类文件的），这就如同 windows 平台的绿色免安装软件。 linux 用户软件一般放到 /opt/ 目录，下面以pycharm-edu 为例： 1234sudo mv -f pycharm-edu /opt/ # 使用命令移动文件# 然后到 /usr/share/applications/ 目录下创建 .desktop 文件sudo touch /usr/share/applications/pycharm.desktop #创建空文件，当然也可以不创建，下马一步保存时可以创建。sudo gedit /usr/share/applications/pycharm.desktop #在其中写如如下内容 12345678[Desktop Entry]Version=1.0Name=pycharm #显示的名字Exec=/opt/pycharm-edu/bin/pycharm.sh #软件路径Terminal=falseIcon=/opt/pycharm-edu/bin/pycharm.png #软件图标Type=ApplicationCategories=Development #软件分类 保存即可，如果需要加入环境变量（直接在terminal中输入软件名字，即可打开软件），需要进行如下操作。 加入环境变量方法一配置用户主目录下的.profile或.bashrc文件（推荐）， 登录到你的用户（非root），在终端输入：1sudo gedit ~/.profile #(or .bashrc) 在文件末尾加入PATH的设置如下：1export PATH=”$PATH:your path1:your path2 ...” 保存文件，注销再登录，变量生效。该方式添加的变量只对当前用户有效。​ 方法二在系统目录，进行类似操作。12/etc/profile/etc /environment 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。]]></content>
      <categories>
        <category>实用</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>mint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 学习笔记]]></title>
    <url>%2F2017%2F12%2F18%2Fnotes-for-ubuntu%2F</url>
    <content type="text"><![CDATA[记录一些学习ubuntu要点，力求实用。 常用系统命令 getconf LONG_BIT 查看系统位数。 uname -a 更详细的方法。 lsb_release -a 系统详细版本情况。 w 当前谁在登录。 last 查看登录记录。登录信息记录在二进制 /var/log/wtmp文件中。 ~/.bash_history 中记录所有输入的命令。 &amp; 后台运行。 ctrl + Z 暂停并放到后台。 ctrl + C 结束正在运行的任务。 jobs 查看后台有多少任务，kill %num 结束任务，num为任务号。 fg 后台任务调至前台并继续。 bg 继续后台任务。 kill -p xxx 强制 结束 xxx 进程 ps -t pts/3 查看pts/3的所有进程 python 配置 python3 --version 查看安装python版本，如果是3的； sudo apt-get install python3-pip 安装 pip ; pip -V 检查pip； 基于用户的默认版本切换方法 123456789ls /usr/bin/python* #显示所有 pythonvim ~/.bashrc #编辑配置文件#添加如下行 ，alias，别名。路径以上面显示的为准。alias python='/usr/bin/python3.5' #改成需要的版本sudo pip install --upgrade pip # 升级pip show requests # 查看模块安装位置 解决：Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build* 1234sudo pip2 install setuptools# 或则sudo easy_install -U setuptoolssudo pip install setuptools apt-get 使用ipv4有时，您需要在APT包中禁用IPv6，只有在需要时，其他程序可以继续使用IPv6。 要在APT中禁用IPv6，请运行以下命令为APT创建一个配置文件。 1sudo vim /etc/apt/apt.conf.d/99force-ipv4 将以下行复制并粘贴到文件中。 1Acquire::ForceIPv4 "true"; 12345678910111213141516apt-cache search package 搜索软件包apt-cache show package 获取包的相关信息，如说明、大小、版本等sudo apt-get install package 安装包sudo apt-get install package --reinstall 重新安装包sudo apt-get -f install 修复安装sudo apt-get remove package 删除包sudo apt-get remove package --purge 删除包，包括配置文件等sudo apt-get update 更新源sudo apt-get upgrade 更新已安装的包sudo apt-get dist-upgrade 升级系统apt-cache depends package 了解使用该包依赖那些包apt-cache rdepends package 查看该包被哪些包依赖sudo apt-get build-dep package 安装相关的编译环境apt-get source package 下载该包的源代码sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包sudo apt-get check 检查是否有损坏的依赖 linux 常用编辑器vi (visual editor, ex编辑器的改进版)属于 Unix 系统基本编辑器(部分 Linux 发行版都把 vi 映射到 vim,还有部分会把 vi 映射到 ex)，除此之外，有些发行版还会预装nano编辑器。 vim (vi) 命令vim 是 vi 的增强版（vi improved）,vi 又是 ex 编辑器的改进版，visual editor。 这里多说一点 大多数 Linux 发行版不包含真正的 vi；而是自带一款高级替代版本，叫做 vim（它是“vi improved”的简写）由 Bram Moolenaar 开发的。vim 相对于传统的 Unix vi 来说，取得了实质性进步。通常，vi 在 Linux 系统中是“vim”的符号链接（或别名）。 在随后的讨论中，我们将会假定我们有一个叫做“vi”的程序，但它其实是 vim。也有写系统将 vi 软连接到 ex 上，manjaro 就是如此。 参考文档。 基础 命令 功能 ESC 切换到命令(普通)模式 a A i I 这是个键在命令模式下却换到编辑模式 区别在于插入位置不同，常用 i 。 o O 在光标下一行、上一行插入新行， x 删除光标所在字符， dd 删除光标所在行，(操作符两次 作用于当前行)， 2dd d2d 两者一样，删两行，数值表示作用范围，后面的操作符也有类似操作， cc 删除当前行，并进入插入模式， ZZ 保存并退出(和 ：wq 一样，vim 特有)， ZQ 不保存退出(和 ：w 一样)。 底行命令使用 : 键进入(和 EX 模式很像, EX 使用 Q 进入, visual 可退出)， 命令 功能 :wq 保存并退出， :w 只保存，不退出， :q！ 退出不保存， 常用设置 命令 功能 :set nu 显示行号(nu, number 一致)， :set hls 高亮搜索匹配项，取消加 no，:set nohls，hls=highlightsearch u 可以撤销一次操作， ctrl + r 反撤销， 行号 + G 跳转到相应行， gg 到文件首行， G 到文件尾部行， w 跳转一个单词(光标cursor在单词头部)，常在操作符后面表示范围，如 dw 删光标所在至单词尾， cw 删除并进入插入模式。 b 和 w 方向相反 大写形式 跳转一个大单位，空格分割 e 和 w 一样，只是光标在单词尾部 r 替代光标处字符(一个) R 和 Insert 键效果一致 set backspace=2 插入模式能使用backspace 键 删除， 替换语法为 :[addr]s/源字符串/目的字符串/[option] 命令 功能 :s/vivian/sky/ 替换当前行第一个 vivian 为 sky :s/vivian/sky/g 替换当前行所有 vivian 为 sky 全局替换命令为 :%s/源字符串/目的字符串/g [addr] 表示检索范围，省略时表示当前行。 如： 命令 功能 1，20 表示从第1行到20行； % 表示整个文件，同“1,$”； . ,$ 从当前行到文件尾； s 表示替换操作 [option] 表示操作类型 g 表示全局替换; c 表示进行确认; p 表示替代结果逐行显示（Ctrl + L恢复屏幕）； 省略option时仅对每行第一个匹配串进行替换； 如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义 下面是一些例子： 将That or this 换成 This or that:%s/\(That\) or \(this\)/\u\2 or \l\1/ 复制12:9,15 copy 16 :9,15 co 16 将第9行到第15行的文本内容 复制 到第16行的后面 。 移动12:9,15 move 16 :9,15 m 16 将第9行到第15行的文本内容 移动 到第16行的后面 。 批量注释与反注释 v 进入 virtual 模式， 上下选择，ctrl + v 进入列模式， 使用大写 I，行首插入模式，输入 “#,// 等”， 然后 按 两次 ESC ！ 反注释，类似，i 换成 d 即可。 缩进，使用 &amp;lt;, &amp;gt;&amp;gt; 当前行， &amp;gt;ap 缩进一段；&amp;lt; 与 &amp;gt; 作用相反, = 自动缩进。 nano命令翻页 Ctrl+Y &nbsp;&nbsp;&nbsp; 到上一页 Ctrl+V &nbsp;&nbsp;&nbsp; 到下一页 帮助中的 ^ 表示ctrl 键（也可以连续按两次esc 键代替）， M 表示 alt 键。 显示行号 打开 /etc/nanorc 将 # set constantshow 前面的注释#号去掉即可。 保存 Ctrl+O &nbsp;&nbsp;&nbsp; 来保存所做的修改 退出 Ctrl + X &nbsp;&nbsp; or&nbsp;&nbsp; q 参考文档。 PDF阅读软件 zathura~/.config/zathura/zathurarc 用户配置文件与路径； /etc/zathurarc 全局配置文件与路径； 使用 gedit ~/.config/zathura/zathurarc 添加下面的配置命令，#号以及后面为注释。 1234567891011set adjust-open &quot;width&quot; #以宽度自适应打开set font &quot;Noto Sans CJK SC Regular 10&quot; #字体与字号set guioptions &quot;&quot; #GUI相关，留空可隐藏底部statusbarset window-title-basename true #只显示文件名，否则显示完整路径set incremental-search true #增强搜索，实时搜索set show-v-scrollbar true #显示右侧进度条set selection-clipboard clipboard #粘贴版set window-height 760 #默认高度，像素set window-width 1300 #默认宽度# 更多请参考：https://github.com/lervag/dotfiles/blob/master/config/zathura/zathurarc mint 18.3 的路径1234567/etc/gnome/defaults.list #保存全局打开方式路径/usr/share/applications #保存，这两个是一样的～/.config/mimeapps.list #用户# 添加application/pdf=xpdf.desktop 快捷键 命令 功能 f 高亮链接，按 相应数字 打开链接； q 退出； # ^ 是 ctrl 键 ^f Scroll page down ^b Scroll page up ^d Scroll half a page down ^u Scroll half a page up r Rotate the page R Reload the document ^n Toggle statusbar visibility ^m Toggle inputbar visibility ^r inverted color /反色 space 半页 数字 + G 跳转页码 gg 最前 GG 最后 命令 命令 功能 :bmark xxx 创建书签xxx （长书签） :blist xxx 打开bookmark :bdelete xxx 删除书签 :q 退出 /word 搜索word，使用 n / N 跳到下一个(上一个)结果， /、? 搜索向前、向后 :info 显示文档信息 短命令书签 使用 a letter or number ，先按 m 键，然后按短书签名，创建； 跳转先前的短书签，先按 &#39; 键，然后先前的字母或数字； 关于复制问题 I discovered that zathura is using the x11 primary selection as default instead of the actual clipboard. This can be changed by creating a ~/.config/zathura/zathurarc file with the following content: 1set selection-clipboard clipboard 参考文档。 部分参考了此处 。 mpv 播放器笔记其播放效果要好于 vlc ，而且更符合 vimer 的习惯。 部分快捷键 命令 功能 [ ] { } 播放速度相关， backspace 恢复播放速度， f 全屏， q 退出， Q 保存播放位置退出， 9 0 音量减小与增大， space 播放暂停， T 总在最前面切换， s 视频截图，包含字幕， S 视频截图，不带字幕， alt + s 自动逐帧视频截图，开关， alt + 1 100%视频大小， alt + 2 两倍视频大小， alt + 0 恢复默认大小， up 快进60s， down 快退60s， right 快进5秒， left 快退5秒， 用户自定义~/.config/mpv/input.conf 快捷键文件路径， 参考文档。 常用小技巧长按 Alt 键拖动看不到head bar的窗口。 cd ~ 返回home目录(直接使用 cd，效果一致)，注意root用户的目录与普通用户目录的区别。 sudo 只能暂时提权，5分钟内不用输出密码。使用 sudo -i 或者 sudo -s 可以切换到root账户。 pwd 打印当前所在目录。 clear 清屏。 cat name 浏览name文件。 man xxx 查看 xxx 的详细说明文档(manual)。 sudo apt-cache search apache | less 用于搜索与 apache 相关的 包名（package name）。less 一页一页显示内容. 修改软件源 sudo vim /etc/apt/sources.list ，sudo apt-get update 更显后使用此更新。 sudo chmod -R 777 \* #对当前目录的所有文件以及文件夹授权 777，-R 递归所有子文件。 任务管理器打开命令： gnome-system-monitor 。 sudo gsettings set.com.canonical.Uniyt always-show-menus true 让 Unity 全局菜单始终可见，其中true改为 false 恢复。 sudo gnome-session-properties 管理开机启动。 /usr/share/applications 查看所有应用快捷方式。 sudo apt-get install -y ubuntu-desktop 修复桌面。 sudo 卸载应用 1234sudo apt-get remove --purge 软件名称 #--purge 不保留配置文件sudo apt-get autoremove --purge 软件名称 #可能会把相关软件也移除sudo apt-get autoremove --purge xxxxx #推荐sudo apt-get autoclean 16.04开始，用户可以实现改变启动器的位置，可以将启动器移到屏幕底部，但是无法移到右边或顶部。打开终端，然后输入下面这个命令，即可将启动器移到屏幕底部： gsettings set com.canonical.Unity.Launcher launcher-position Bottom 如果你使用后，觉得不喜欢，还可以恢复到屏幕左边，只要运行： gsettings set com.canonical.Unity.Launcher launcher-position Left nohup COMMAND &amp; 后台执行 COMMAND 命令，常用于 ssh 执行命令。 添加到 /etc/init.d/rc.local exit 以前 ，实现开机执行。 使用 ftp，以及 tar 打包与解压连接12345678910111213ftp 2001:da8:8019:235::30# enter username# enter password# ipv6 地址可能需要使用 中括号包裹。# 出现ftp&gt; ls #查看目录cd path # 切换路径pwd # 显示当前路径rm path # 删除文件rm -r path #删除文件夹bye #退出 客户端常用命令1234get test.md #下载远程文件到本地put test.txt #上传单个本地文件到远程服务mput file #上传多个文件 归档(打包与解包)1234567891011121314#.tar 参数带 z 表示调用 gzip 压缩tar xvf FileName.tar #解包tar cvf FileName.tar DirName # 打包tar czvf my.tar file1 #单个文件压缩打包 tar czvf my.tar file1 file2 ... #多个文件压缩打包 tar czvf my.tar dir1 #单个目录压缩打包 tar czvf my.tar dir1 dir2 #多个目录压缩打包 tar xzvf my.tar #解包至当前目录tar -cvf get.tar PEA_I_* PMA_I_* --exclude *.check #排除特定后缀文件tar -cvf get.tar PEA_I_* PMA_I_* --exclude *.check --exclude *.usp #排除多种文件tar -tf get.gz #查看压缩包文件 上面的 z 即是调用 gzip，如需调用 bzip、xz需要换成 j。 f 参数后面紧跟档案文件名。 v 显示过程。 此外 还有 u r d 等参数，具体见 man tar。 PASH环境变量的设置方法一：用户主目录下的.profile(推荐)或.bashrc文件 登录到你的用户（非root），在终端输入： 1sudo vim ~/.profile #(or .bashrc) 可以在此文件末尾加入PATH的设置如下： 1export PATH="$PATH:your path1:your path2 ..." 保存文件，注销再登录，变量生效。该方式添加的变量只对当前用户有效。 方法二：在系统目录，进行类似操作。 123/etc/profile/etc /environment 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。 设置系统变量 PATH 方法： /etc/environmet 中PATH 后面引号中添加，使用: 分隔不同的路径。 关于环境变量 1234561. $HOME是一个环境变量，它代表当前登录的用户的主文件夹（就是家目录的那个）2. $HOME/bin当然就是主文件夹下的bin子目录（注意不是根目录的那个）3. PATH=$PATH:$HOME/bin这句是设置PATH环境变量（设置环境变量用等号），首先:冒号是分割符（记得Windows上面也有PATH环境变量，Windows的路径之间的分隔符是;分号），$PATH:$HOME/bin表示在保留原来的$PATH环境变量的基础上，再增加$HOME/bin这个路径作为新的$PATH环境变量。 GIMP 相关全称 (The GNU Image Manipulation Program) 使用中文界面 用 LANGUAGE=zh_CN gimp 启动，或者LANG=zh_CN gimp ，然后在选择中文（不行就是阿里的源，sudo apt-get gimp重装一下）。 gimp裁剪图片，使用快捷键 shift + c。单窗口模式，在顶部 窗口 菜单下 启用单窗口模式。 常用操作教程 拖到最左边的工具列上，打开一张新的图片； ctrl + shift a，取消选区； 矩形选择 和 椭圆选择，使用ctrl减选，shift加选； 自由选择 工具将ps的 套索工具 和 多边形套索 工具结合，左键直接画是套索，而单击是多边形套索； 模糊选择 工具和 按颜色选择 工具则是把ps 魔棒 工具给分拆； ctrl + 鼠标滚轮 实现连续，Z + 鼠标选区 实现区域缩放； shift + ctrl + L 选区浮动，或者点击 选择，浮动。 ssh 使用在终端远程连接其他ubuntu系统 两台设备先安装ssh server和 clicent 12sudo apt-get install openssh-client sudo apt-get install openssh-server 启动于停止service 12345sudo /etc/init.d/ssh start #或者 sudo service ssh start sudo /etc/init.d/ssh stop sudo /etc/init.d/ssh restart client 使用下面的命令连接 sever 12345678ssh 用户名@ip ssh -l 用户名 ip# 文件交换#1.上传[如果目录 使用 scp -r ]scp '/home/rachpt/desktop/1.png' rc@10.42.0.1:/var/www/new/images/news#2.下载scp -r rc@10.42.0.1:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录） 允许 root 远程登录，修改server配置文件 12345678sudo gedit /etc/ssh/sshd_config#修改#PermitRootLogin without-passwordPermitRootLogin yes#然后重启sudo systemctl restart ssh.service 查看ssh 状态 123ps -e |grep ssh #看到sshd则说明ssh-server已经安装启动 Git 配置 ssh配置多用户 git 本地密钥。 生成新的ssh keys： 123456ssh-keygen -t rsa -C "your_email@example.com"#使用自定义名称/home/rachpt/.ssh/id_rsa_coding# or/home/rachpt/.ssh/id_rsa_github 复制，id_rsa_coding.pub or id_rsa_github.pub 至相应网站 SSH 公钥 页面，完成添加。 如果测试报错： 1sign_and_send_pubkey: signing failed: agent refused operation 解决办法： 123456789eval "$(ssh-agent -s)"ssh-add /home/rachpt/.ssh/id_rsa_coding# orssh-add /home/rachpt/.ssh/id_rsa_github#测试，需要输入，则 yes ssh -T git@git.coding.net# orssh -T git@github.com# 显示相应用户名，则表示成功。 其他的方法：配置 config 文件.12345678910111213# 编辑 ~/.ssh/config 或者 /etc/ssh/ssh_config vim ~/.ssh/config# githubHost github.com HostName github.com IdentityFile ~/.ssh/id_rsa_github# codingHost git.coding.net HostName git.coding.net IdentityFile ~/.ssh/id_rsa_coding 参考文档. 配置 FTP severlinux ftp服务器软件有 vsftpd ，pure-ftpd ，proftp 。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#安装sudo apt-get install vsftpd#控制命令sudo /etc/init.d/vsftpd startsudo /etc/init.d/vsftpd stopsudo /etc/init.d/vsftpd restart#或者类似sudo service vsftpd restart#多了ftp用户组和ftp用户sudo cat /etc/groupsudo cat /etc/passwd#ftp服务器的目录位置在 /srv/ftp，这也是匿名用户访问时的根目录。 #使用下列命令来间接更改目录cd /srvsudo rm -d ftp# 挂载家目录cd ~/sudo mkdir ftp# ln -s 为文件创件符号连接，非硬连接.cd ~#配置sudo gedit /etc/vsftpd.conf#允许匿名用户登录anonymous_enable=YES#允许本地用户登录local_enable=YES#开启全局上传write_enable=YES#允许匿名用户上传文件anon_upload_enable=YES #充许匿名用户新建文件夹anon_mkdir_write_enable=YES#加点banner提示ftpd_banner=Hello~~ #FTP服务器最大承载用户max_clients=100#限制每个IP的进程max_per_ip=5#最大传输速率(b/s)local_max_rate=256000#隐藏帐号hide_ids=YES #启动chroot列表(Change root)chroot_list_enable=YES#指定列表位置(我这用的是默认地址)chroot_list_file=/etc/vsftpd.chroot_listssup #这句默认设置里是没有的，自己加user_config_dir=/etc/自己定义一个设置个别用户用的文件夹地址 关于 vsftpd：500 OOPS: vsftpd: refusing to run with writable root inside chroot ()误的解决方法。比如配置匿名服务器，默认root 目录是 /srv/ftp ，1sudo chmod a-w /srv/ftp/ 即可解决。此帖也有反映。 文件共享samba 文件共享服务123456789sudo apt install samba #安装samba服务#更改配置文件sudo vi /etc/samba/smb.conf #其中 ` ; ` 注释行，#########sudo mount -t cifs -o username=***,password=**** //10.42.0.1/disk /media/rachpt/server/ #手动挂载至本地的路径。 使用 mount 挂载 samba 一直提示无权限，使用下面的命令，设置本地账户的smb密码 sudo smbpasswd -a 现有用户。 自动挂载linux 设置开机自动挂载硬盘，网路空间 首先使用： 12sudo blkid #查看硬盘的格式，以及设备名。# TYPE="ext4" 等。 编辑 /etc/fastab 文件，配置开机挂载。 12345678sudo vim /etc/fastab #编辑# 在后面添加新的行# disk sdb1 #号开头为注释，ext4 即是文件系统（格式）/dev/sdb1 /media/rachpt/disk ext4 defaults 0 0 #/media/rachpt/disk 为挂载点，/media/rachpt/server 也是，自己 mkdir# smb//10.42.0.1/disk /media/rachpt/server cifs defaults,username=**,password=*** 0 0# *为用户名与密码，分隔的空格可以使用多个 123smbclient -L 10.42.0.1 -N #此命令用于查看共享目录sudo mount -a #编辑好/etc/fastab，用此命令测试。 使用 blkid查看硬盘 UUID 和标签。 12sudo blkid /dev/sdb1$/dev/sdb1: LABEL="disk" UUID="9a0d1374-540f-4a32-92d1-2e1beaee1709" TYPE="ext4" PARTUUID="c0134fff-477f-4b71-be37-88119c640180" 12# disk sdb1 ,使用 uuidUUID=9a0d1374-540f-4a32-92d1-2e1beaee1709 /media/rachpt/disk ext4 default 0 0 也可以 添加 /etc/rc.lacal ,如下。（使用的是 nfs ，而非 samba） 1234567891011# By default this script does nothing.password="myRootPassword"echo $password |sudo mount -o v3 -t nfs 10.42.0.1:/home/rc /media/rachpt/rcecho $password |sudo mount -o v3 -t nfs 10.42.0.1:/srv/ftp/data /media/rachpt/ftp/dataecho $password |sudo mount -o v3 -t nfs 10.42.0.1:/srv/ftp/pub /media/rachpt/ftp/pubecho $password |sudo mount -o v3 -t nfs 10.42.0.1:/srv/ftp/mp4 /media/rachpt/ftp/mp4unset password exit 0 字体在终端输入以下命令进行字体安装： 1234567wget -O get-fonts.sh.zip http://files.cnblogs.com/DengYangjun/get-fonts.sh.zipunzip -o get-fonts.sh.zip 1&gt;/dev/nullchmod a+x get-fonts.sh./get-fonts.sh 如果要删除已下载的字体安装脚本，执行以下命令： 1rm get-fonts.sh get-fonts.sh.zip 2&gt;/dev/null 如果要恢复系统默认的字体，执行以下命令： 1234567cd /etc/fonts/conf.availsudo mv 51-local.conf.old 51-local.conf 2&gt;/dev/nullsudo mv 69-language-selector-zh-cn.conf.old 69-language-selector-zh-cn.conf 2&gt;/dev/nullsudo rm -f -r /usr/share/fonts/truetype/myfonts 2&gt;/dev/null 记录以备用。https://www.cnblogs.com/jaxu/p/5565326.html 中文语言下修改 home 文件夹 英文路径1vim ~/.config/user-dirs.dirs # 修改配置文件，也可以使用gedit,nano等 12345678XDG_DESKTOP_DIR=&quot;$HOME/desktop&quot;XDG_DOWNLOAD_DIR=&quot;$HOME/download&quot;XDG_TEMPLATES_DIR=&quot;$HOME/template&quot;XDG_PUBLICSHARE_DIR=&quot;$HOME/public&quot;XDG_DOCUMENTS_DIR=&quot;$HOME/document&quot;XDG_MUSIC_DIR=&quot;$HOME/music&quot;XDG_PICTURES_DIR=&quot;$HOME/picture&quot;XDG_VIDEOS_DIR=&quot;$HOME/video&quot; 或者使用 暂时改为英文环境，再改回中文： 1234567export LANG=en_US #step 1xdg-user-dirs-gtk-update #step 2# 跳出对话框询问是否将目录转化为英文路径,同意并关闭.export LANG=zh_CN #step 3#重起系统.系统会提示是否把转化好的目录改回中文.选择不再提示。 ubuntu 常用软件 htop 友好查看系统负载与进程， top 的加强版，一般 terminal 使用 q 键退出。 nload 监视网速，常用命令 nload -u M # 以MByte 为单位，也可以用 K 等，回车切换其他网卡。 System monitor Indicator 可以在状态栏以数字形式显示网速负载等信息。 nginx 配置locate nginx 列出所有相关文件位置； /etc/nginx/nginx.conf 服务器配置文件路径； /etc/nginx/sites-available/default 重定向配置文件路径； /etc/nginx/sites-enabled/default 这个应该是测试通过后的copy； nginx -t 用于测试配置文件是否正确； 12345678910111213141516171819202122232425262728server &#123; listen 80; server_name localhost; root /var/www; index index.php index.html; location / &#123; try_files $uri $uri/ =404; &#125;# 重定向 if ( $request_uri = &quot;/&quot; ) &#123; rewrite &quot;/&quot; http://rachpt.iok.la/new/ break; &#125; # 404 等页面重定向 error_page 404 http://rachpt.iok.la/new/hide/r404.php; error_page 403 http://rachpt.iok.la/new/hide/r403.php; error_page 501 502 503 504 /50x.html; location = /50x.html &#123; root /var/www; &#125;# php连接部分 location ~ \.php$ &#123; try_files $uri =404; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 更改/etc/nginx/nginx.conf在http定义区域加入： fastcgi_intercept_errors on; ，注意末尾分号。 ImageMagic 使用笔记一些快捷键 命令 作用 space 显示下一张图片 backspace 显示上一张图片 h 水平翻转 v 垂直翻转 / 顺时针旋转90度 \ 逆时针旋转90度 &gt; 放大 &lt; 缩小 F7 模糊图片 Alt+s 把图片中间的像素旋转 Ctrl+s 图象另存 Ctrl+d 删除图片 q 退出 display12345display foo.png #显示图片display *.png #如果你要显示多个文件，你可以使用通配符display -delay 5 * #幻灯片 import 截屏1234import foo.png #截取矩形区域，保存为 foo.png，import -pause 3 -frame foo.png #截取程序的窗口。-frame外框，-pause获得焦点才开始截图，import -rotate 30 -pause 3 -frame foo.png #倾斜窗口 30d度，import -pause 3 -window root screen.png #截取整个屏幕，暂停3秒。 Fit2D linux版下载地址http://ftp.esrf.eu/pub/expg/FIT2D/ 绑定两个地址： 12sudo mount --bind /mnt/smb/ /srv/ftp/test/ #将smb 链接到testsudo umount /srv/ftp/test/ #取消test的链接 花生壳安装32位：dpkg -i phddns_i386.deb64位：dpkg -i phddns_3.0_x86_64.deb 卸载：dpkg -r phddns phddns start（启动）| stop（停止）| status（状态）| restart（重启）|phddns reset（重置）phddns version（版本） Texmaker 在弹出的文件管理器下进入usr/share/applications/texmaker路径. 选中Texmaker的标签,右击鼠标,点中属性. 然后将Command一栏中的texmaker %F替换为 env UBUNTU_MENUPROXY= texmaker %F 可解决Texmaker快捷键失效问题。 mv 命令1234567mv file_2.txt file_3.txt file_4.txt /home/rc/document #移动多个文件到docmv -i file_1.txt /home/rc/document #交互式移动，提醒mv -v *.txt /home/rc/document #打印移动信息mv -vn *.txt /home/rc/document #n 移动不重复的mv -vu *.txt /home/rc/document #u 移动,时间戳更新的覆盖原来的mv -vb *.txt /home/rc/document #b 移动,以～备份原来的mv -f *.txt /home/rc/document #无条件覆盖 递归（Recursive）子目录，使用 参数”-r“或者”-R“。 1cp -n file1/ file2/ # 跳过相同的文件 1du -hc # 统计大小 终端中的链接符用法 &amp;&nbsp;&nbsp;&nbsp;&nbsp;使命令在后台运行。 只要在命令后面跟上一个空格和 ‘&amp;’。你可以一口气在后台运行多个命令。 12ping c5 rachpt.cn &amp;sudo apt-get update &amp; mkdir test &amp; ;&nbsp;&nbsp;&nbsp;&nbsp;运行几个命令。 命令顺序执行。前后空格可要可不要。 1apt-get update ; apt-get upgrade ; mkdir test &amp;&amp;&nbsp;&nbsp;&nbsp;&nbsp;操作符。 如果第一个命令执行成功，才会执行第二个命令。 ||&nbsp;&nbsp;&nbsp;&nbsp;操作符 。 如果第一个命令执行失败，才会执行第二个命令。 !&nbsp;&nbsp;&nbsp;&nbsp;操作符。 执行除了提供的条件外的所有的语句。 1rm -r !(*.html) #删除除了 ‘html’之外的所有文件 &amp;&amp;与||&nbsp;&nbsp;&nbsp;&nbsp;操作符。 ‘与’ 和‘ 或’ 操作符的组合，它很像 ‘if-else‘ 语句。 1234ping -c3 rachpt.cn &amp;&amp; echo "Verified" || echo "Host Down"# ping rachpt.cn，如果成功打印‘已验证’，否则打印‘主机故障’。# 等价于if ping -c3 rachpt.cn; then echo "Verified"; else echo "Host Down"; fi |&nbsp;&nbsp;&nbsp;&nbsp;(管道)操作符。 将第一个命令的标准输出作为第二个命令的标准输入. 1ls -l | less {}&nbsp;&nbsp;&nbsp;&nbsp;令合并操作符。 合并两个或多个命令，第二个命令依赖于第一个命令的执行。实质是一个没有名字的函数。注意后面的 } 要么单独一行，要么使用空格 隔离前后。作为对比，() 不必要，‘()’是新开一个子shell运行，‘{}’是在当前进程中运行。 12345[ -f /home/rachpt/Downloads/xyz.txt ] || touch /home/rachpt/Downloads/xyz.txt; echo "The file does not exist"[ -f /home/rachpt/Downloads/xyz1.txt ] || &#123; touch /home/rachpt/Downloads/xyz.txt; echo "The file does not exist" &#125; #检查一下文件‘xyz.txt’是否在Downloads目录下，如果不存在则创建之并输出提示信息。 ()&nbsp;&nbsp;&nbsp;&nbsp;操作符。 1(Command_x1 &amp;&amp; Command_x2) || (Command_x3 &amp;&amp; Command_x4) \ &nbsp;&nbsp;&nbsp;&nbsp; 连接符。 太长而分成多行命令。 ls 命令 参数 意义 -h 参数意味着便于人识别，单位 1024. -si 与h类似，单位 1000。 -S 以文件大小排序。 —block-size=K M G T P … 指定单位,两个-，无空格。 -a 显示隐藏文件，linux种使用“.”开头表示隐藏文件。 -d 只列出目录。例，ls -d *。 -g 不打印所有者。 -G 不打印组信息。 -n 打印UID和DID。 —color=never 不使用颜色。 -p 增加 / 标记文件夹。 -r 反序。 -R 递归列出子目录文件。 -X 以扩展名排序，同 —sort=extension 。 -t 以修改时间排序，新的在前面。 定时任务12345678910crontab -e #编辑任务crontab -l #查看任务sudo /etc/init.d/cron start #启动服务sudo service cron restart # 也行，还有 stop start等。# 现在都是用 systemd 管理daemon 了sudo syatemctl start|stop|status cronie # archlinuxpgrep cron #查看是否在运行 # m h dom mon dow command位置意义可用参数m分钟0-59h小时0-23dom天1-31Day Of monthmon月1-12dow星期0-7 0,7 星期天 Day Of Weekcommand要执行的命令使用绝对路径！在命令后加入 &amp;gt;&amp;gt; /home/rachpt/task.log 记录时间。 例子： 12*/1 * * * * python /home/rachpt/test.py &gt;&gt;/home/rachpt/test.log 2&gt;&amp;1# 每隔一分钟执行一次，表示重复的 用 */ + 时间。 12*/3 6-8 * * * python /home/rachpt/test.py &gt;&gt;/home/rachpt/test.log 2&gt;&amp;1# 上午6至8点，每隔 三分钟执行一次。 123* 5 * * * /bin/sh /home/rachpt/test.sh &gt;&gt;/home/rachpt/test.log 2&gt;&amp;1# 每天上午5点重复执行。 注意 * 号的数量。 * 代表所有的取值范围内的数字； / 代表”每”（“*/5”，表示每5个单位）； – 代表从某个数字到某个数字（“1-4”，表示1-4个单位）； , 分开几个离散的数字。 ubuntu 开启日志记录设置: 123sudo vim /etc/rsyslog.d/50-default.conf# 去掉 cron 前面的 '#' 号 更多请看。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Olex2 软件使用笔记]]></title>
    <url>%2F2017%2F12%2F14%2Fnotes-for-olex2%2F</url>
    <content type="text"><![CDATA[记录 使用软件 Olex2 解晶体的心得与备注。 打开文件 File —&gt; Open , 找到 ~.ins 文件，打开。 解结构 Work 中直接单击 Solve 即可自动解； 单击Work 右侧展开详情，选择Solution Program —&gt; ShelXS or ShelXT ,区别； 手动精修，单击Refine ,并展开详情； 左边窗口，鼠标右键 前后移动可以放大与缩小所有原子，左键单击不放左右可以旋转所有原子； 右键原子，第一项显示原子的相对质量，单击选中，重复取消选中，多选直接单击需要的原子即可，直接滚动鼠标滚轮，实现轻原子隐藏； 由重原子开始，选中其后，右侧Tool Work 标记名称，其中...可以 打开元素周期表； 每次标定等操作后点击Refine 精修一下，直到最上面的八个参量的值全变成绿色即可（d I R 等），R1小于10%为好； 最后如果有些多余的衍射点，需要使用最上面第一个Edit(图标铅笔)，在其中加上OMIT -2 75 (此为[测试中心]给的参考值)，其它需要自己试，勾上Refine 里面的Auto-update .. ,然后再多次精修即可 保存数据暂无 Olex2下载与插件Olex2 下载地址： http://www.olex2.org/olex2-distro/1.2/ http://jupiter.plymouth.edu/~jsduncan/software/olex2.php Shelx 插件下载网址： http://shelx.uni-ac.gwdg.de/~gsheldr/bin/ 其中1234#用户名：shelx #密码：I43212 感谢木蚂蚁网友账号分享，密码中第一个是字母 i 。 linux 安装方法，将可执行文件移动到olex2中，给可执行权限。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>olex2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 中的 Firefox]]></title>
    <url>%2F2017%2F12%2F09%2Ffirefox-in-ubuntu%2F</url>
    <content type="text"><![CDATA[记录几个 firefox 相关的笔记。 进入Firefox的方法有： SUPER + A，然后按firefox，回车。这个是在Dash面板中搜索应用程序运行。事实上，只要按fir就能定位到Firefox程序。 ALT，然后按firefox，回车。这个相当于在命令行运行一条命令。 在终端中按firefox&amp;，回车。这个适用于以终端作为主要操作窗口的用户，使用TAB键还可以自动补全命令（只需输入前几个字母再按TAB键）。&amp;在shell中是后台运行的意思，这样终端就不会被Firefox独占。 部分常用快捷键CTRL + T: 新建标签页 CTRL + W: 关闭标签页 CTRL + SHIFT + T: 重新打开最近关闭的一个标签页 CTRL + TAB: 切换到下一个标签页 CTRL + SHIFT + TAB: 切换到上一个标签页 ALT + [1-8]: 跳到制定标签页 ALT + 9: 跳到最后一个标签页 CTRL + L: 跳到地址栏 ESC: 停止加载当前页面 CTRL + K: 跳到搜索引擎输入框 CTRL + F: 在当前页面中搜索 /: 快速查找。在Linux中很多程序（如VI、Man、Less）都使用/作为搜索的快捷键，并且可使用正则表达式查找。但在Firefox中没有正则表达式搜索的功能。 CTRL + D: 收藏到书签 ALT + 左方向键: 后退 ALT + v: 前进 CTRL + Q: 退出 F3 ：查找下一处（向下） SHIFT + F3 ：查找上一处（向上） ctrl-shift-Del ：清除上网记录 Alt+上方向键 或 Alt+下方向键 ：选择或管理搜索引擎 Alt+左方向键 或 Backspace ：后退 Shift+Backspace 或 Alt+右方向键 ：前进 Ctrl + Shift + H ：小窗口打开历史记录 关闭恢复页面每次强行 kill 进程后，再次打开 firefox ，会提示恢复之前页面。对于浏览器偶然崩溃找回之前页面来说不错，但是一般不会，因为需要使用脚本控制 firefox ，所以 kill 后，不需要恢复，于是这样设置。 地址栏 about:config，回车。 查找browser.sessionstore 。 browser.sessionstore.max_tabs_undo 改为0（非法关闭后保存的Tab页数 0）。 browser.sessionstore.max_windows_undo 改为0（保存的窗口数 0）。 browser.sessionstore.resume_from_crash 改为false（禁用恢复会话功能）。 重启 firefox生效。 关闭标签后无法使用 ctrl + shift + T 恢复。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>firefox</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COMSOL 简要笔记]]></title>
    <url>%2F2017%2F12%2F04%2FCOMSOL-notes%2F</url>
    <content type="text"><![CDATA[未完待续…… COMSOL 简单模拟声子晶体步骤 定义 参数设置 几何 几何模型 材料 计算的材料选择 物理场 其中 边界条件选择尤为重要 网格 网格 计算 后续计算 结束 一切完成，导出数据]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>comsol</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 文件 hash]]></title>
    <url>%2F2017%2F12%2F03%2Fcalc-hash-in-linux%2F</url>
    <content type="text"><![CDATA[记录如何计算文件哈希的方法。 如何计算文件哈希md5sum filename 即可,更多: 命令格式 md5sum [OPTION]… [FILE]… 命令选项 -b 或 —binary :把输入文件作为二进制文件看待。 -t 或 —text :把输入的文件作为文本文件看待（默认）。 -c 或 —check :用来从文件中读取md5信息检查文件的一致性。(不细说了参见info) —status :这个选项和check一起使用,在check的时候，不输出，而是根据返回值表示检查结果。 -w 或 —warn :在check的时候，检查输入的md5信息又没有非法的行，如果有则输出相应信息。 例子 生产一个文件的md5值，md5sum filename &gt; filename.md5]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[越想越气——福利]]></title>
    <url>%2F2017%2F12%2F02%2Fwelfare-for-pt%2F</url>
    <content type="text"><![CDATA[好心发个种子被傻X的Dupe规则删掉了，说的就是 HDChina （等）. 这里分享一个 PT 吸血方法。 如果你不知道我在说啥，请不要继续往后看了。 教程开始首先正常下载种子。 utorrent 开始下载，然后，按下图打开 详情信息。 待到连上足够多的用户后，有较快下载速度，进行后续，如果是冷们资源，可能此法无效。 如下，找到伺服，右键，移除 tracker 。此处使用此方法不会影响下载速度（下载完成之前 不要 暂停、停止、断网等中断行为），这样 PT Tracker 就没法记录你这个种子的下载和上传流量了。如果你吝啬一点可以限制上传速度。 待到下载完成后，右键删掉任务。别手贱删数据。 至此，教程结束。 你会发现pt站只是记录你未完成该种，我突然不想下来，怎么找，你来ban我啊，我又没使用作弊软件刷上传数据。 理论上越是热门的东西，速度越是无区别。 如果你不想有个未完成任务，你可以再上面的步骤完成后 假装辅种一下。如果你不会，就算了。也没人会查你，就算查又能怎样。 这是 tracker 的普遍漏洞。 现在你再也不用担心下载东西而使分享率下降，因为你的下载量不会再增加了。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>pt</tag>
        <tag>ut</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决WAMP搭建PHP环境后后局域网其他机器无法访问的问题]]></title>
    <url>%2F2017%2F12%2F02%2Fsolve-some-problem-about-wamp%2F</url>
    <content type="text"><![CDATA[解决WAMP搭建PHP环境后后局域网其他机器无法访问的问题。 刚安装wamp以后本地访问localhost或者127.0.0.1可以访问，但是如果局域网内其他电脑访问则出现403错误。从网上找了很多，各种说法都有了，却没几个好用的。 解决问题方法如下：首先确定关闭了防火墙并且80端口没有被占用.修改apache的httpd.conf文件，一共两处. 第一处12345Options FollowSymLinksAllowOverride NoneOrder deny,allowDeny from allSatisfy all 修改为： 123456789Options FollowSymLinksAllowOverride NoneOrder deny,allow# Deny from allAllow from all#允许所有访问Satisfy all 第二处onlineoffline tag - don’t remove Order Deny,AllowDeny from allAllow from 127.0.0.1 修改成：12345onlineoffline tag - don&apos;t removeOrder Deny,AllowDeny from allAllow from 127.0.0.1Allow from all 另外，如果使用DVWA的时候以上设置不起作用，因为htaccess限制了访问。解压DVWA以后放到主目录，将htaccess内规则修改如下：123order deny,allowdeny from noneallow from all 修改后重启apache，局域网内其他机器即可访问本机搭建的DVWA平台。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>wamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 学习笔记]]></title>
    <url>%2F2017%2F12%2F01%2Fnotes-for-learning-python%2F</url>
    <content type="text"><![CDATA[记录一些学习 python 的笔记。 1python -m pip install selenium 重要步骤 需要将firefox 与驱动程序（）加进环境变量。 字符串字符串中有 \ 的需要转意 \\ 。 原始字符串： r’string’ 。 字符串末尾不能以 \ 结尾，其表示未完继续。 长字符串： “““ strings ””” 。 列表123squarers = list(map(lambda x: x**2, range(10)))# 等价于squarers = [x**2 for x in range(10)] 这样写不会产生 副作用。 123&gt;&gt;&gt; [(x ,y) for x in [1, 2, 3] for y in [2, 3, 4] if x != y]# 输出[(1, 2), (1, 3), (1, 4), (3, 2), (3, 4), (2, 3), (2, 4)]]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用FlexGet订阅下载Torrent]]></title>
    <url>%2F2017%2F11%2F30%2Fflexget-for-ut%2F</url>
    <content type="text"><![CDATA[此文目的在于简单的使用FlexGet代替UT自带的订功能，实现特殊需求。 FlexGet 基于 Python 的一套订阅方案，看到 PY 就能想到其牛逼。 环境配置FlexGet所要求的Python环境为2.7或者3.5，（不支持3.6及其以上，具体自己官网瞧）官网：https://flexget.com/ 。 Python环境安装，(现在 3.6 也是可以的, 2018-07-27 更新)推荐3.5版64位的，安装时记得添加进环境变量。https://www.python.org/ftp/python/3.5.4/python-3.5.4-amd64.exe 。 FlexGet按照官网方法 https://flexget.com/InstallWizard/Windows 安装。其中注意，如果你之前已经同时安装了py2和py3，那你可能得百度一下自己修改一下命令，python2 python3 。 1python -m pip install -U pip setuptools 12pip install flexget//有可能需要使用pip3,具体看自己环境 1flexget -V 至此基于 Python 的 FlexGet 环境已经搭建好了。下面我们配置 FlexGet 的控制文件。 配置FlexGet任务计划程序（我已经默认大家使用的是windows）添加任务，如下面两图。 使用1分钟即可，不要配置几个任务，因为运行一次大概需要20-40秒，其中操作使用vbs文件，文件如下写: 1234Set ws = CreateObject(&quot;Wscript.Shell&quot;) ws.run &quot;C:\Python35\Scripts\flexget.exe execute&quot;,vbhide# 注意上面的路径，execute 参数很重要。 推荐直接在你的用户目录下新建flexget文件夹，然后将配置文件config.yml (自己建一个txt文件改后缀名即可)丢里面。 config.yml 按照下面的代码填写即可快速设置：1234567891011121314tasks: TTG-WiKi: rss: https://totheglory.im/**** if: - &quot;&apos;1080p&apos; in title&quot;: reject - &quot;&apos;WiKi&apos; in title&quot;: accept download: C:\FlexgetDownloads\ content_size: min: 400 max: 60000 strict: no free_space: path: C:\ space: 900 说面一下，注意使用两个空格（不能使用制表符）严格对其，自行百度 yml 就知道原因，rss就是你在PT站上面得到的个人RSS链接，download: 后面是你的utorrent自动载入种子的目录，content_size: 正如其义，可用于控制种子体积。其它可以参考 https://flexget.com/Plugins 。这里感谢[珞樱-WHUPT]的AutoSeed配置文件详解。 UTorrent设置设置 UT 自动从文件夹载 torrent 文件，如下图： 测试使用 flexget --test 测试，flexget execute直接运行也可以。 一般来说，种子发布后，2-3分钟内可以实现自动下载，而使用utorrent自带的rss刷新时间最少为5分钟，而且无法自定义体积等其它高级筛选。更多可以参考 https://pt.whu.edu.cn/forums.php?action=viewtopic&amp;topicid=2017&amp;page=p20477 。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>pt</tag>
        <tag>flexget</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[京东预售商品加入购物车]]></title>
    <url>%2F2017%2F11%2F28%2Fadd-items-to-jdcart%2F</url>
    <content type="text"><![CDATA[可能已经失效。 京东抢购商品 在开始前提前加入购物车，这能够很大概率增大成功几率。使用下面的网址提交即可实现。 1https://cart.jd.com/gate.action?pid=商品编号&amp;amp;pcount=1&amp;amp;ptype=1 其中的 商品编号 可以在商品详情页面网址中找到，就是那串数字。 抢购的时候。只需看着电脑上的毫秒显示，手机点击 [code]去结算[/code]， 使用默认收货信息，快速点击 立即下单 。除非是特别稀少，应该是能抢到的。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>jd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的研究生阶段该如何度过？]]></title>
    <url>%2F2017%2F11%2F20%2Fmy-graduate-stage%2F</url>
    <content type="text"><![CDATA[在大学即将毕业的时候，我就开始思考我该如何度过这3年或者5年的研究生阶段。 浑浑噩噩，已经半载。 现在开始有丝丝想法，稍纵即逝，我写下来好了。 &nbsp; 努力让自己真正忙起来，有目标、有意义、有规划地忙，而非无头苍蝇。 &nbsp; 对于软件方面：具体而言，在保证正常或者看似正常的必修课程学习的前提下，在最近的一到两个月入门[code]python[/code]语言，并会简单的计算。 强化MS与COMSOL的学习，matlab复习基础操作，直至写函数模块。 如果有时间，需再学习PS的复杂抠图等不常用功能。 对双拼输入法进行纠错性再学习，有意识的进行打字训练。 &nbsp; 对于专业方面：系统学习与整理今后将要用到的各种专业术语，制成文件。 专业单词整理，一定要打印出来。（包括量子力学，量子统计等方面的） 量子力学目前状况不是不懂，而是根本没看，因此以工作中心来看待，毕竟量子力学位高权重。 对于固体物理，需要再学习，着重理解相关概念，不仅多门课有涉及，以后对研究内容也是基础。 如果有时间，复习简单光学知识，毕竟光学专业。 &nbsp; 例外：六级，单词为先，首先得过，才能毕业。 &nbsp; 。 。 2018.01.01 目前折腾的有： python 感觉进展缓慢，目前 linux 下的环境编辑器都已经弄好了，可以开始了； web 建站与配置，重appache 到 nginx ； html 与 php ，主要是课题组网站方面的； linux 系统，ubuntu 与 mint，试了好几款 linux ，对 mint 相见恨晚； Transmission 与 flexget 自动下载配置，试了些其他的bt客户端，我还是老老实实使用 transmission 吧； ftp 配置，linux下的 ftp 真心难配置； GIMP ，考虑再学一门 “PS”； LaTeX 写东西，简历与beamer。 &nbsp; 这大半个月里，经常是很晚才睡，好多其他事都没做， 该停一停，缓一缓了， 现在全力应对 期末考试。 &nbsp; TO BE CONTINUING &nbsp;]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>忙</tag>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《利用Python进行数据分析》]]></title>
    <url>%2F2017%2F11%2F17%2Fpython-for-data-analysis%2F</url>
    <content type="text"><![CDATA[一本书。 [第2版][2017年9月25日] title: Python for Data Analysis: Data Wrangling with Pandas NumPy and IPython 2nd Edition Author: Wes McKinney Length: 550 pages Edition: 2 Language: English Publisher: O’Reilly Media Publication Date: 2017-09-25 ISBN-10: 1491957662 ISBN-13: 9781491957660最新版利用Python进行数据分析，基于Python3.6，数据分析必备教材！ 点击跳转到下载页]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高等量子力学_打印版笔记]]></title>
    <url>%2F2017%2F11%2F17%2Fquantum-mechanics-notes%2F</url>
    <content type="text"><![CDATA[胡勇 老师上课笔记。同高统一样，不废话。 这里提供网盘链接，链接评论可见！评论后请刷新页面。 &nbsp; [reply]点击跳转到下载页[/reply] &nbsp; 2018.01.17 更新部分习题答案，以及全部笔记。 2017.12.02 更新2017.01试题照片。 2017.11.17 更新第二节课件。 2017.11.17 开始更新第一节课件。]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>课件</tag>
        <tag>高亮</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高等统计物理_打印版笔记]]></title>
    <url>%2F2017%2F11%2F16%2Fstatistical-physics-notes%2F</url>
    <content type="text"><![CDATA[首先，我也是有写笔记的，感谢年级群里面分享的同学，做这个打印版的初衷是回归pdf文档本质，去除杂项，优化以用于打印，方便后期复习。然并卵哪有时间看啊。 后来改进了部分方法，使得优化后的笔记质量有较大提高，由于原笔记有水平偏要的强行校准后优化成矢量版会恢复倾斜，于是标题`黑白打印版`的都只是黑白而已，放到最大有像素颗粒。而 `高清矢量版`则比较平滑。 这里提供网盘链接，链接评论可见！评论后请刷新页面。 &nbsp; * * * [reply][点击跳转到下载页](https://pan.lanzou.com/b114871/)[/reply] * * * 2017.12.05 更新至第六周课堂笔记。 2017.11.23 更新至第五周课堂笔记。 2017.11.21 更新至第五周课堂笔记part1。 2017.11.17 更新至第四周课堂笔记。 2017.11.16 更新至前三周课堂笔记。 &nbsp; ​]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>课件</tag>
        <tag>高统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[教育网IPV6下载YouTube视频]]></title>
    <url>%2F2017%2F11%2F16%2Fdownload-youtube-video%2F</url>
    <content type="text"><![CDATA[前些天有同学问我youtube视频怎么得到，这里展示一个对于教育网用户能够快速获得（下载）YouTube视频的方法。 YouTube 是啥，不存在的网页…… 要想访问YouTube，你先的学会“翻墙”，至于how，自己想办法，如果你有幸使用的是中国科研教育网，并且能接入ipv6，那么通过下面简单的几个步骤就能获得YouTube视频音乐。（有时效性） ipv6?一个简单的办法，能打开 http://ipv6-only.netsh.org/ (或者 http://ipv6test.isoc.hk/index.html.zh_CN )则表示你有IPV6地址，如果你曾经有过，现在突然用不了了，可能只需修复一下以太网即可。 hosts翻墙不易，一般而言改hosts是最快的FQ方式，教育网推荐 https://serve.netsh.org/pub/ipv6-hosts/ 这个上面的 hosts (备份下载地址)，没有ipv6的可以尝试百度 ipv4的hosts （这个有时效性），因为ipv6的hosts一般不易被墙所以推荐。至于怎么改，请出门百度关键词 hosts 。 下载改好hosts后惊喜地发现了新天地，可是教育网ipv6hosts是无法在线播放YouTube视频的，只能预览，但是能够使用特殊的方式下载。 请先收藏 http://www.clipconverter.cc/ 不要问问什么， 按照下面图片所示操作即可。 复制 视频链接 http://www.clipconverter.cc/ 然后 视频越大，等待时间越长 最后下载即可。 文末推荐如果你还在使用迅雷这种下载器，那建议你果断卸载，并使用 IDM，有绿色破解版推荐 http://www.zdfans.com/575.html ，谁用谁知道，不解释。 更新，请去 nocmd 下载 IDM 破解版。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>IPV6</tag>
        <tag>YouTube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的安卓我做主]]></title>
    <url>%2F2017%2F11%2F14%2Fmy-android%2F</url>
    <content type="text"><![CDATA[开放源代码的安卓系统无疑是可玩性、可定制性极强的OS。在几年前我对安卓与IOS等系统还无法真正区分，直到换了新安卓手机，自己琢磨学会了刷机。为什么刷机，刷机可以体验到官方系统完全没有的新功能，有可能解决官方无法修复或者实现的功能但也可能引入其他缺陷（全看适配开发者个人能力），就像换了一台新手机，也可以体验纯正的Google服务（前提是要有相应的适配ROM）。 安卓 安卓一般指Android（Google公司开发的操作系统）。 开源精神是 Free &amp; Open Source，意思是自由与源代码开放，Free是自由不是免费。自由及开放源代码软件Free and open-source software Recvory安卓的硬件和软件是可以分开的，因此用户可以选择其他的系统（定制系统）。刷机和电脑的装系统道理是一样的，当时受限于硬件区别，不是所有的手机底层系统（俗称Recvory）都和电脑的底层系统Bios一样支持所有系统，因此安卓手机刷机的前提是Recvory的支持。TWRP Recovery算是目前最为顺手的 Recovery 了。但是一般情况下这并不是一种通用Recovery，需要有大牛针对具体硬件修改（也称适配）才能用。有了第三方REC是刷机的第一步。有些手机是有BootLoader的，要刷第三方REC就必须先解锁（比如小米魅族），BootLoader在一定程度上能保护用户手机，但还是有可能遭到暴力破解的。魅族手机好像是不给解锁BootLoader的，也就不能刷第三方ROM。具体刷机方法一般给手机论坛或者第三方论坛都有详解。 ROMMiui很便捷，该有的都有，Flyme适合不折腾的人，魔趣ROM可能是最贴切的偏原生安卓系统，AospExtended可能是最接近原生安卓的系统（加个Gapps几乎就是亲儿子了），Resurrection Remix OS（一般称RR）可定制性极高的原生类ROM，其他还有很大定制ROM，这里不详解。 root要想获得系统最高的控制权（root权限），可能小白用户会选择各种一键root应用，但是这里机器不推荐这么干，因为这些工具或多或少都有流氓行为，最优的办法是卡刷Super SU获得完美root权限。为什么要root，root后能够对应用进行完整控制，达到常规途径无法实现的操作。比如去广告，安装破解版应用，破解应用，卸载系统预装应用，自动操作，修改系统显示样式，查看连接过的wifi密码，特殊设置达到省电目的等。 ADBroot已经是玩机用户必备，但是root也可能会引入其他麻烦，最直接的就是影响官方系统的FOTA升级（如果是官方系统）。对于大部分国产rom一般来说root后的系统是不能通过FOTA（增量包）方式升级的。这里推荐一个和root一样强大（或者说比root更强大）的方式，那就是ADB（Andorid Debug Bridge）工具，每个系统都有这个，不管是官方还是第三方，ADB在安卓的开发者模式中开启，ADB大致就是通过PC与通过USB或者网络连接的安卓系统之间进行命令操作控制。pc上需要有ADB工具，百度即可得到，手机上开启USB调试即可（PS.火车站免费充电处千万别打开USB调试，不然就相当于将手机最高权限交予他人）。连接配对后，在PC控制台输入命令即可控制手机，比如卸载、冻结 (隐藏，没有卸载，但是和卸载效果等同，并不破坏系统完整性)系统或者用户应用。由于有一定门槛，大多数人几乎都没听过。除了这种麻烦的方式外，有手机app开发者制作了使用ADB权限控制手机的应用，比如黑域 appops等对于没有root的用户简直就是神器。 这里推荐酷安应用市场，小而实用的各种应用，只要你想得到的几乎都有。 核心破解安卓核心破解，顾名思义，破解安卓的一些系统验证。比如应用签名，低版本应用覆盖安装。一般来说，如果一个应用被反编译后打包，其签名不是和原来一样，系统若检测到签名不一致就不能升级安装应用，有些要求高的应用如果不签名或者签名不一致，会导致闪退或者功能受限，这可是有违反编译的目的，为了能用，就需要强行使用原来的签名，但这样必须要破解安装核心验证，否者应用无法安装，这也就是破解安卓核心的目的所在。典型代表，各种修改、美化、去广告、精简版应用。如何破解，一般两种方式，一是使用幸运破解器 （神器，还能破解其他东西，谁用谁知道），二是使用xposed 模块破解，其实是幸运破解器的核心破解功能提取。前一种需重启两次才能全部破解。而且每次刷机都必须重新破解，比较麻烦。 Xposed又一个神器，以QQ防撤回、抢红包、微信界面修改、运动记步修改、界面美化等闻名。对于大部分常见rom，需要单独适配才能用。官方下载地址 http://dl-xda.xposed.info/framework/ ，rov89大神维护。 除自带商店外，酷安里也有xposed模块板块下载。 有了这些工具，配合相应的强大应用，比如My Android Tools（写轮眼）禁用app组件与权限，SD女佣清理垃圾较CCleaner对于windows之效，xopsed红包插件快到令人发指，阻止运行 绿色守护 黑域 以及各种冻结软件共同镇压流氓软件之间的相互唤醒、恶意唤醒、后台耗电，V4A 杜比音效 提升音质，tasker高级自动化…… 我的安卓，我做主。玩坏了，大不了用钛备份来一个完整备份与还原。]]></content>
      <categories>
        <category>实用</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[张维为：中国信心]]></title>
    <url>%2F2017%2F11%2F12%2Fchinas-confidence%2F</url>
    <content type="text"><![CDATA[张维为讲中国信心：中国崛起大势不可阻挡。[videojs_video url=”http://upload.rachpt.top/%E5%BC%A0%E7%BB%B4%E4%B8%BA%EF%BC%9A%E4%B8%AD%E5%9B%BD%E4%BF%A1%E5%BF%83_x264.mp4“] 党课第一节，老师放的这个视频，觉得讲的很好，所以分享给大家。 知乎：如何评价张维为的演讲《中国信心》？]]></content>
      <categories>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一个小视频]]></title>
    <url>%2F2017%2F11%2F11%2Fvideo-test%2F</url>
    <content type="text"><![CDATA[紫菘半圆广场的一天 一年前拍摄的一整天的延时视频。没有配音乐。 视频码率1Mbps，在线播放有卡顿，以后适当降低码率。]]></content>
      <categories>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Firefox 切换更新通道]]></title>
    <url>%2F2017%2F11%2F11%2Ffirefox-noupgrade%2F</url>
    <content type="text"><![CDATA[用过Firefox(火狐浏览器)的童鞋都知道，Firefox可是个更新狂魔，如果你只是一个浏览器轻度使用者，或者是是别人给你提供啥（预装）就用啥这种User，那么Firefox的高频更新对你可能影响不大。如果是和我一样，在浏览器中装了大量的生产力工具的重度（伪极客）用户，FX的更新可能是灾难性的。 Mozilla Firefox（简称Firefox），中文俗称火狐（中国大陆官方有使用但未注册为商标），是一个自由及开源的网页浏览器，由Mozilla基金会及其子公司Mozilla公司开发。Firefox支持Windows、OS X及Linux，其移动版支持Android及Firefox OS，这些版本的Firefox使用Gecko来排版网页，Gecko是一个运行当前与预期之网页标准的排版引擎，而在2015年发布的Firefox for iOS则非使用Gecko。 截至2016年1月，Firefox全球市占率为9％至16%，为全球第二流行的网页浏览器。 按更新频率大致可以这么排：ESR（42周），Release（6周），Beta（约一周），Nightly（每天），ESR是挺好的，但是Fx有个致命的缺点就是当扩展安装较多后，冷启动速度慢的令人发指，至于原因网上很多这方面的科学解释。现在更新的57版对冷启动速度有巨大提升，而插件兼容性方面对我影响不大，于是将所有的esr53.4升级到了57beta版（正式版当时还是56）。由于每次更新fx都会导致lastpass这个插件无法保持自动登录信息，能让fx延迟更新或者不更新吗？是有办法的。 [64位版Frefox] 默认安装目录 C:\Program Files\Mozilla Firefox\defaults\pref\channel-prefs.js 下使用记事本（notepad）打开，将末尾部分的 beta 改成 esr 即可进入延长支持版本通道，或者release 进入普通发行版通道。如下图。 最后可以在设置里面禁用Firefox的自动更新。 文末附上 Firefox的官方FTP下载地址，再也不用担心下到中国版了…… http://ftp.mozilla.org/pub/firefox/releases/ 我收藏的旧插件集，Fx 57+ 有部分用不了了 https://addons.mozilla.org/zh-CN/firefox/collections/rachpt/addons/ about:support 打开 配置目录 将 gmpopenh264.dll，gmpopenh264.info 这两个文件覆盖安装到 \gmp-gmpopenh264\1.6 目录下 ，版本号自己更新（在info文件中）]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[照片PDF优化成矢量版]]></title>
    <url>%2F2017%2F11%2F10%2Fmake-pdf-file-clear%2F</url>
    <content type="text"><![CDATA[手抄好慢好累，身边又没有扫面仪，嘿嘿，我手机像素好，拍照—&gt;打印—&gt;OK。可是…… 乌漆ma黑的，还有不相干的背景图，此处不放图。 平日里，我们看到的PDF文件一般有两种类型，一种是矢量版的，也就是无论放大多少倍，字体都是清晰的（某些图片也是清晰的），另外的一种就是体积很大的扫描版文件，放大后字体就会模糊。由于PDF文件一般不易被修改，因此里面的内容相对的更有保障，同时阅读容易（只需浏览器即可），因而大多数人都喜欢使用这种格式。 我想把用手机照片合成的PDF变成矢量打印清晰版，可以吗？ 当然可以，就是有点折腾。需要的软件有：Acrobat pro DC Photoshop ComicEnhancer Pro ，啥你不会PS，没事就很简单的几个步骤，ComicEnhancer Pro 可是重点条件，生产力工具，百度即可得到绿色版。 首先，将照片版PDF里面的照片提出出来（右键—&gt;另存 即可），导入PS，对照片的周围进行修改。使用画笔工具 [快捷键 B]，Alt 键 吸取边缘部分白色，将差别很大的背景涂成接近一致的颜色，[ ] 可用于放大缩小画笔工具。 改完后大致如上图。接着，使用ComicEnhancer Pro 将所有的修改后的图片导入进行批处理优化。导入后如下所示。 接着调节一下对比度 到60% 左右，亮度 调到最大，接着在其他 —&gt;色彩 里面设置颜色，色彩数 —&gt; 纯黑白 阈值算法—&gt; Wolf ，其他默认即可。效果如下。 至此优化基本完成。每一张图都保存一下，下面使用Acrobat pro DC 生成PDF文件，并进行增强优化。如下图所示。 至此已经全部完成。如果你的照片大小不完全一致，得到PDF各页之间可能有大小差异，可以选择打印，通过下面的设置，得到一份每页大小一致的PDF文件。 2017-11-10更新： 只需勾选如下选项即可快速去除边缘大部分背景。 至于每页大小不一致，这可以在PS中使用 快捷键[Ctrl + Alt + i] 调整每张图片宽度至一致即可。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>pdf</tag>
        <tag>acrobat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Materials Studio 超算步骤_精简版]]></title>
    <url>%2F2017%2F11%2F10%2Fmaterials-studio-super%2F</url>
    <content type="text"><![CDATA[简化以方便阅读。 结构优化文件准备 cif 文件按 ms_castep 命名（或者其他不带空格简单名字）； 选中全部原子，CASTEP Calculation 设置参数，[Setup] Task: Geometry Optimization , Quality: Ultra-fine , Functional: LDA, CA-PZ , More → Max.iterations 500 ,（默认的100可能不够） Optimize cell yes ; （优化晶格）[Electronic] More → Use custom energy cutoff 400 or others , k-points → Cusom grid parameters yes ,Grid parameters 4,2,4 or others ;[Propweties] Population analysis yes ; [Job Ctrol] Run in parallel on 8 or max （本地跑才需要设置这个） . Files → yes ； 在~Files→Documents→~CASTEP GeomOpt 复制 ~.cell 和 ~.param 文件到新文件夹 ~GeomOpt 同时复制 RunGeneral.sh &amp;amp; subGeneral 到其中； 设置 subGeneral 中 ppn=? 即是计算使用核数； 打开~.cell 找到 %BLOCK SPECIES POT 中的 ~.usp 部分，在 Material Studio 安装目录路径 C:\Program Files (x86)\Accelrys\Materials Studio 8.0\share\Resources\Quantum\Castep\Potentials\ 中复制所有需要的 到刚才的 ~GeomOpt 中（已经证明非比要，超算会自动加相应的 usp 赝势文件），至此结构优化文件准备已经完成。 超算部分 _结构优化 需要使用的步骤，dos2unix subGeneral RunGeneral.sh 转换步骤，chmod +x subGeneral RunGeneral.sh （只有使用 windows 提交的才需要这些），可以使用 Tab 自动填充，qsub subGeneral 提交任务， qstat 开始任务， bqueues 查看所有运行、请求与剩余的核数，qdel 任务ID号 结束任务； 下次在 qstat 无显示表示已经算完，但不知是否正常算完。$JOBNAME.o$JOBID 标准输出,$JOBNAME.e$JOBID 标准错误输出（直接看 .castep 文件最准确）。 计算弹性常数 下载除 ~.check 外的其他文件（.usp .pid 也不需要），复制粘贴并替换本地计算目录~GeomOpt ，在MS 中刷新refresh STP。 打开~.xsd 文件，选送全部原子，CASTEP Analysis → Structure →Upadte ；取消原子选中，CASTEP Calculation →Task Elastic Constants → Files ，Save。 根据右侧显示的~.param ms_castep_cij__ii__jj.param 修改subGeneral_cij.cij 中的循环次数，比最大的数大1。 复制文件到ms_castep_Cij ，所有原 Cij文件夹里面的 ~.cel ~.param 文件，以及~GeomOpt 里面的 ~.usp ~.sh ，以及刚才修改的subGeneral_cij.cij 。 提交ms_castep_Cij到远程，进入该目录，不要使用空格以及括号，否者出现 路径需要使用 \ 转义 ，chmod +x subGeneral_cij.cij RunGeneral.sh 以及 dos2unix subGeneral_cij.cij RunGeneral.sh ，ls 这两出现绿色（或其他）表示已经转码了（使用 ll 看有无执行权限 x即可），qsub subGeneral_cij.cij 提交任务，qstat 开始任务。 数据处理部分 同样，下载除 ~.check 外的其他文件，覆盖到原本地目录，找到并打开ma_castep.castep 文件，也就是总的计算结果。 使用CASTEP Analysis → Elastic constants → Calculate 。 右侧生成 ma_castep Elastic Contants.txt 文件包含计算得到的弹性常数等信息。 复制其中的Elastic Stiffness Constants Cij 矩阵到计算用的matlab程序包data内。 使用 Matlab 进一步计算 导入数据，Input.m 运行[F9] ，ElasticConst3D.m ElasticConst2D.m Plot 画图，YoungsModulus.m 计算 Youngs Modulus。 具体见 &gt; User’s Guide for ElasticConst 。 在线计算： http://progs.coudert.name/elate 关于MS 的一些笔记在计算弹性常数之前并不一定要进行几何优化，可以由实验观测到的结构计算出Cij数据。尽管如此，如果我们完成晶胞的几何优化，可以获得更多相容的结果，进而计算与理论基态对应的弹性常数。 弹性常数的精确度，尤其是切变常数的精确度，主要取决于SCF计算的品质，特别是布里渊区取样和波函数收敛程度的品质。所以我们设置SCF、k点取样和FFT格子的精度为Fine。 CASTEP的弹性常数计算任务的结果以一批.castep输出文件的形式给出。这些文件中的每一个文件都代表确定的晶胞在假设的应变模式和应变振幅下的几何优化运行结果。这些文件的命名约定为：seedname_cij__m__n。对于给定的模式来说，m代表当前的应变模式，n代表当前的应变振幅。 CASTEP可以使用这些结果来分析每一个运行计算出来的压力张量，产生一个有关弹性性质的文件。Modules | CASTEP | Analysis | Elastic constants ——&gt; sedname Elastic Constants.txt。 1234567此 `txt` 文档中的信息包括：* 输入的应变和计算出的应力的总结* 每一种应变模式线性拟合和拟合质量的计算结果* 给定对称性下计算出的应力与弹性常数之间的对应* 弹性常数Cij和弹性柔量Sij的表格* 导出量：体积模量和其倒数、压缩系数、杨氏模量、Poisson比、 Lame 常数(用于模拟各向同性介质) 完整原版教程： 下载 2017-12-14 更新 MS 如果不幸遇到下面的错误提示， 原因是： 文件路径中使用了中文字符所致。 解决办法： 使用非中文路径。 2018-03-14 更新 更新部分描述。]]></content>
      <categories>
        <category>DFT</category>
      </categories>
      <tags>
        <tag>ms,castep</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Acrobat 双页全屏显示]]></title>
    <url>%2F2017%2F11%2F10%2Facrobat-2pages-display%2F</url>
    <content type="text"><![CDATA[我有一个大显示器，但是阅读pdf时，Acrobat DC (或者reader) 使用快捷键 [ Ctrl + L ] ，全屏显示了,可是偌大的显示器只显示了一页，左右两边大大黑边很是浪费。有办法实现全屏双页显示吗？ 是的，可以。这里以Acrobat DC 为例。 Adobe Acrobat是由Adobe Systems所开发的电子文字处理软件集，可用于阅读、编辑、管理和共享PDF格式文档。 一般包含如下包： Adobe Acrobat，包括专业版和标准版。用于对PDF文件进行编辑、共享和管理，需要购买，而3D版本，除了专业版的功能，另外也支持立体向量图片的转换。 Acrobat Reader（2003年至2014年期间，曾使用Adobe Reader作为名称），用于阅读PDF文件，为免费发放。 首先，我们需要设置页面显示为双页视图，具体如下图所示。 然后，在 [首选项] - 快捷键[ Ctrl + K ]，或者从下面的位置进入。 接着，在 [首选项] →(左侧)[ 全屏 ]→[ 全屏设置 ]→去掉 &lt;下图红框项&gt; 前面的勾。如下图。 另外，如果你想开启Acrobat 的护眼模式(说白了也就是背景颜色)，可以设置一下 [辅助工具] 里面的 [文档颜色选项]，个人觉得这个不错——电脑管家的推荐色 [ R: 204 G: 232 B: 207 ]。 最后，使用快捷键 [ Ctrl + L ] 进入全屏阅读文档，或者点击 [ 视图 ] → [ 全屏模式 ] 。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建一个方便的多平台笔记方案]]></title>
    <url>%2F2017%2F11%2F10%2Fnote-markdown%2F</url>
    <content type="text"><![CDATA[在这里首先简介了一下md格式文件，md就是MarkDown的简称，就如HTML一样是一款标记语言，因其简洁明了兼容性强，语法简单同时又有比纯文本更丰富的样式而被多数的程序员使用。Windows下直接用记事本就可以打开编辑查看，但是标记语言丰富的样式得不到展示，这里我们使用三个平台（软件）实现windows与安卓手机之间的Markdown笔记同步协调工作。 插曲：我之所以不选择一家公司的现成完整方案，是因为：1、无用东西太多，不适合快速笔记，2、广告，非要用我看示广告，我可不干，3、数据难以迁移，只能吊死一颗树上。我们要用的有：坚果云、易码（手机APP）、还有 Typora（这篇文章就是就是用这个写的）。 坚果云免费账户每月1G上传流量3G下载流量，对于文档足够了。我们需要打开坚果云的第三方 WebDAV接口给易码，如下图 易码上使用坚果云账户（邮箱比如），密码是WebDAV应用的（这个是固定的不能改）。选一个文件夹用于存放笔记，可以设置默认保持在坚果云上，文档中的图片会一并同步到坚果云。在PC上下载坚果云的客户端，选择同步易码使用的笔记文件夹，Typora选则坚果云文件夹打开，这样PC手机就能同步协作创作了。 后记 易码我是在酷安发现的个人开发者，现在还是beta阶段但是已经相当好用，体积小巧（目前体积小于5兆）。推荐去酷安或者Google Play下载。 坚果云（和锤子科技没有半毛钱关系），还是挺好的，几乎没有难忍广告，速度通常比百度网盘快，空间累加，也就是你每个月上传1G文件，总空间就增加1G。 Windows平台的MD文件编辑阅读器较多，Typora算是免费中更符合大众需求的，源码时时展示，主题多样，唯一不好的可能就是没有中文菜单，至于显示中文默认使用衬线字体，可以自己修改主题的CSS样式实现。这里不赘述。 希望本笔记对喜欢折腾敢于冒险的读友有用。]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我总是很忙]]></title>
    <url>%2F2017%2F11%2F10%2Fso-busy%2F</url>
    <content type="text"><![CDATA[本来以为建好网站后，自己会轻松些许，看了是我想当然了。 上个月各种折腾，网站总算是从零到一，从无到有，基本够用了，但是那一丝丝的不甘终于在我发现Joomla！这个开原CMS后，转化成实际行动。 单就php上传文件乱码就困扰了很久，后来几乎就要完全解决了，但是登录模块是必须要数据库支持的，当然一切看似理所当然的事总有意外，折腾一整子后发现了phpmyadmin，脑袋突然一转，会不会有现成的类似工具？一搜果不其然，Joomla！进入我的视野，试用一下后，有了一种相见恨晚的气愤，相比其他，如果wordprass是电动车，那么Joomla！就是汽车，但是汽车得先考驾照，joomla的前期学习成本高，丈二和尚摸不着脑袋，好在优酷找到了很老的教学视频，入门容易很多。 在这之间还无意间测试并搭建了邮件系统，当是有bug，实用性不大，没经历深入研究。 想想，我好像总是能找到一件很无聊的事一个人自娱自乐。大一上课回去后一个人骑车出去夜逛，大二又迷上羽毛球，PS，mathematica，还有重装电脑，大三是越野自行车，到山里骑行，还有PT，大四上，考研，全身心投入，还学会了刷机，大四下干了啥，喔，看了些小说，…总之，好像时间总是会被其他与我无关的事所吸引。 虽然，生命不息，折腾不止，但是，本职工作，还需上心。 &nbsp;]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>忙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[顺利过度到 firefox 57]]></title>
    <url>%2F2017%2F11%2F03%2Fupto-firefox-57%2F</url>
    <content type="text"><![CDATA[Firefox 57可是说是火狐有史以来最棒的版本（我说的是速度），但是目前受限于webextension，很多以前实用的插件功能受限或者没有适配版。这里展示几个我遇到的问题与解决办法。 新标签打开书签页在firefox 57以前，如果你问有没有办法在新的标签打开书签、搜索、网址等，那么毫不犹豫会被推荐使用 Tab Mix Plus 这个插件，然而，现在的57版，该插件已经不再适用，因此还有办法延续我直接在新标签打开书签的习惯吗（别告诉我使用鼠标中键，我就喜欢左键）。 办法是有的， 1231. 在firefox 地址栏输入 about:config ，2. 确定，搜索 browser.tabs.loadBookmarksInTabs ，将其值改为 true (双击即可)。 也许你发现在标签页中建单击就关闭该页，如果你想不想使用这个关闭，可以按上述的方法修改该值 browser.bookmarks.openInTabClosesMenu 为 false 。 全局的鼠标手势用过 FireGesture 的都知道全局手势的吧便利性，在养成习惯后更是离不开，然而57版的Firefox可是不在支持这种牛逼的操作的了，虽然 Gesturefy 有望成为其替代者，但是终究是无法全局的。这里推荐一款能够实现全局手势的扩展软件 FireDoge 。 具体可以详见 https://shuax.com/portfolio/firedoge/ ，唯一缺点就是可定制性弱了一点。 其它插件Lastpass S3.Translator ADblock Plus ublock Tampermonkey 等都已经有适配版了，几乎已经能够满足大多数用户的需求。具体下载连接可以在下面的合集中找到。 https://addons.mozilla.org/zh-CN/firefox/collections/rachpt/1/ 至于移动版firefox，57版的冷启动速度已经正常了至少不会像以前版本让人感觉到明显的卡顿，但是网页加载渲染有些慢，没有手势（连下滑刷新都木有），或许后期有插件可以实现，目前还是继续使用我的小巧Via浏览器吧。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>firefox</tag>
      </tags>
  </entry>
</search>
